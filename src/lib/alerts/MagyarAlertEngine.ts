// src/lib/alerts/MagyarAlertEngine.ts
// Egys√©ges Magyar Alert Motor - Lecser√©li az AlertRuleEngine.ts √©s useAlerts.ts alert logik√°it

export interface Alert {
  id: string;
  type: AlertType;
  priority: AlertPriority;
  animal_id?: string;
  pen_id?: string;
  enar?: string;
  title: string;
  message: string;
  description: string;
  due_date: string;
  created_at: string;
  action_required: string;
  suggested_actions: string[];
  dismissible: boolean;
  auto_resolve: boolean;
  can_create_task: boolean;
  can_postpone: boolean;
  is_resolved: boolean;
  is_snoozed: boolean;
  snoozed_until?: string;
  resolved_at?: string;
  related_task_id?: string;
  metadata: Record<string, any>;
  animal?: {
    id: number;
    enar: string;
  };
}

export type AlertType = 
  | 'vakcinazas_esed√©kes'
  | 'valasztas_ideje'
  | 'karam_valtas_szukseges'
  | 'tenyesztesi_emlekezeto'
  | 'piaci_lehetoseg'
  | 'vemhessegvizsgalat'
  | 'rcc_vakcina_esed√©kes'
  | 'bovipast_vakcina_esed√©kes'
  | 'abrak_elvetel_esed√©kes'
  | 'elleto_karam_athelyezes'
  | 'elles_kozeledik'
  | 'elles_kesesben'
  | 'vemhessegvizsgalat_ismetles'
  | 'selejtezesi_javaslat'
  | 'kapacitas_tullepes'
  | 'kapacitas_alulhasznaltsag'
  // √öJ FOKOZATOS ALERT T√çPUSOK:
  | 'fulszam_idealis' | 'fulszam_ajanlott' | 'fulszam_surgos'
  | 'valasztas_idoszak_kezdete' | 'valasztas_ajanlott' | 'valasztas_surgos'  
  | 'vv_idoszak_kezdete' | 'vv_ajanlott' | 'vv_surgos'
  | 'karam_valtas_ovi_kezdete'
  | 'karam_valtas_ovi_ajanlott'
  | 'karam_valtas_ovi_surgos'
  | 'tenyesztesi_emlekezeto_kezdete'
  | 'tenyesztesi_emlekezeto_ajanlott'
  | 'tenyesztesi_emlekezeto_surgos'
  | 'piaci_lehetoseg_kezdete'
  | 'piaci_lehetoseg_ajanlott'
  | 'piaci_lehetoseg_surgos'
  | 'kapacitas_tullepes'         // ‚Üê √öJ
  | 'kapacitas_alulhasznaltsag'  // ‚Üê √öJ
  | 'fulszam_idealis'            // ‚Üê √öJ
  | 'fulszam_ajanlott'           // ‚Üê √öJ
  | 'fulszam_surgos';            // ‚Üê √öJ  
  

export type AlertPriority = 'surgos' | 'kritikus' | 'magas' | 'kozepes' | 'alacsony';

export interface Animal {
  id: string;
  enar: string;
  szuletesi_datum: string;
  ivar: 'n≈ë' | 'h√≠m';
  kategoria: string;
  statusz: string;
  kplsz?: string;
  pairing_date?: string;
  vv_date?: string;
  vv_result_days?: number;
  pregnancy_status?: 'vemhes' | 'ures' | 'csira';
  expected_birth_date?: string;
  jelenlegi_karam?: string;  // ‚Üê √öJ! (pen_id helyett)
  anya_enar?: string;
  apa_enar?: string;
  has_given_birth?: boolean;
  last_birth_date?: string;
  notes?: string;
  birth_location?: string;
  breed?: string;
  acquisition_date?: string;
  current_pen_function?: string;
  weaning_date?: string;  // ‚Üê √öJ MEZ≈ê HOZZ√ÅAD√ÅSA
}

export interface PenInfo {
  id: string;
  name: string;
  pen_number: string;
  pen_type: 'outdoor' | 'barn' | 'birthing';
  capacity: number;
  current_count: number;
  location?: string;
}

export interface AlertRule {
  type: AlertType;
  priority: AlertPriority;
  title: string;
  description: string;
  checkCondition: (animal: Animal) => boolean;
  daysFromBirth?: number;
  suggestedActions: string[];
  canCreateTask: boolean;
  canPostpone: boolean;
  appliesTo: string[]; // kateg√≥ri√°k vagy ivarok
  excludes?: string[]; // kiz√°rt kateg√≥ri√°k
}

// ============================================
// HELYES MAGYAR RIASZT√ÅSI SZAB√ÅLYOK
// ============================================

export const MAGYAR_ALERT_SZABALYOK: AlertRule[] = [

  // ============================================
  // F√úLSZ√ÅMOZ√ÅS FOKOZATOS (3 db) - Borjak modulban kezelt
  // ============================================

  {
    type: 'fulszam_idealis',
    priority: 'kozepes',
    title: 'üè∑Ô∏è F√ºlsz√°m id≈ëszak kezdete',
    description: 'F√ºlsz√°m felhelyez√©s id≈ëszaka kezd≈ëdik (10-14 nap) - ENAR: {enar}',
    checkCondition: (animal) => {
      return false; // Animals t√°bl√°ban l√©v≈ëknek nincs f√ºlsz√°m alert - Borjak modul kezeli
    },
    daysFromBirth: 10,
    suggestedActions: [
      'F√ºlsz√°m el≈ëk√©sz√≠t√©se',
      'BoviPast vakcina tervez√©se',
      'Szarvtalan√≠t√°s el≈ëk√©sz√≠t√©se'
    ],
    canCreateTask: true,
    canPostpone: true,
    appliesTo: ['n≈ëivar√∫_borj√∫', 'h√≠mivar√∫_borj√∫']
  },

  {
    type: 'fulszam_ajanlott',
    priority: 'magas',
    title: '‚ö†Ô∏è F√ºlsz√°m aj√°nlott ideje',
    description: 'F√ºlsz√°m felhelyez√©s aj√°nlott id≈ëszaka (15-19 nap) - ENAR: {enar}',
    checkCondition: (animal) => {
      return false; // Animals t√°bl√°ban l√©v≈ëknek nincs f√ºlsz√°m alert - Borjak modul kezeli
    },
    daysFromBirth: 15,
    suggestedActions: [
      'BoviPast vakcina bead√°sa',
      'F√ºlsz√°m felhelyez√©se',
      'Szarvtalan√≠t√°s elv√©gz√©se'
    ],
    canCreateTask: true,
    canPostpone: false,
    appliesTo: ['n≈ëivar√∫_borj√∫', 'h√≠mivar√∫_borj√∫']
  },

  {
    type: 'fulszam_surgos',
    priority: 'kritikus',
    title: 'üö® F√ºlsz√°m s√ºrg≈ës!',
    description: 'F√ºlsz√°m felhelyez√©s k√©sik, s√ºrg≈ës beavatkoz√°s (20+ nap) - ENAR: {enar}',
    checkCondition: (animal) => {
      return false; // Animals t√°bl√°ban l√©v≈ëknek nincs f√ºlsz√°m alert - Borjak modul kezeli
    },
    daysFromBirth: 20,
    suggestedActions: [
      'AZONNALI BoviPast vakcina',
      'AZONNALI f√ºlsz√°m felhelyez√©s',
      'Szarvtalan√≠t√°s halasztva - t√∫l k√©s≈ë'
    ],
    canCreateTask: true,
    canPostpone: false,
    appliesTo: ['n≈ëivar√∫_borj√∫', 'h√≠mivar√∫_borj√∫']
  },

  // ============================================
  // V√ÅLASZT√ÅS FOKOZATOS (3 db) - TEGNAPI T√ñK√âLETES VERZI√ì
  // ============================================

  {
    type: 'valasztas_idoszak_kezdete',
    priority: 'kozepes',
    title: 'V√°laszt√°s id≈ëszak kezdete',
    description: 'V√°laszt√°si id≈ëszak k√∂zeledik - ENAR: {enar}',
    checkCondition: (animal) => {
      const ageInMonths = calculateAgeInMonths(animal.szuletesi_datum);
      return ageInMonths >= 6 && ageInMonths <= 6.5 && 
             (animal.kategoria.includes('borj√∫') || 
              animal.kategoria === 'sz≈±z_√ºsz≈ë' || 
              animal.kategoria === 'h√≠z√≥bika') && 
             animal.statusz === 'akt√≠v';
    },
    suggestedActions: [
      'V√°laszt√°si el≈ëk√©sz√ºletek megkezd√©se',
      'Borj√∫ lev√°laszt√°s tervez√©se',
      'Kar√°m kapacit√°s ellen≈ërz√©se'
    ],
    canCreateTask: true,
    canPostpone: true,
    appliesTo: ['n≈ëivar√∫_borj√∫', 'h√≠mivar√∫_borj√∫', 'sz≈±z_√ºsz≈ë', 'h√≠z√≥bika']
  },

  {
    type: 'valasztas_ajanlott',
    priority: 'magas',
    title: 'V√°laszt√°s aj√°nlott',
    description: 'V√°laszt√°s optim√°lis id≈ëszakban - ENAR: {enar}',
    checkCondition: (animal) => {
      const ageInMonths = calculateAgeInMonths(animal.szuletesi_datum);
      return ageInMonths >= 7 && ageInMonths <= 7.5 && 
             (animal.kategoria.includes('borj√∫') || 
              animal.kategoria === 'sz≈±z_√ºsz≈ë' || 
              animal.kategoria === 'h√≠z√≥bika') && 
             animal.statusz === 'akt√≠v';
    },
    suggestedActions: [
      'Borj√∫ lev√°laszt√°sa anyj√°r√≥l',
      'BoviPast vakcina bead√°sa',
      'N≈êIVAR ‚Üí B√∂lcsi kar√°mba √°thelyez√©s',
      'H√çMIVAR ‚Üí H√≠z√≥bika kar√°mba √°thelyez√©s'
    ],
    canCreateTask: true,
    canPostpone: true,
    appliesTo: ['n≈ëivar√∫_borj√∫', 'h√≠mivar√∫_borj√∫', 'sz≈±z_√ºsz≈ë', 'h√≠z√≥bika']
  },

  {
    type: 'valasztas_surgos',
    priority: 'kritikus',
    title: 'V√°laszt√°s s√ºrg≈ës!',
    description: 'V√°laszt√°s t√∫ll√©pte az optim√°lis id≈ëpontot - ENAR: {enar}',
    checkCondition: (animal) => {
  const ageInMonths = calculateAgeInMonths(animal.szuletesi_datum);
  
  // CSAK VAL√ìDI BORJ√ö KATEG√ìRI√ÅKRA
  const isRealCalf = animal.kategoria === 'n≈ëivar√∫_borj√∫' || 
                     animal.kategoria === 'h√≠mivar√∫_borj√∫';
  
  return ageInMonths >= 8 && 
         !animal.weaning_date && 
         isRealCalf &&  // ‚Üê CSAK ezekre!
         animal.statusz === 'akt√≠v';
},
    suggestedActions: [
      'AZONNALI v√°laszt√°s sz√ºks√©ges',
      'Borj√∫ lev√°laszt√°sa anyj√°r√≥l',
      'BoviPast vakcina bead√°sa',
      'Kar√°m √°thelyez√©s v√©grehajt√°sa',
      'V√°laszt√°si d√°tum r√∂gz√≠t√©se a rendszerben!' // ‚Üê weaning_date r√∂gz√≠t√©s!
    ],
    canCreateTask: true,
    canPostpone: false,
    appliesTo: ['n≈ëivar√∫_borj√∫', 'h√≠mivar√∫_borj√∫', 'sz≈±z_√ºsz≈ë', 'h√≠z√≥bika']
  },

  // ============================================
  // VV VIZSG√ÅLAT FOKOZATOS (3 db) - MA IMPLEMENT√ÅLT
  // ============================================

  {
    type: 'vv_idoszak_kezdete',
    priority: 'kozepes',
    title: 'VV id≈ëszak kezdete',
    description: 'VV vizsg√°lat id≈ëszaka k√∂zeledik - ENAR: {enar}',
    checkCondition: (animal) => {
      if (!animal.pairing_date || animal.vv_date) return false;
      
      const pairingDate = new Date(animal.pairing_date);
      const daysSincePairing = Math.floor((Date.now() - pairingDate.getTime()) / (1000 * 60 * 60 * 24));
      
      return daysSincePairing >= 60 && daysSincePairing <= 74 && 
             (animal.kategoria.includes('teh√©n') || animal.kategoria.includes('√ºsz≈ë')) && 
             animal.statusz === 'akt√≠v';
    },
    suggestedActions: [
      'VV vizsg√°lat id≈ëpont el≈ëzetes egyeztet√©se',
      '√Ållatorvos el√©rhet≈ës√©g√©nek ellen≈ërz√©se',
      '√Ållat megfigyel√©s√©nek fokoz√°sa'
    ],
    canCreateTask: true,
    canPostpone: true,
    appliesTo: ['h√°remben_l√©v≈ë_√ºsz≈ë', 'teh√©n']
  },

  {
    type: 'vv_ajanlott',
    priority: 'magas',
    title: 'VV aj√°nlott ideje',
    description: 'VV vizsg√°lat optim√°lis id≈ëszakban - ENAR: {enar}',
    checkCondition: (animal) => {
      if (!animal.pairing_date || animal.vv_date) return false;
      
      const pairingDate = new Date(animal.pairing_date);
      const daysSincePairing = Math.floor((Date.now() - pairingDate.getTime()) / (1000 * 60 * 60 * 24));
      
      return daysSincePairing >= 75 && daysSincePairing <= 89 && 
             (animal.kategoria.includes('teh√©n') || animal.kategoria.includes('√ºsz≈ë')) && 
             animal.statusz === 'akt√≠v';
    },
    suggestedActions: [
      '√Ållatorvos megh√≠v√°sa VV vizsg√°latra',
      'Ultrahangos vizsg√°lat elv√©gz√©se',
      'VV eredm√©ny r√∂gz√≠t√©se a rendszerben'
    ],
    canCreateTask: true,
    canPostpone: true,
    appliesTo: ['h√°remben_l√©v≈ë_√ºsz≈ë', 'teh√©n']
  },

  {
    type: 'vv_surgos',
    priority: 'kritikus',
    title: 'VV s√ºrg≈ës!',
    description: 'VV vizsg√°lat t√∫ll√©pte az optim√°lis id≈ëpontot - ENAR: {enar}',
    checkCondition: (animal) => {
      if (!animal.pairing_date || animal.vv_date) return false;
      
      const pairingDate = new Date(animal.pairing_date);
      const daysSincePairing = Math.floor((Date.now() - pairingDate.getTime()) / (1000 * 60 * 60 * 24));
      
      return daysSincePairing >= 90 && 
             (animal.kategoria.includes('teh√©n') || animal.kategoria.includes('√ºsz≈ë')) && 
             animal.statusz === 'akt√≠v';
    },
    suggestedActions: [
      'AZONNALI √°llatorvosi vizsg√°lat sz√ºks√©ges',
      'Ultrahangos vizsg√°lat elv√©gz√©se',
      'VV eredm√©ny r√∂gz√≠t√©se a rendszerben',
      'Reprodukci√≥s ciklus fel√ºlvizsg√°lata'
    ],
    canCreateTask: true,
    canPostpone: false,
    appliesTo: ['h√°remben_l√©v≈ë_√ºsz≈ë', 'teh√©n']
  },

  // ============================================
  // B√ñLCSI ‚Üí √ìVI √ÅTMENET FOKOZATOS (3 db) - TEGNAPI SESSION
  // ============================================

  {
    type: 'karam_valtas_ovi_kezdete',
    priority: 'alacsony',
    title: '√ìvi kar√°mba √°thelyez√©s id≈ëszak kezdete',
    description: '11 h√≥napos sz≈±z √ºsz≈ë - √≥vi kar√°mba k√∂lt√∂ztet√©s el≈ëk√©sz√≠t√©se - ENAR: {enar}',
    checkCondition: (animal) => {
      const ageInMonths = calculateAgeInMonths(animal.szuletesi_datum);
      return ageInMonths >= 11 && ageInMonths < 12 && 
             animal.ivar === 'n≈ë' &&
             (animal.kategoria.includes('sz≈±z_√ºsz≈ë') || animal.current_pen_function === 'b√∂lcsi') &&
             animal.statusz === 'akt√≠v';
    },
    daysFromBirth: 335, // 11 h√≥nap
    suggestedActions: [
      '√ìvi kar√°m kapacit√°s ellen≈ërz√©se',
      '√Åthelyez√©s el≈ëk√©sz√≠t√©se'
    ],
    canCreateTask: true,
    canPostpone: true,
    appliesTo: ['sz≈±z_√ºsz≈ë'],
    excludes: ['teh√©n', 'h√≠z√≥bika']
  },

  {
    type: 'karam_valtas_ovi_ajanlott',
    priority: 'kozepes',
    title: '√ìvi kar√°mba √°thelyez√©s aj√°nlott',
    description: '12-13 h√≥napos sz≈±z √ºsz≈ë - √≥vi kar√°mba k√∂lt√∂ztet√©s aj√°nlott - ENAR: {enar}',
    checkCondition: (animal) => {
      const ageInMonths = calculateAgeInMonths(animal.szuletesi_datum);
      return ageInMonths >= 12 && ageInMonths < 14 && 
             animal.ivar === 'n≈ë' &&
             (animal.kategoria.includes('sz≈±z_√ºsz≈ë') || animal.current_pen_function === 'b√∂lcsi') &&
             animal.statusz === 'akt√≠v';
    },
    daysFromBirth: 365, // 12 h√≥nap
    suggestedActions: [
      'B√∂lcsi kar√°mb√≥l √≥vi kar√°mba k√∂lt√∂ztet√©s',
      'Kateg√≥ria meger≈ës√≠t√©s: sz≈±z_√ºsz≈ë'
    ],
    canCreateTask: true,
    canPostpone: true,
    appliesTo: ['sz≈±z_√ºsz≈ë'],
    excludes: ['teh√©n', 'h√≠z√≥bika']
  },

  {
    type: 'karam_valtas_ovi_surgos',
    priority: 'magas',
    title: '√ìvi kar√°mba √°thelyez√©s s√ºrg≈ës!',
    description: '14+ h√≥napos sz≈±z √ºsz≈ë - √≥vi kar√°mba k√∂lt√∂ztet√©s s√ºrg≈ës! - ENAR: {enar}',
    checkCondition: (animal) => {
      const ageInMonths = calculateAgeInMonths(animal.szuletesi_datum);
      return ageInMonths >= 14 && 
             animal.ivar === 'n≈ë' &&
             (animal.kategoria.includes('sz≈±z_√ºsz≈ë') || animal.current_pen_function === 'b√∂lcsi') &&
             animal.statusz === 'akt√≠v';
    },
    daysFromBirth: 425, // 14 h√≥nap
    suggestedActions: [
      'AZONNALI √≥vi kar√°mba k√∂lt√∂ztet√©s',
      'Kateg√≥ria meger≈ës√≠t√©s: sz≈±z_√ºsz≈ë',
      'K√©sedelmes √°thelyez√©s vizsg√°lata'
    ],
    canCreateTask: true,
    canPostpone: false,
    appliesTo: ['sz≈±z_√ºsz≈ë'],
    excludes: ['teh√©n', 'h√≠z√≥bika']
  },

  // ============================================
  // √ìVI ‚Üí H√ÅREM √ÅTMENET FOKOZATOS (3 db) - TEGNAPI SESSION
  // ============================================

  {
    type: 'tenyesztesi_emlekezeto_kezdete',
    priority: 'alacsony',
    title: 'H√°rem kar√°m alkalmass√°g id≈ëszak kezdete',
    description: '22 h√≥napos sz≈±z √ºsz≈ë - h√°rem kar√°mba k√∂lt√∂ztet√©s el≈ëk√©sz√≠t√©se - ENAR: {enar}',
    checkCondition: (animal) => {
      const ageInMonths = calculateAgeInMonths(animal.szuletesi_datum);
      return ageInMonths >= 22 && ageInMonths < 23 && 
             animal.ivar === 'n≈ë' && 
             !animal.kategoria.includes('teh√©n') &&
             animal.statusz === 'akt√≠v';
    },
    daysFromBirth: 670, // 22 h√≥nap
    suggestedActions: [
      'H√°rem kar√°m kapacit√°s ellen≈ërz√©se',
      'Teny√©szt√©si program el≈ëk√©sz√≠t√©se'
    ],
    canCreateTask: true,
    canPostpone: true,
    appliesTo: ['sz≈±z_√ºsz≈ë'],
    excludes: ['teh√©n', 'h√≠z√≥bika']
  },

  {
    type: 'tenyesztesi_emlekezeto_ajanlott',
    priority: 'kozepes',
    title: 'H√°rem kar√°m alkalmass√°g aj√°nlott',
    description: '23-24 h√≥napos sz≈±z √ºsz≈ë - h√°rem kar√°mba k√∂lt√∂ztet√©s aj√°nlott - ENAR: {enar}',
    checkCondition: (animal) => {
      const ageInMonths = calculateAgeInMonths(animal.szuletesi_datum);
      return ageInMonths >= 23 && ageInMonths < 25 && 
             animal.ivar === 'n≈ë' && 
             !animal.kategoria.includes('teh√©n') &&
             animal.statusz === 'akt√≠v';
    },
    daysFromBirth: 700, // 23 h√≥nap
    suggestedActions: [
      'H√°rem kar√°mba k√∂lt√∂ztet√©s',
      'Teny√©szt√©si program fel√ºlvizsg√°lata',
      'Kateg√≥ria friss√≠t√©s: h√°remben_l√©v≈ë_√ºsz≈ë'
    ],
    canCreateTask: true,
    canPostpone: true,
    appliesTo: ['sz≈±z_√ºsz≈ë'],
    excludes: ['teh√©n', 'h√≠z√≥bika']
  },

  {
    type: 'tenyesztesi_emlekezeto_surgos',
    priority: 'magas',
    title: 'H√°rem kar√°m alkalmass√°g s√ºrg≈ës!',
    description: '25+ h√≥napos sz≈±z √ºsz≈ë - h√°rem kar√°mba k√∂lt√∂ztet√©s s√ºrg≈ës! - ENAR: {enar}',
    checkCondition: (animal) => {
      const ageInMonths = calculateAgeInMonths(animal.szuletesi_datum);
      return ageInMonths >= 25 && 
             animal.ivar === 'n≈ë' && 
             !animal.kategoria.includes('teh√©n') &&
             animal.statusz === 'akt√≠v';
    },
    daysFromBirth: 760, // 25 h√≥nap
    suggestedActions: [
      'AZONNALI h√°rem kar√°mba k√∂lt√∂ztet√©s',
      'Teny√©szt√©si program s√ºrg≈ës fel√ºlvizsg√°lata',
      'Kateg√≥ria friss√≠t√©s: h√°remben_l√©v≈ë_√ºsz≈ë',
      'K√©sedelmes √°thelyez√©s vizsg√°lata'
    ],
    canCreateTask: true,
    canPostpone: false,
    appliesTo: ['sz≈±z_√ºsz≈ë'],
    excludes: ['teh√©n', 'h√≠z√≥bika']
  },

  // ============================================
  // H√çZ√ìBIKA √âRT√âKES√çT√âS FOKOZATOS (3 db) - TEGNAPI SESSION
  // ============================================

  {
    type: 'piaci_lehetoseg_kezdete',
    priority: 'alacsony',
    title: '√ârt√©kes√≠t√©si id≈ëszak kezdete',
    description: '18 h√≥napos h√≠z√≥bika - √©rt√©kes√≠t√©si lehet≈ës√©g el≈ëk√©sz√≠t√©se - ENAR: {enar}',
    checkCondition: (animal) => {
      const ageInMonths = calculateAgeInMonths(animal.szuletesi_datum);
      return ageInMonths >= 18 && ageInMonths < 20 && 
             animal.ivar === 'h√≠m' && 
             animal.kategoria === 'h√≠z√≥bika' && 
             !animal.kplsz && // NINCS KPLSZ = nem teny√©szbika
             animal.statusz === 'akt√≠v';
    },
    daysFromBirth: 550, // 18 h√≥nap
    suggestedActions: [
      'Piaci √°r figyel√©s kezd√©se',
      '√ârt√©kes√≠t√©si lehet≈ës√©gek felder√≠t√©se'
    ],
    canCreateTask: true,
    canPostpone: true,
    appliesTo: ['h√≠z√≥bika'],
    excludes: ['teny√©szbika']
  },

  {
    type: 'piaci_lehetoseg_ajanlott',
    priority: 'kozepes',
    title: '√ârt√©kes√≠t√©si lehet≈ës√©g aj√°nlott',
    description: '20-22 h√≥napos h√≠z√≥bika - √©rt√©kes√≠t√©s aj√°nlott id≈ëszak - ENAR: {enar}',
    checkCondition: (animal) => {
      const ageInMonths = calculateAgeInMonths(animal.szuletesi_datum);
      return ageInMonths >= 20 && ageInMonths < 23 && 
             animal.ivar === 'h√≠m' && 
             animal.kategoria === 'h√≠z√≥bika' && 
             !animal.kplsz && // NINCS KPLSZ = nem teny√©szbika
             animal.statusz === 'akt√≠v';
    },
    daysFromBirth: 610, // 20 h√≥nap
    suggestedActions: [
      'Piaci √°r ellen≈ërz√©se',
      'V√°s√°r id≈ëpontok felder√≠t√©se',
      'Selejt kar√°mba √°thelyez√©s m√©rlegel√©se'
    ],
    canCreateTask: true,
    canPostpone: true,
    appliesTo: ['h√≠z√≥bika'],
    excludes: ['teny√©szbika']
  },

  {
    type: 'piaci_lehetoseg_surgos',
    priority: 'magas',
    title: '√ârt√©kes√≠t√©si lehet≈ës√©g s√ºrg≈ës!',
    description: '23+ h√≥napos h√≠z√≥bika - √©rt√©kes√≠t√©s s√ºrg≈ës! - ENAR: {enar}',
    checkCondition: (animal) => {
      const ageInMonths = calculateAgeInMonths(animal.szuletesi_datum);
      return ageInMonths >= 23 && ageInMonths <= 24 && 
             animal.ivar === 'h√≠m' && 
             animal.kategoria === 'h√≠z√≥bika' && 
             !animal.kplsz && // NINCS KPLSZ = nem teny√©szbika
             animal.statusz === 'akt√≠v';
    },
    daysFromBirth: 700, // 23 h√≥nap
    suggestedActions: [
      'AZONNALI √©rt√©kes√≠t√©s szervez√©se',
      'Piaci √°r s√ºrg≈ës ellen≈ërz√©se',
      'Selejt kar√°mba √°thelyez√©s',
      'K√©sedelmes √©rt√©kes√≠t√©s vizsg√°lata'
    ],
    canCreateTask: true,
    canPostpone: false,
    appliesTo: ['h√≠z√≥bika'],
    excludes: ['teny√©szbika']
  },

  // ============================================
  // R√âGI VV SZAB√ÅLY - KIKAPCSOLVA (√∫j fokozatos szab√°lyok veszik √°t)
  // ============================================

  {
    type: 'vemhessegvizsgalat',
    priority: 'magas',
    title: 'Vemhess√©gvizsg√°lat esed√©kes',
    description: 'H√°remben 75 napja l√©v≈ë √°llat VV vizsg√°lata - ENAR: {enar}',
    checkCondition: (animal) => {
      return false; // ‚Üê KIKAPCSOLVA - √∫j fokozatos szab√°lyok veszik √°t
    },
    suggestedActions: [
      '√Ållatorvos megh√≠v√°sa VV vizsg√°latra',
      'Ultrahangos vizsg√°lat elv√©gz√©se',
      'VV eredm√©ny r√∂gz√≠t√©se a rendszerben'
    ],
    canCreateTask: true,
    canPostpone: false,
    appliesTo: ['h√°remben_l√©v≈ë_√ºsz≈ë', 'teh√©n']
  },

  // ============================================
  // EGY√âB STANDARD ALERT SZAB√ÅLYOK (v√°ltozatlan)
  // ============================================

  // üíâ RCC VAKCINA (2 h√≥nap ell√©s el≈ëtt)
  {
    type: 'rcc_vakcina_esed√©kes',
    priority: 'kritikus',
    title: 'RCC vakcina esed√©kes',
    description: 'RCC vakcina bead√°sa ell√©s el≈ëtt 2 h√≥nappal - ENAR: {enar}',
    checkCondition: (animal) => {
      if (!animal.expected_birth_date || animal.pregnancy_status !== 'vemhes') return false;
      
      const expectedBirth = new Date(animal.expected_birth_date);
      const rccDueDate = new Date(expectedBirth.getTime() - (60 * 24 * 60 * 60 * 1000)); // 2 h√≥nap el≈ëtte
      const today = new Date();
      
      return today >= rccDueDate && today <= new Date(rccDueDate.getTime() + (7 * 24 * 60 * 60 * 1000));
    },
    suggestedActions: [
      'RCC (Rotavirus-Coronavirus-E.coli) vakcina bead√°sa',
      '√Ållatorvosi konzult√°ci√≥',
      'Vakcin√°z√°s d√°tum√°nak r√∂gz√≠t√©se'
    ],
    canCreateTask: true,
    canPostpone: false,
    appliesTo: ['vemhes_√ºsz≈ë', 'vemhes_teh√©n']
  },

  // üíâ BOVIPAST VAKCINA (4 h√©t ell√©s el≈ëtt)
  {
    type: 'bovipast_vakcina_esed√©kes',
    priority: 'kritikus',
    title: 'BoviPast vakcina esed√©kes',
    description: 'BoviPast vakcina bead√°sa ell√©s el≈ëtt 4 h√©ttel - ENAR: {enar}',
    checkCondition: (animal) => {
      if (!animal.expected_birth_date || animal.pregnancy_status !== 'vemhes') return false;
      
      const expectedBirth = new Date(animal.expected_birth_date);
      const boviDueDate = new Date(expectedBirth.getTime() - (28 * 24 * 60 * 60 * 1000)); // 4 h√©t el≈ëtte
      const today = new Date();
      
      return today >= boviDueDate && today <= new Date(boviDueDate.getTime() + (7 * 24 * 60 * 60 * 1000));
    },
    suggestedActions: [
      'BoviPast vakcina bead√°sa vemhes √°llatnak',
      'Ell√©s el≈ëk√©sz√≠t√©s megkezd√©se',
      'Vakcin√°z√°s dokument√°l√°sa'
    ],
    canCreateTask: true,
    canPostpone: false,
    appliesTo: ['vemhes_√ºsz≈ë', 'vemhes_teh√©n']
  },

  // ü•ó ABRAK ELV√âTEL (2 H√ìNAP ell√©s el≈ëtt)
  {
    type: 'abrak_elvetel_esed√©kes',
    priority: 'magas',
    title: 'Abrak elv√©tel sz√ºks√©ges',
    description: 'Vemhes √°llat abrakj√°nak megvon√°sa ell√©s el≈ëtt 2 h√≥nappal - ENAR: {enar}',
    checkCondition: (animal) => {
      if (!animal.expected_birth_date || animal.pregnancy_status !== 'vemhes') return false;
      
      const expectedBirth = new Date(animal.expected_birth_date);
      const feedStopDate = new Date(expectedBirth.getTime() - (60 * 24 * 60 * 60 * 1000)); // 2 H√ìNAP el≈ëtte
      const today = new Date();
      
      return today >= feedStopDate && today <= new Date(feedStopDate.getTime() + (3 * 24 * 60 * 60 * 1000));
    },
    suggestedActions: [
      'Abrak teljesen megvon√°sa',
      'Csak szalma etet√©se',
      'V√≠zell√°t√°s biztos√≠t√°sa'
    ],
    canCreateTask: true,
    canPostpone: false,
    appliesTo: ['vemhes_√ºsz≈ë', 'vemhes_teh√©n']
  },

  // üè† ELLET≈ê KAR√ÅM √ÅTHELYEZ√âS (1 h√©t ell√©s el≈ëtt)
  {
    type: 'elleto_karam_athelyezes',
    priority: 'kritikus',
    title: 'Ellet≈ë kar√°mba √°thelyez√©s',
    description: '√Ållat ellet≈ë kar√°mba mozgat√°sa ell√©s el≈ëtt 1 h√©ttel - ENAR: {enar}',
    checkCondition: (animal) => {
      if (!animal.expected_birth_date || animal.pregnancy_status !== 'vemhes') return false;
      
      const expectedBirth = new Date(animal.expected_birth_date);
      const moveDate = new Date(expectedBirth.getTime() - (7 * 24 * 60 * 60 * 1000)); // 1 h√©t el≈ëtte
      const today = new Date();
      
      return today >= moveDate && today <= new Date(moveDate.getTime() + (2 * 24 * 60 * 60 * 1000));
    },
    suggestedActions: [
      'Ellet≈ë kar√°mba (E1-E12) √°thelyez√©s',
      'Sz√ºl√©si felszerel√©s el≈ëk√©sz√≠t√©se',
      'Fokozott megfigyel√©s ind√≠t√°sa'
    ],
    canCreateTask: true,
    canPostpone: false,
    appliesTo: ['vemhes_√ºsz≈ë', 'vemhes_teh√©n']
  },

  // üçº ELL√âS K√ñZELEDIK (0-3 nap)
  {
    type: 'elles_kozeledik',
    priority: 'kritikus',
    title: 'Ell√©s k√∂zeledik',
    description: '√Ållat ell√©se napokban v√°rhat√≥ - ENAR: {enar}',
    checkCondition: (animal) => {
      if (!animal.expected_birth_date || animal.pregnancy_status !== 'vemhes') return false;
      
      const expectedBirth = new Date(animal.expected_birth_date);
      const today = new Date();
      const daysUntilBirth = Math.ceil((expectedBirth.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
      
      return daysUntilBirth >= 0 && daysUntilBirth <= 3;
    },
    suggestedActions: [
      'Fokozott megfigyel√©s',
      'Ell√©si felszerel√©s k√©szenl√©tben',
      '24 √≥r√°s monitoring'
    ],
    canCreateTask: true,
    canPostpone: false,
    appliesTo: ['vemhes_√ºsz≈ë', 'vemhes_teh√©n']
  },

  // üö® T√öLHORD√ÅS (7+ nap k√©s√©s)
  {
    type: 'elles_kesesben',
    priority: 'surgos',
    title: 'T√öLHORD√ÅS - √Ållatorvosi beavatkoz√°s sz√ºks√©ges',
    description: 'Ell√©s hat√°rideje t√∫ll√©pve - azonnali vizsg√°lat - ENAR: {enar}',
    checkCondition: (animal) => {
      if (!animal.expected_birth_date || animal.pregnancy_status !== 'vemhes') return false;
      
      const expectedBirth = new Date(animal.expected_birth_date);
      const today = new Date();
      const daysOverdue = Math.floor((today.getTime() - expectedBirth.getTime()) / (1000 * 60 * 60 * 24));
      
      return daysOverdue >= 7; // 1 h√©t t√∫lhord√°s
    },
    suggestedActions: [
      'AZONNALI √°llatorvosi vizsg√°lat',
      'Cs√°sz√°rmetsz√©s m√©rlegel√©se',
      'Intenz√≠v monitoring'
    ],
    canCreateTask: true,
    canPostpone: false,
    appliesTo: ['vemhes_√ºsz≈ë', 'vemhes_teh√©n']
  },

  // üîÑ VV ISM√âTL√âS (√ºres √°llatok 2 h√≥nap ut√°n)
  {
    type: 'vemhessegvizsgalat_ismetles',
    priority: 'kozepes',
    title: 'VV vizsg√°lat ism√©tl√©se',
    description: '√úres √°llat √∫jb√≥li vemhess√©gvizsg√°lata 2 h√≥nap ut√°n - ENAR: {enar}',
    checkCondition: (animal) => {
      if (!animal.vv_date || animal.pregnancy_status !== 'ures') return false;
      
      const vvDate = new Date(animal.vv_date);
      const daysSinceVV = Math.floor((Date.now() - vvDate.getTime()) / (1000 * 60 * 60 * 24));
      
      return daysSinceVV >= 60 && daysSinceVV <= 70; // 2 h√≥nap ut√°n
    },
    suggestedActions: [
      '√öjb√≥li VV vizsg√°lat √ºtemez√©se',
      '√Ållat reprodukci√≥s √°llapot√°nak √©rt√©kel√©se',
      'Teny√©szt√©si strat√©gia fel√ºlvizsg√°lata'
    ],
    canCreateTask: true,
    canPostpone: true,
    appliesTo: ['√ºres_√ºsz≈ë', '√ºres_teh√©n']
  },

  // ‚ùå SELEJTEZ√âS (cs√≠ra √°llatok)
  {
    type: 'selejtezesi_javaslat',
    priority: 'magas',
    title: 'Selejtez√©s sz√ºks√©ges',
    description: 'Reprodukci√≥s probl√©ma - √°llat nem teny√©szt√©sre alkalmas - ENAR: {enar}',
    checkCondition: (animal) => {
      return animal.pregnancy_status === 'csira' && animal.statusz === 'akt√≠v';
    },
    suggestedActions: [
      '√ârt√©kes√≠t√©s el≈ëk√©sz√≠t√©se',
      'Selejt kar√°mba √°thelyez√©s',
      'Piaci lehet≈ës√©gek felm√©r√©se'
    ],
    canCreateTask: true,
    canPostpone: false,
    appliesTo: ['csira']
  }
];

// ============================================
// KAR√ÅM-SPECIFIKUS ALERT SZAB√ÅLYOK
// ============================================

export const KARAM_ALERT_SZABALYOK = [
  {
    type: 'kapacitas_tullepes',
    priority: 'kritikus',
    title: 'Kar√°m t√∫lzs√∫folt',
    description: 'Kapacit√°s t√∫ll√©pve - {current}/{capacity} √°llat',
    checkCondition: (pen: PenInfo) => {
      return pen.current_count > pen.capacity;
    },
    suggestedActions: [
      '√Ållatok √°thelyez√©se m√°sik kar√°mba',
      'Kapacit√°s ellen≈ërz√©se',
      '√Ållom√°ny √∫jraszervez√©se'
    ]
  },
  {
    type: 'kapacitas_alulhasznaltsag',
    priority: 'alacsony',
    title: 'Kar√°m alulhaszn√°lt',
    description: 'Kapacit√°s kihaszn√°latlan - {current}/{capacity} √°llat',
    checkCondition: (pen: PenInfo) => {
      return pen.current_count < pen.capacity * 0.3 && pen.current_count > 0;
    },
    suggestedActions: [
      'Tov√°bbi √°llatok √°thelyez√©se',
      'Kar√°m funkci√≥ fel√ºlvizsg√°lata',
      'Optimaliz√°ci√≥s lehet≈ës√©gek'
    ]
  }
];

// ============================================
// SEG√âDF√úGGV√âNYEK
// ============================================

function calculateAgeInDays(birthDate: string): number {
  const birth = new Date(birthDate);
  const today = new Date();
  const diffTime = Math.abs(today.getTime() - birth.getTime());
  return Math.floor(diffTime / (1000 * 60 * 60 * 24));
}

function calculateAgeInMonths(birthDate: string): number {
  const birth = new Date(birthDate);
  const today = new Date();
  
  let months = (today.getFullYear() - birth.getFullYear()) * 12;
  months -= birth.getMonth();
  months += today.getMonth();
  
  return months;
}

function addDays(date: Date, days: number): Date {
  const result = new Date(date);
  result.setDate(result.getDate() + days);
  return result;
}

// ============================================
// MAGYAR ALERT ENGINE - F≈êOSZT√ÅLY
// ============================================

export class MagyarAlertEngine {
  private rules: AlertRule[] = MAGYAR_ALERT_SZABALYOK;

  /**
   * Riaszt√°sok gener√°l√°sa egy √°llatra
   */
  generateAlertsForAnimal(animal: Animal): Alert[] {
    const alerts: Alert[] = [];

    for (const rule of this.rules) {
      if (rule.checkCondition(animal)) {
        const alert: any = {
          id: `alert-${animal.id}-${rule.type}-${Date.now()}`,
          type: rule.type,
          priority: rule.priority,
          title: rule.title,
          description: rule.description.replace('{enar}', animal.enar),
          message: `${rule.title} - ${animal.enar}`,
          animal_id: animal.id,
          enar: animal.enar,
          pen_id: (animal as any).jelenlegi_karam || null,
          pen_number: (animal as any).jelenlegi_karam || null,  
          animal: {
            id: parseInt(animal.id) || 0,  
            enar: animal.enar
          },
          created_at: new Date().toISOString(),
          due_date: this.calculateDueDate(rule, animal),
          action_required: rule.suggestedActions.join(', '),
          suggested_actions: rule.suggestedActions,
          dismissible: true,
          auto_resolve: false,
          can_create_task: rule.canCreateTask,
          can_postpone: rule.canPostpone,
          is_resolved: false,
          is_snoozed: false,
          metadata: {
            animal_age_days: rule.daysFromBirth ? 
              calculateAgeInDays(animal.szuletesi_datum) : undefined,
            animal_age_months: calculateAgeInMonths(animal.szuletesi_datum),
            rule_type: rule.type,
            applies_to: rule.appliesTo,
            excludes: rule.excludes,
            vv_date: animal.vv_date,
            vv_result_days: animal.vv_result_days,
            expected_birth_date: animal.expected_birth_date,
            pregnancy_status: animal.pregnancy_status,
            pairing_date: animal.pairing_date
          }
        };

        alerts.push(alert as any);
      }
    }

    return alerts;
  }

  /**
   * Riaszt√°sok gener√°l√°sa √°llatok list√°j√°ra
   */
  generateAlertsForAnimals(animals: Animal[]): Alert[] {
    const allAlerts: Alert[] = [];
    
    for (const animal of animals) {
      const animalAlerts = this.generateAlertsForAnimal(animal);
      allAlerts.push(...animalAlerts);
    }

    // Priorit√°s szerinti rendez√©s (surgos -> kritikus -> magas -> kozepes -> alacsony)
    const priorityOrder: AlertPriority[] = ['surgos', 'kritikus', 'magas', 'kozepes', 'alacsony'];
    
    return allAlerts.sort((a, b) => {
      const aIndex = priorityOrder.indexOf(a.priority);
      const bIndex = priorityOrder.indexOf(b.priority);
      return aIndex - bIndex;
    });
  }

  /**
   * Kombin√°lt alertek gener√°l√°sa (√°llatok + karamok)
   */
  generateAllAlerts(animals: Animal[], pens: PenInfo[]): Alert[] {
    const alerts: Alert[] = [];
    
    // √Ållat alertek
    const animalAlerts = this.generateAlertsForAnimals(animals);
    alerts.push(...animalAlerts);
    
    // Kar√°m alertek
    for (const pen of pens) {
      for (const rule of KARAM_ALERT_SZABALYOK) {
        if (rule.checkCondition(pen)) {
          const alert: any = {
            id: `pen-alert-${pen.id}-${rule.type}-${Date.now()}`,
            type: rule.type as AlertType,
            priority: rule.priority as AlertPriority,
            pen_id: pen.id,
            title: rule.title,
            description: rule.description
              .replace('{current}', pen.current_count.toString())
              .replace('{capacity}', pen.capacity.toString()),
            message: `${rule.title} - Kar√°m ${pen.pen_number}`,
            created_at: new Date().toISOString(),
            due_date: new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)).toISOString(),
            action_required: rule.suggestedActions.join(', '),
            suggested_actions: rule.suggestedActions,
            dismissible: true,
            auto_resolve: false,
            can_create_task: true,
            can_postpone: true,
            is_resolved: false,
            is_snoozed: false,
            metadata: {
              pen_number: pen.pen_number,
              capacity: pen.capacity,
              animal_count: pen.current_count
            }
          };
          
          alerts.push(alert);
        }
      }
    }
    
    return alerts.sort((a, b) => {
      const priorityOrder: AlertPriority[] = ['surgos', 'kritikus', 'magas', 'kozepes', 'alacsony'];
      const aIndex = priorityOrder.indexOf(a.priority);
      const bIndex = priorityOrder.indexOf(b.priority);
      return aIndex - bIndex;
    });
  }

  /**
   * Esed√©kess√©g d√°tum sz√°m√≠t√°sa
   */
  private calculateDueDate(rule: AlertRule, animal: Animal): string {
    // VV protokoll alertek pontos d√°tumokkal
    if (animal.expected_birth_date) {
      const expectedBirth = new Date(animal.expected_birth_date);
      
      switch (rule.type) {
        case 'rcc_vakcina_esed√©kes':
          return new Date(expectedBirth.getTime() - (60 * 24 * 60 * 60 * 1000)).toISOString(); // 2 h√≥nap
        case 'bovipast_vakcina_esed√©kes':
          return new Date(expectedBirth.getTime() - (28 * 24 * 60 * 60 * 1000)).toISOString(); // 4 h√©t
        case 'abrak_elvetel_esed√©kes':
          return new Date(expectedBirth.getTime() - (60 * 24 * 60 * 60 * 1000)).toISOString(); // 2 h√≥nap
        case 'elleto_karam_athelyezes':
          return new Date(expectedBirth.getTime() - (7 * 24 * 60 * 60 * 1000)).toISOString(); // 1 h√©t
        case 'elles_kozeledik':
          return expectedBirth.toISOString();
      }
    }
    
    // VV esed√©kess√©g (75 nap p√°rz√°s ut√°n)
    if (rule.type === 'vemhessegvizsgalat' && animal.pairing_date) {
      const pairingDate = new Date(animal.pairing_date);
      return addDays(pairingDate, 75).toISOString();
    }
    
    // S√ºrg≈ës riaszt√°sok
    if (rule.type === 'vakcinazas_esed√©kes' || rule.type === 'elles_kesesben') {
      return new Date(Date.now() + (3 * 24 * 60 * 60 * 1000)).toISOString();
    }
    
    // Alap√©rtelmezett esed√©kess√©g
    return new Date(Date.now() + (14 * 24 * 60 * 60 * 1000)).toISOString();
  }

  /**
   * Alert statisztik√°k sz√°m√≠t√°sa
   */
  static getAlertStatistics(alerts: Alert[]) {
    const stats = {
      osszes: alerts.length,
      aktiv: alerts.filter(a => !a.is_resolved && !a.is_snoozed).length,
      megoldott: alerts.filter(a => a.is_resolved).length,
      halasztott: alerts.filter(a => a.is_snoozed).length,
      lejart: alerts.filter(a => 
        a.due_date && 
        new Date(a.due_date) < new Date() && 
        !a.is_resolved
      ).length,
      surgos: alerts.filter(a => a.priority === 'surgos').length,
      kritikus: alerts.filter(a => a.priority === 'kritikus').length,
      magas: alerts.filter(a => a.priority === 'magas').length,
      kozepes: alerts.filter(a => a.priority === 'kozepes').length,
      alacsony: alerts.filter(a => a.priority === 'alacsony').length
    };

    return stats;
  }

  /**
   * Alertek csoportos√≠t√°sa priorit√°s szerint
   */
  static groupByPriority(alerts: Alert[]): Record<AlertPriority, Alert[]> {
    return alerts.reduce((groups, alert) => {
      if (!groups[alert.priority]) {
        groups[alert.priority] = [];
      }
      groups[alert.priority].push(alert);
      return groups;
    }, {} as Record<AlertPriority, Alert[]>);
  }

  /**
   * Alertek csoportos√≠t√°sa t√≠pus szerint
   */
  static groupByType(alerts: Alert[]): Record<AlertType, Alert[]> {
    return alerts.reduce((groups, alert) => {
      if (!groups[alert.type]) {
        groups[alert.type] = [];
      }
      groups[alert.type].push(alert);
      return groups;
    }, {} as Record<AlertType, Alert[]>);
  }

  /**
   * Alertek csoportos√≠t√°sa √°llat szerint
   */
  static groupByAnimal(alerts: Alert[]): Record<string, Alert[]> {
    return alerts.reduce((groups, alert) => {
      const key = alert.animal?.enar || alert.enar || 'unknown';
      if (!groups[key]) {
        groups[key] = [];
      }
      groups[key].push(alert);
      return groups;
    }, {} as Record<string, Alert[]>);
  }

  /**
   * Alertek csoportos√≠t√°sa kar√°m szerint
   */
  static groupByPen(alerts: Alert[]): Record<string, Alert[]> {
    return alerts.reduce((groups, alert) => {
      if (alert.pen_id) {
        const key = alert.pen_id;
        if (!groups[key]) {
          groups[key] = [];
        }
        groups[key].push(alert);
      }
      return groups;
    }, {} as Record<string, Alert[]>);
  }

  /**
   * Specifikus alert t√≠pusok sz≈±r√©se
   */
  static getPenSpecificAlerts(alerts: Alert[]): Alert[] {
    return alerts.filter(alert => alert.pen_id && !alert.animal_id);
  }

  static getAnimalSpecificAlerts(alerts: Alert[]): Alert[] {
    return alerts.filter(alert => alert.animal_id);
  }

  static getCapacityAlerts(alerts: Alert[]): Alert[] {
    return alerts.filter(alert => 
      alert.type === 'kapacitas_tullepes' || 
      alert.type === 'kapacitas_alulhasznaltsag'
    );
  }
}

// Export default instance
export const magyarAlertEngine = new MagyarAlertEngine();