// ==================================================
// üìÅ src/components/shared/AgeCell.tsx
// üéØ Egys√©ges √©letkor megjelen√≠t≈ë komponens - duplik√°ci√≥ cs√∂kkent√©s
// ==================================================
import React from 'react';

interface AgeCellProps {
    birthDate?: string;
    className?: string;
}

export const AgeCell: React.FC<AgeCellProps> = ({ birthDate, className = '' }) => {
    if (!birthDate) {
        return <span className="text-gray-400">-</span>;
    }

    try {
        const birth = new Date(birthDate);
        const today = new Date();
        
        // Valid√°l√°s: helyes d√°tum?
        if (isNaN(birth.getTime())) {
            return <span className="text-gray-400">-</span>;
        }

        // ‚úÖ EREDETI LOGIKA MEGTARTVA: 30.44 napos h√≥napok
        const ageInMonths = Math.floor((today.getTime() - birth.getTime()) / (1000 * 60 * 60 * 24 * 30.44));
        
        // Negat√≠v kor eset√©n (j√∂v≈ëbeli d√°tum)
        if (ageInMonths < 0) {
            return <span className="text-gray-400">-</span>;
        }

        // 12 h√≥napn√°l fiatalabb borjak - k√©k sz√≠nez√©s
        if (ageInMonths < 12) {
            return (
                <div className={`font-medium text-blue-600 ${className}`}>
                    {ageInMonths} h√≥nap
                </div>
            );
        }

        // 12+ h√≥napos √°llatok - √©v √©s h√≥nap form√°tum
        const years = Math.floor(ageInMonths / 12);
        const remainingMonths = ageInMonths % 12;
        
        if (remainingMonths === 0) {
            return (
                <div className={`font-medium text-gray-700 ${className}`}>
                    {years} √©v
                </div>
            );
        }

        return (
            <div className={`font-medium text-gray-700 ${className}`}>
                {years} √©v {remainingMonths} h√≥nap
            </div>
        );
    } catch (error) {
        return <span className="text-gray-400">-</span>;
    }
};