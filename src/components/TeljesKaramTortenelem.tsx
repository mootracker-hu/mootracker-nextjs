// src/components/TeljesKaramTortenelem.tsx - JAV√çTOTT √âS TISZT√çTOTT VERZI√ì
'use client';

import React, { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabase';
import { syncHaremData, createHistoricalSnapshot } from '@/lib/utils/haremSync';
import AnimalSelector from '@/components/AnimalSelector';

// üîπ INTERFACES
interface KombinaltEsemeny {
    id: string;
    animal_id: number;
    datum: string;
    idopont: string;
    tipus: 'event' | 'movement';
    forr√°s: 'animal_events' | 'animal_movements';
    from_pen?: string;
    to_pen: string;
    ok: string;
    funkci?: string;
    megjegyzes?: string;
    metadata?: any;
    function_metadata?: any;
    pen_number?: string;
    pen_location?: string;
    animal_enar?: string;
    animal_kategoria?: string;
    animal_pregnancy_status?: string;
}

interface TenyeszBika {
    id: string;
    name: string;
    enar: string;
    kplsz?: string;
    active: boolean;
}

interface FormData {
    datum: string;
    idopont: string;
    esemenyTipus: 'pen_assignment' | 'pen_movement' | 'function_change' | 'breeding' | 'pregnancy' | 'birth' | 'medical' | 'quarantine' | 'culling' | 'breeding_entry' | 'harem_entry' | 'other';
    funkci: string;
    kivalasztottBikak: string[];
    hovaPen: string;
    megjegyzes: string;
    torteneti: boolean;
    haremKezdete?: string;
    selectedAnimals: number[];
}

interface TeljesKaramTortenelemProps {
    penId?: string;
    animalId?: number;
    penNumber?: string;
    penLocation?: string;
    onDataChange?: () => void;
    mode?: 'pen' | 'animal' | 'view-only';
}

// üîπ MAIN COMPONENT

// üöÄ 1. L√âP√âS: Illeszd be ezt a funkci√≥t a TeljesKaramTortenelem.tsx f√°jlba
// HELYE: A komponens EL≈êTT, de az interface-ek UT√ÅN

// ‚úÖ √öJ FUNKCI√ì - FIZIKAI TENY√âSZBIKA HOZZ√ÅRENDEL√âS
const handleBullPhysicalAssignment = async (
  selectedBulls: any[], 
  penId: string,
  isHistorical: boolean = false
): Promise<{ success: boolean; message: string; addedBulls: number }> => {
  try {
    console.log('üêÇ Kar√°m t√∂rt√©net: Teny√©szbika fizikai hozz√°rendel√©s...', {
      bulls: selectedBulls.length,
      penId,
      isHistorical
    });

    if (selectedBulls.length === 0) {
      return { success: true, message: 'Nincs kiv√°lasztott teny√©szbika', addedBulls: 0 };
    }

    let addedCount = 0;

    // Minden kiv√°lasztott bika fizikai hozz√°rendel√©se
    for (const bull of selectedBulls) {
      try {
        // 1. Ellen≈ërizz√ºk, hogy m√°r hozz√° van-e rendelve
        const { data: existingAssignment, error: checkError } = await supabase
          .from('animal_pen_assignments')
          .select(`
            id,
            animals!inner(enar)
          `)
          .eq('pen_id', penId)
          .eq('animals.enar', bull.enar)
          .is('removed_at', null)
          .limit(1);

        if (checkError) {
          console.error(`‚ùå Bika ellen≈ërz√©si hiba: ${bull.name}`, checkError);
          continue;
        }

        if (existingAssignment && existingAssignment.length > 0) {
          console.log(`‚ÑπÔ∏è Bika m√°r hozz√°rendelve: ${bull.name}`);
          continue;
        }

        // 2. Teny√©szbika ID megkeres√©se
        const { data: animalData, error: animalError } = await supabase
          .from('animals')
          .select('id')
          .eq('enar', bull.enar)
          .eq('kategoria', 'teny√©szbika')
          .single();

        if (animalError || !animalData) {
          console.error(`‚ùå Teny√©szbika nem tal√°lhat√≥: ${bull.enar}`, animalError);
          continue;
        }

        // 3. R√©gi assignment-ok lez√°r√°sa (m√°s kar√°mokb√≥l)
        const { error: removeError } = await supabase
          .from('animal_pen_assignments')
          .update({ 
            removed_at: new Date().toISOString(),
            removal_reason: 'kar√°m_t√∂rt√©net_√°thelyez√©s'
          })
          .eq('animal_id', animalData.id)
          .is('removed_at', null);

        if (removeError) {
          console.error(`‚ùå R√©gi assignment lez√°r√°si hiba: ${bull.name}`, removeError);
        }

        // 4. √öj fizikai assignment l√©trehoz√°sa
        const { error: assignError } = await supabase
          .from('animal_pen_assignments')
          .insert({
            animal_id: animalData.id,
            pen_id: penId,
            assigned_at: new Date().toISOString(),
            assignment_reason: isHistorical ? 'kar√°m_t√∂rt√©net_r√∂gz√≠t√©s' : 'teny√©szbika_hozz√°rendel√©s',
            notes: `Kar√°m t√∂rt√©netb≈ël hozz√°rendelve: ${bull.name} (${bull.enar})`
          });

        if (assignError) {
          console.error(`‚ùå Fizikai assignment hiba: ${bull.name}`, assignError);
          continue;
        }

        // 5. Animals t√°bla friss√≠t√©se
        const { data: penData } = await supabase
          .from('pens')
          .select('pen_number')
          .eq('id', penId)
          .single();

        if (penData) {
          await supabase
            .from('animals')
            .update({ jelenlegi_karam: penData.pen_number })
            .eq('id', animalData.id);
        }

        // 6. Esem√©ny r√∂gz√≠t√©se
        await supabase
          .from('animal_events')
          .insert({
            animal_id: animalData.id,
            event_type: 'pen_movement',
            event_date: new Date().toISOString().split('T')[0],
            event_time: new Date().toISOString().split('T')[1].substring(0, 8),
            pen_id: penId,
            reason: 'Kar√°m t√∂rt√©net r√∂gz√≠t√©s',
            notes: `Teny√©szbika hozz√°rendel√©s kar√°m t√∂rt√©netb≈ël: ${bull.name}`,
            is_historical: isHistorical
          });

        addedCount++;
        console.log(`‚úÖ Teny√©szbika fizikailag hozz√°rendelve: ${bull.name}`);

      } catch (bullError) {
        console.error(`üí• Bika hozz√°rendel√©si exception: ${bull.name}`, bullError);
      }
    }

    return {
      success: true,
      message: `${addedCount}/${selectedBulls.length} teny√©szbika fizikailag hozz√°rendelve`,
      addedBulls: addedCount
    };

  } catch (error) {
    console.error('üí• handleBullPhysicalAssignment hiba:', error);
    return {
      success: false,
      message: `Teny√©szbika hozz√°rendel√©si hiba: ${(error as Error).message}`,
      addedBulls: 0
    };
  }
};

const TeljesKaramTortenelem: React.FC<TeljesKaramTortenelemProps> = ({
    penId,
    animalId,
    penNumber = 'Ismeretlen',
    penLocation = '',
    onDataChange,
    mode = 'pen'
}) => {
    // üîπ STATE MANAGEMENT
    const [kombinaltEsemenyek, setKombinaltEsemenyek] = useState<KombinaltEsemeny[]>([]);
    const [availableBulls, setAvailableBulls] = useState<TenyeszBika[]>([]);
    const [availablePens, setAvailablePens] = useState<any[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [showModal, setShowModal] = useState(false);
    // ‚úÖ Pagination √©s sz≈±r√©s state-ek
    const [currentPage, setCurrentPage] = useState(1);
    const [eventsPerPage] = useState(20); // 20 esem√©ny/oldal
    const [eventFilter, setEventFilter] = useState<'all' | 'harem' | 'movement'>('all');
    const [editingEvent, setEditingEvent] = useState<KombinaltEsemeny | null>(null);
    const [formData, setFormData] = useState<FormData>({
        datum: new Date().toISOString().split('T')[0],
        idopont: '12:00',
        esemenyTipus: 'function_change',
        funkci: 'h√°rem',
        kivalasztottBikak: [],
        hovaPen: '',
        megjegyzes: '',
        torteneti: false,
        selectedAnimals: [],
    });

    // üîπ LOAD DATA ON MOUNT
    // √öJ:
useEffect(() => {
    console.log('üîÑ TeljesKaramTortenelem mount - egyszeri bet√∂lt√©s', { animalId, mode });
    loadAllData();
}, []); // ‚Üê √úRES dependency array!

    // üîπ COMPREHENSIVE DATA LOADING
    const loadAllData = async () => {
        try {
            setLoading(true);
            setError(null);

            console.log('üîÑ Teljes adatbet√∂lt√©s kezd√©se...', {
                penId,
                animalId,
                mode
            });

            // KRITIKUS DEBUG: Ha nincs animalId, ne futassunk semmit!
            if (!animalId && mode === 'animal') {
                console.error('‚ùå HIBA: animalId hi√°nyzik animal m√≥dban!');
                setError('Animal ID hi√°nyzik!');
                setLoading(false);
                return;
            }

            await Promise.all([
                loadEvents(),
                loadBulls(),
                loadPens()
            ]);

            setLoading(false);
        } catch (error) {
            console.error('üí• Teljes adatbet√∂lt√©si hiba:', error);
            setError((error as Error).message);
            setLoading(false);
        }
    };

    // üîπ LOAD EVENTS (JAV√çTOTT!)
    const loadEvents = async () => {
        try {
            const kombinalt: KombinaltEsemeny[] = [];

            // üî• Animal events bet√∂lt√©se - EGYSZER≈∞S√çTETT LEK√âRDEZ√âS
            let eventsQuery = supabase
                .from('animal_events')
                .select('*')  // Csak az events t√°bla mez≈ëi
                .order('event_date', { ascending: false });

            // KRITIKUS DEBUG: Kar√°m sz≈±r√©s
            if (penId) {
                console.log('üîç Kar√°m sz≈±r√©s akt√≠v, penId:', penId);
                eventsQuery = eventsQuery.eq('pen_id', penId);
            }
            if (animalId) {
                console.log('üîç √Ållat sz≈±r√©s akt√≠v, animalId:', animalId);
                eventsQuery = eventsQuery.eq('animal_id', animalId);
            }

            const { data: events, error: eventsError } = await eventsQuery;

            console.log('üìä Animal events lek√©rdez√©s eredm√©nye (egyszer≈±s√≠tett):', {
                penId,
                animalId,
                eventsCount: events?.length || 0,
                error: eventsError?.message || 'nincs',
                sampleEvent: events?.[0] // Els≈ë esem√©ny debug-hoz
            });

            if (!eventsError && events) {
                // K√úL√ñN lek√©rdez√©sek az √°llat √©s kar√°m nevekhez
                const animalIds = [...new Set(events.map(e => e.animal_id).filter(Boolean))];
                const penIds = [...new Set(events.map(e => e.pen_id).filter(Boolean))];

                // √Ållat nevek √âS KATEG√ìRI√ÅK bet√∂lt√©se
                let animalNames: { [key: number]: any } = {};
                if (animalIds.length > 0) {
                    const { data: animalsData } = await supabase
                        .from('animals')
                        .select('id, enar, kategoria, pregnancy_status')  // ‚Üê B≈êV√çT√âS!
                        .in('id', animalIds);

                    if (animalsData) {
                        animalNames = animalsData.reduce((acc: { [key: number]: any }, animal: any) => {
                            acc[animal.id] = {
                                enar: animal.enar,
                                kategoria: animal.kategoria,
                                pregnancy_status: animal.pregnancy_status
                            };
                            return acc;
                        }, {});
                    }
                }

                // Kar√°m nevek bet√∂lt√©se
                let penNames: { [key: string]: { pen_number: string, location: string } } = {};
                if (penIds.length > 0) {
                    const { data: pensData } = await supabase
                        .from('pens')
                        .select('id, pen_number, location')
                        .in('id', penIds);

                    if (pensData) {
                        penNames = pensData.reduce((acc: { [key: string]: any }, pen: any) => {
                            acc[pen.id] = { pen_number: pen.pen_number, location: pen.location };
                            return acc;
                        }, {});
                    }
                }

                events.forEach(event => {
                    kombinalt.push({
                        id: `event_${event.id}`,
                        animal_id: event.animal_id,
                        datum: event.event_date,
                        idopont: event.event_time || '12:00',
                        tipus: 'event',
                        forr√°s: 'animal_events',
                        from_pen: event.previous_pen_id,
                        to_pen: event.pen_id,
                        ok: event.reason || event.event_type || 'Esem√©ny',
                        funkci: event.pen_function,
                        megjegyzes: event.notes,
                        metadata: event.function_metadata,
                        function_metadata: event.function_metadata,
                        pen_number: penNames[event.pen_id]?.pen_number || `Kar√°m ID: ${event.pen_id}`,
                        pen_location: penNames[event.pen_id]?.location || '',
                        animal_enar: animalNames[event.animal_id]?.enar || `ID: ${event.animal_id}`,
                        animal_kategoria: animalNames[event.animal_id]?.kategoria || 'unknown',
                        animal_pregnancy_status: animalNames[event.animal_id]?.pregnancy_status || null
                    });
                });
            }

            // üî• Animal movements bet√∂lt√©se - TELJES METADATA T√ÅMOGAT√ÅSSAL!
            let movementsQuery = supabase
                .from('animal_movements')
                .select(`
          *,
          function_metadata,
          animals!inner(enar)
        `)
                .order('moved_at', { ascending: false });

            // KRITIKUS DEBUG: Movements sz≈±r√©s
            if (penId) {
                console.log('üîç Movements kar√°m sz≈±r√©s, penId:', penId);
                movementsQuery = movementsQuery.or(`from_pen_id.eq.${penId},to_pen_id.eq.${penId}`);
            }
            if (animalId) {
                console.log('üîç Movements √°llat sz≈±r√©s, animalId:', animalId);
                movementsQuery = movementsQuery.eq('animal_id', animalId);
            }

            const { data: movements, error: movementsError } = await movementsQuery;

            console.log('üìä Animal movements lek√©rdez√©s eredm√©nye:', {
                penId,
                animalId,
                movementsCount: movements?.length || 0,
                error: movementsError?.message || 'nincs',
                movements: movements?.slice(0, 3) // Els≈ë 3 mozgat√°s debug-hoz
            });

            if (!movementsError && movements) {
                // Kar√°m nevek bet√∂lt√©se a movements-hez
                const penIds = [...new Set(movements.map(m => m.to_pen_id).filter(Boolean))];
                let penNames: { [key: string]: string } = {};

                if (penIds.length > 0) {
                    const { data: pensData } = await supabase
                        .from('pens')
                        .select('id, pen_number')
                        .in('id', penIds);

                    if (pensData) {
                        penNames = pensData.reduce((acc: { [key: string]: string }, pen: any) => {
                            acc[pen.id] = pen.pen_number;
                            return acc;
                        }, {});
                    }
                }

                movements.forEach(movement => {
                    kombinalt.push({
                        id: `movement_${movement.id}`,
                        animal_id: movement.animal_id,
                        datum: movement.moved_at.split('T')[0],
                        idopont: movement.moved_at.split('T')[1]?.substring(0, 5) || '12:00',
                        tipus: 'movement',
                        forr√°s: 'animal_movements',
                        from_pen: movement.from_pen_id,
                        to_pen: movement.to_pen_id,
                        ok: movement.movement_reason || movement.function_type || 'Mozgat√°s',
                        funkci: movement.function_type,
                        megjegyzes: movement.notes,
                        metadata: movement.function_metadata,
                        function_metadata: movement.function_metadata,
                        pen_number: penNames[movement.to_pen_id] || `Kar√°m ID: ${movement.to_pen_id}`,
                        pen_location: '',
                        animal_enar: movement.animals?.enar
                    });
                });
            }

            // DUPLIK√ÅTUM SZ≈∞R√âS - JAV√çTOTT VERZI√ì
            const uniqueEvents = new Map();
            kombinalt.forEach(event => {
                // üî• PONTOSABB KULCS - √°llat + d√°tum + id≈ë + esem√©ny r√©szletek
                const uniqueKey = `${event.animal_id}_${event.datum}_${event.idopont}_${event.ok}`;

                if (!uniqueEvents.has(uniqueKey)) {
                    uniqueEvents.set(uniqueKey, event);
                } else {
                    const existing = uniqueEvents.get(uniqueKey);

                    // üî• INTELLIGENS PRIORIT√ÅS
                    // 1. animal_events priorit√°st √©lvez movements-hez k√©pest
                    if (event.forr√°s === 'animal_events' && existing.forr√°s === 'animal_movements') {
                        uniqueEvents.set(uniqueKey, event);
                        console.log('üîÑ Duplik√°tum fel√ºl√≠rva (events > movements):', uniqueKey);
                    }
                    // 2. √öjabb esem√©ny priorit√°st √©lvez r√©gebbivel szemben
                    else if (event.forr√°s === existing.forr√°s) {
                        const eventId = parseInt(event.id.replace('event_', '').replace('movement_', ''));
                        const existingId = parseInt(existing.id.replace('event_', '').replace('movement_', ''));

                        if (eventId > existingId) {
                            uniqueEvents.set(uniqueKey, event);
                            console.log('üîÑ Duplik√°tum fel√ºl√≠rva (√∫jabb esem√©ny):', uniqueKey);
                        } else {
                            console.log('üö´ Duplik√°tum eldobva (r√©gebbi esem√©ny):', uniqueKey);
                        }
                    }
                    // 3. Movements eldob√°sa ha events van
                    else {
                        console.log('üö´ Duplik√°tum eldobva (movements < events):', uniqueKey);
                    }
                }
            });

            const finalEvents = Array.from(uniqueEvents.values());

            console.log('‚úÖ DUPLIK√ÅTUM SZ≈∞R√âS EREDM√âNYE:', {
                totalEvents: kombinalt.length,
                uniqueEvents: finalEvents.length,
                duplicatesRemoved: kombinalt.length - finalEvents.length
            });


            // Id≈ërendi rendez√©s - LEGFRISSEBB ELS≈ê!
            finalEvents.sort((a, b) => {
                const dateA = new Date(`${a.datum}T${a.idopont}`);
                const dateB = new Date(`${b.datum}T${b.idopont}`);
                return dateB.getTime() - dateA.getTime();
            });

            // üî¨ VV EREDM√âNYEK BET√ñLT√âSE H√ÅREM ESEM√âNYEKHEZ
            await loadVVResults(kombinalt);

            setKombinaltEsemenyek(kombinalt);

            console.log('‚úÖ FINAL KOMBIN√ÅLT ESEM√âNYEK:', {
                totalEvents: kombinalt.length,
                penId,
                animalId,
                mode,
                sampleEvents: kombinalt.slice(0, 2).map(e => ({
                    id: e.id,
                    datum: e.datum,
                    animal_enar: e.animal_enar,
                    pen_number: e.pen_number,
                    funkci: e.funkci
                }))
            });

            // Jelenlegi kar√°m friss√≠t√©se
            updateCurrentPen(kombinalt);

        } catch (error) {
            console.error('‚ùå Esem√©nyek bet√∂lt√©si hiba:', error);
        }
    };

    // ‚úÖ Sz≈±rt √©s paginated esem√©nyek
    const filteredEvents = kombinaltEsemenyek.filter(event => {
        if (eventFilter === 'all') return true;
        if (eventFilter === 'harem') return event.funkci === 'h√°rem';
        if (eventFilter === 'movement') return event.tipus === 'movement';
        return true;
    });

    const totalPages = Math.ceil(filteredEvents.length / eventsPerPage);
    const startIndex = (currentPage - 1) * eventsPerPage;
    const currentEvents = filteredEvents.slice(startIndex, startIndex + eventsPerPage);

    console.log('üìä Pagination info:', {
        total: kombinaltEsemenyek.length,
        filtered: filteredEvents.length,
        currentPage,
        totalPages,
        showing: currentEvents.length
    });

    // üî¨ VV EREDM√âNYEK BET√ñLT√âSE
    const loadVVResults = async (events: KombinaltEsemeny[]) => {
        if (!animalId) return;

        try {
            // El≈ësz√∂r megkeress√ºk az √°llat ENAR-j√°t
            const { data: animalData, error: animalError } = await supabase
                .from('animals')
                .select('enar')
                .eq('id', animalId)
                .single();

            if (animalError || !animalData) {
                console.log('‚ùå √Ållat ENAR nem tal√°lhat√≥:', animalError);
                return;
            }

            const animalEnar = animalData.enar as string;
            console.log('üêÑ √Ållat ENAR:', animalEnar);

            // VV eredm√©nyek lek√©rdez√©se ENAR alapj√°n
            const { data: vvResults, error } = await supabase
                .from('vv_results')
                .select('vv_date, pregnancy_status, vv_result_days, animal_enar')
                .eq('animal_enar', animalEnar)
                .order('vv_date', { ascending: false });

            if (error || !vvResults) {
                console.log('‚ùå VV eredm√©nyek nem tal√°lhat√≥k:', error);
                return;
            }

            console.log('üìä VV eredm√©nyek bet√∂ltve:', vvResults);

            // VV eredm√©nyek hozz√°rendel√©se a h√°rem esem√©nyekhez
            events.forEach(event => {
                if (event.funkci === 'h√°rem') {
                    // H√°rem kezdete - metadata-b√≥l vagy esem√©ny d√°tum√°b√≥l
                    const haremKezdete = event.function_metadata?.pairing_start_date ?
                        new Date(event.function_metadata.pairing_start_date) :
                        new Date(event.datum);

                    console.log(`üîç H√°rem esem√©ny ${event.datum}, h√°rem kezdete: ${haremKezdete.toISOString().split('T')[0]}`);

                    // H√°rem kezdete ut√°n els≈ë VV eredm√©ny keres√©se
                    const relevantVV = vvResults.find((vv: any) => {
                        const vvDate = new Date(vv.vv_date);
                        const isAfterStart = vvDate >= haremKezdete;
                        console.log(`  VV ${vv.vv_date}: ${isAfterStart ? 'RELEV√ÅNS' : 'kor√°bbi'} (${vv.pregnancy_status})`);
                        return isAfterStart;
                    });

                    if (relevantVV) {
                        console.log(`‚úÖ VV eredm√©ny tal√°lva: ${relevantVV.vv_date} - ${relevantVV.pregnancy_status}`);
                        // VV eredm√©ny hozz√°ad√°sa a metadata-hoz
                        if (!event.function_metadata) event.function_metadata = {};
                        event.function_metadata.vv_result = {
                            date: relevantVV.vv_date,
                            status: relevantVV.pregnancy_status,
                            days: relevantVV.vv_result_days
                        };
                    } else {
                        console.log('‚ùå Nincs relev√°ns VV eredm√©ny ehhez a h√°remhez');
                    }
                }
            });

        } catch (error) {
            console.error('‚ùå VV eredm√©nyek bet√∂lt√©si hiba:', error);
        }
    };

    // üîπ UPDATE CURRENT PEN - LOOP FIX
const updateCurrentPen = async (events: KombinaltEsemeny[]) => {
    // KAR√ÅM M√ìDBAN: Nem friss√≠tj√ºk az √°llat jelenlegi kar√°m mez≈ëj√©t
    // mert az v√©gtelen loop-ot okoz a sz√ºl≈ë komponens √∫jrat√∂lt√©s√©vel

    if (events.length > 0 && mode === 'animal' && animalId) {
        // EGYSZERI FUTTAT√ÅS BIZTOS√çT√ÅSA
        if ((window as any).karamUpdateRunning) {
            console.log('‚ö†Ô∏è updateCurrentPen m√°r fut - kihagyva a duplik√°ci√≥ elker√ºl√©se √©rdek√©ben');
            return;
        }

        try {
            (window as any).karamUpdateRunning = true;
            const latestEvent = events[0];

            const { error } = await supabase
                .from('animals')
                .update({
                    jelenlegi_karam: latestEvent.pen_number
                })
                .eq('id', animalId);

            if (!error) {
                console.log('‚úÖ √Ållat jelenlegi kar√°m friss√≠tve (√°llat m√≥d):', latestEvent.animal_enar, '‚Üí', latestEvent.pen_number);
                
                // üî• KRITIKUS V√ÅLTOZTAT√ÅS: onDataChange ELT√ÅVOL√çT√ÅSA vagy K√âSLELTET√âSE
                // onDataChange(); // ‚Üê T√ñR√ñLD EZT A SORT!
                
                // OPCION√ÅLIS: K√©sleltetett friss√≠t√©s (ha sz√ºks√©ges)
                // setTimeout(() => {
                //     if (onDataChange) onDataChange();
                // }, 2000);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è √Ållat jelenlegi kar√°m friss√≠t√©si exception:', error);
        } finally {
            (window as any).karamUpdateRunning = false;
        }
    }

    // KAR√ÅM M√ìDBAN: Nincs sz√ºl≈ë friss√≠t√©s - elker√ºlj√ºk a loop-ot
    console.log('‚ÑπÔ∏è updateCurrentPen befejezve, mode:', mode, 'events:', events.length);
};

    // üîç √ÅLLAT AKTU√ÅLIS ST√ÅTUSZ DETEKT√ÅL√ÅS
    const getCurrentAnimalStatus = async (animalId: number) => {
        try {
            // 1. Legfrissebb VV eredm√©ny lek√©rdez√©se
            const { data: animalData } = await supabase
                .from('animals')
                .select('enar, pregnancy_status')
                .eq('id', animalId)
                .single();

            if (!animalData) return 'unknown';

            // 2. Manual override ellen≈ërz√©s
            if (animalData.pregnancy_status === 'vemhes' || animalData.pregnancy_status === 'pregnant') {
                return 'vemhes';
            }

            // 3. Legfrissebb VV eredm√©ny
            const { data: vvResults } = await supabase
                .from('vv_results')
                .select('vv_date, pregnancy_status')
                .eq('animal_enar', animalData.enar)
                .order('vv_date', { ascending: false })
                .limit(1);

            if (vvResults && vvResults.length > 0) {
                const latestVV = vvResults[0];
                return latestVV.pregnancy_status || 'unknown';
            }

            return 'no_vv';
        } catch (error) {
            console.error('‚ùå √Ållat st√°tusz detekt√°l√°si hiba:', error);
            return 'unknown';
        }
    };

    // üîπ LOAD BULLS
    const loadBulls = async () => {
        try {
            const { data, error } = await supabase
                .from('bulls')
                .select('id, name, enar, kplsz, active')
                .eq('active', true)
                .order('name');

            if (error) {
                // Fallback - teny√©szbik√°k az animals t√°bl√°b√≥l
                const { data: animalBulls } = await supabase
                    .from('animals')
                    .select('id, enar, kategoria')
                    .eq('kategoria', 'teny√©szbika')
                    .order('enar');

                const processedBulls: TenyeszBika[] = (animalBulls || []).map(bull => ({
                    id: bull.id.toString(),
                    name: bull.enar.split(' ').pop() || 'N√©vtelen',
                    enar: bull.enar,
                    active: true
                }));

                setAvailableBulls(processedBulls);
                return;
            }

            setAvailableBulls(data || []);
        } catch (error) {
            console.error('‚ùå Bik√°k bet√∂lt√©se hiba:', error);
        }
    };

    // üîπ LOAD PENS
    const loadPens = async () => {
        try {
            const { data, error } = await supabase
                .from('pens')
                .select('id, pen_number, location, pen_type')
                .order('pen_number');

            if (error) throw error;
            setAvailablePens(data || []);
        } catch (error) {
            console.error('‚ùå Karamok bet√∂lt√©se hiba:', error);
        }
    };

    // üîπ EVENT HANDLERS
    const openModal = (event?: KombinaltEsemeny) => {
        if (event) {
            setEditingEvent(event);
            setFormData({
                datum: event.datum,
                idopont: event.idopont,
                esemenyTipus: 'function_change',
                funkci: event.funkci || 'h√°rem',
                kivalasztottBikak: event.function_metadata?.bulls?.map((b: any) => b.id) || [],
                hovaPen: event.to_pen,
                megjegyzes: event.megjegyzes || '',
                torteneti: false,
                haremKezdete: event.function_metadata?.pairing_start_date || event.datum,
                selectedAnimals: [] // √úRES MARAD szerkeszt√©sn√©l!
            });
        } else {
            setEditingEvent(null);
            setFormData({
                ...formData,
                hovaPen: penId || '',
                haremKezdete: undefined,
                selectedAnimals: [] // √úRES MARAD!
            });
        }
        setShowModal(true);
    };

    // üîπ SAVE FUNKCI√ì
    const handleSave = async () => {
        try {
            // Valid√°ci√≥
            if (!formData.datum || !formData.funkci) {
                alert('‚ö†Ô∏è D√°tum √©s funkci√≥ k√∂telez≈ë!');
                return;
            }

            // INTELLIGENS √ÅLLAT VALID√ÅCI√ì
            if (mode === 'pen' && !editingEvent && formData.selectedAnimals.length === 0) {
                alert('‚ö†Ô∏è Kar√°m m√≥dban v√°lassz ki legal√°bb egy √°llatot, akire vonatkozik ez az esem√©ny!');
                return;
            }

            if (mode === 'animal' && !animalId) {
                alert('‚ö†Ô∏è √Ållat ID hi√°nyzik!');
                return;
            }

            let metadata = {};

// ‚≠ê H√ÅREM METADATA - HIBRID LOGIKA!
if (formData.funkci === 'h√°rem' && formData.kivalasztottBikak.length > 0) {
    console.log('üíï H√°rem esem√©ny - hibrid snapshot logika');

    const haremKezdete = formData.haremKezdete || formData.datum;
    const vvDatum = new Date(haremKezdete);
    vvDatum.setDate(vvDatum.getDate() + 75);

    const selectedBulls = availableBulls.filter(bika =>
        formData.kivalasztottBikak.includes(bika.id)
    );

    // üî• KRITIKUS D√ñNT√âS: T√∂rt√©neti vs Akt√≠v esem√©ny
    if (formData.torteneti) {
        // ‚úÖ T√ñRT√âNETI ESEM√âNY - TELJES SNAPSHOT K√âSZ√çT√âSE
        console.log('üìö T√∂rt√©neti h√°rem esem√©ny - teljes snapshot k√©sz√≠t√©s');
        
        try {
            // Kiv√°lasztott √°llatok adatainak lek√©rdez√©se
            let specificAnimals: any[] = [];
            if (formData.selectedAnimals.length > 0) {
                const { data: selectedAnimalsData } = await supabase
                    .from('animals')
                    .select('enar, kategoria, ivar')
                    .in('id', formData.selectedAnimals);
                
                specificAnimals = selectedAnimalsData || [];
            }

            // T√∂rt√©neti snapshot k√©sz√≠t√©se
            const fullSnapshot = await createHistoricalSnapshot(
                formData.hovaPen,
                selectedBulls,
                haremKezdete,
                vvDatum.toISOString().split('T')[0],
                specificAnimals
            );

            metadata = {
                ...fullSnapshot,
                historical_entry: true,
                created_via: 'manual_historical_event',
                snapshot_date: formData.datum
            };

            console.log('‚úÖ T√∂rt√©neti h√°rem snapshot elk√©sz√≠tve:', {
                bulls: fullSnapshot?.bulls?.length || 0,
                females: (fullSnapshot as any)?.females?.length || 0,
                total: (fullSnapshot as any)?.total_animals || 0
            });

        } catch (snapshotError) {
            console.warn('‚ö†Ô∏è T√∂rt√©neti snapshot hiba, egyszer≈± metadata haszn√°lata:', snapshotError);
            
            // Fallback egyszer≈± metadata
            metadata = {
                bulls: selectedBulls.map(bika => ({
                    id: bika.id,
                    name: bika.name,
                    enar: bika.enar,
                    kplsz: bika.kplsz
                })),
                pairing_start_date: haremKezdete,
                expected_vv_date: vvDatum.toISOString().split('T')[0],
                breeding_method: 'natural',
                historical_entry: true,
                created_via: 'manual_event_fallback'
            };
        }

    } else {
        // ‚úÖ AKT√çV ESEM√âNY - EGYSZER≈∞ METADATA (duplik√°ci√≥ elker√ºl√©se)
        console.log('üîÑ Akt√≠v h√°rem esem√©ny - egyszer≈± metadata');
        
        metadata = {
            bulls: selectedBulls.map(bika => ({
                id: bika.id,
                name: bika.name,
                enar: bika.enar,
                kplsz: bika.kplsz
            })),
            pairing_start_date: haremKezdete,
            expected_vv_date: vvDatum.toISOString().split('T')[0],
            breeding_method: 'natural',
            historical_entry: false,
            created_via: 'manual_active_event'
        };
    }
    // ‚úÖ √öJ: FIZIKAI JELENL√âT BIZTOS√çT√ÅSA (csak akt√≠v esem√©nyekn√©l)
    if (!formData.torteneti && formData.kivalasztottBikak.length > 0) {
        try {
            console.log('üîß Fizikai jelenl√©t biztos√≠t√°sa a ment√©s sor√°n...');
            
            const physicalResult = await handleBullPhysicalAssignment(
                selectedBulls, 
                formData.hovaPen, 
                false
            );
            
            if (physicalResult.success && physicalResult.addedBulls > 0) {
                console.log(`‚úÖ ${physicalResult.addedBulls} teny√©szbika fizikailag biztos√≠tva`);
                
                // Toast √©rtes√≠t√©s
                const toast = document.createElement('div');
                toast.className = 'fixed top-4 right-4 bg-blue-600 text-white px-4 py-2 rounded-lg shadow-lg z-50 text-sm';
                toast.textContent = `üêÇ ${physicalResult.addedBulls} teny√©szbika fizikailag hozz√°rendelve!`;
                document.body.appendChild(toast);
                
                setTimeout(() => {
                    if (document.body.contains(toast)) {
                        document.body.removeChild(toast);
                    }
                }, 3000);
            }
            
        } catch (physicalError) {
            console.warn('‚ö†Ô∏è Fizikai jelenl√©t biztos√≠t√°sa hiba:', physicalError);
        }
    }

}

            if (editingEvent) {
                // SZERKESZT√âS - UPDATE
                const realId = editingEvent.id.replace('event_', '').replace('movement_', '');

                if (editingEvent.forr√°s === 'animal_events') {
                    const updateData: any = {
                        event_date: formData.datum,
                        event_time: formData.idopont,
                        pen_function: formData.funkci,
                        pen_id: formData.hovaPen,  // ‚Üê KRITIKUS! Ez hi√°nyzott!
                        reason: translateReason(formData.esemenyTipus),
                        notes: formData.megjegyzes
                    };

                    if (formData.funkci === 'h√°rem') {
                        updateData.function_metadata = metadata;
                    }

                    console.log('üîÑ UPDATE adatok:', updateData);

                    const { error } = await supabase
                        .from('animal_events')
                        .update(updateData)
                        .eq('id', realId);

                    if (error) throw error;

                } else {
                    const moveDateTime = `${formData.datum}T${formData.idopont}:00`;
                    const updateData: any = {
                        moved_at: moveDateTime,
                        to_pen_id: formData.hovaPen,  // ‚Üê KRITIKUS! Ez hi√°nyzott!
                        function_type: formData.funkci,
                        movement_reason: translateReason(formData.esemenyTipus),
                        notes: formData.megjegyzes
                    };

                    if (formData.funkci === 'h√°rem') {
                        updateData.function_metadata = metadata;
                    }

                    console.log('üîÑ MOVEMENT UPDATE adatok:', updateData);

                    const { error } = await supabase
                        .from('animal_movements')
                        .update(updateData)
                        .eq('id', realId);

                    if (error) throw error;
                }

            } else {
                // √öJ ESEM√âNY - INSERT (KAR√ÅM M√ìDBAN T√ñBB √ÅLLATTAL!)
                if (mode === 'pen' && formData.selectedAnimals.length > 0) {
                    // KAR√ÅM M√ìDBAN: Minden kiv√°lasztott √°llathoz k√ºl√∂n esem√©ny
                    const events = formData.selectedAnimals.map(selectedAnimalId => ({
                        animal_id: selectedAnimalId,  // ‚Üê Kiv√°lasztott √°llat ID-ja
                        event_type: formData.esemenyTipus,
                        event_date: formData.datum,
                        event_time: formData.idopont,
                        pen_id: formData.hovaPen,
                        pen_function: formData.funkci,
                        function_metadata: metadata,
                        reason: translateReason(formData.esemenyTipus),
                        notes: formData.megjegyzes,
                        is_historical: formData.torteneti
                    }));

                    const { error } = await supabase.from('animal_events').insert(events);
                    if (error) throw error;

                } else if (mode === 'animal' && animalId) {
                    // √ÅLLAT M√ìDBAN: Egy esem√©ny az adott √°llathoz
                    const { error } = await supabase.from('animal_events').insert({
                        animal_id: animalId,
                        event_type: formData.esemenyTipus,
                        event_date: formData.datum,
                        event_time: formData.idopont,
                        pen_id: formData.hovaPen,
                        pen_function: formData.funkci,
                        function_metadata: metadata,
                        reason: translateReason(formData.esemenyTipus),
                        notes: formData.megjegyzes,
                        is_historical: formData.torteneti
                    });

                    if (error) throw error;
                } else {
                    throw new Error('Nincs √°llat kiv√°lasztva vagy √°llat ID megadva!');
                }
            }

            // A handleSave funkci√≥ v√©g√©n, az esem√©nyek ment√©se UT√ÅN add hozz√°:

            // üî• √öJ: FIZIKAI KAR√ÅM HOZZ√ÅRENDEL√âS
            if (!editingEvent && !formData.torteneti) {
                // Csak √∫j, nem t√∂rt√©neti esem√©nyekn√©l friss√≠tj√ºk a fizikai hozz√°rendel√©st

                const animalsToUpdate = mode === 'pen' && formData.selectedAnimals.length > 0
                    ? formData.selectedAnimals
                    : animalId ? [animalId] : [];

                if (animalsToUpdate.length > 0) {
                    // 1. R√âGI HOZZ√ÅRENDEL√âSEK LEZ√ÅR√ÅSA
                    const { error: removeError } = await supabase
                        .from('animal_pen_assignments')
                        .update({ removed_at: new Date().toISOString() })
                        .in('animal_id', animalsToUpdate)
                        .is('removed_at', null);

                    if (removeError) {
                        console.warn('‚ö†Ô∏è R√©gi hozz√°rendel√©sek lez√°r√°sa hiba:', removeError);
                    }

                    // 2. √öJ HOZZ√ÅRENDEL√âSEK L√âTREHOZ√ÅSA
                    const newAssignments = animalsToUpdate.map(animalId => ({
                        animal_id: animalId,
                        pen_id: formData.hovaPen,
                        assigned_at: `${formData.datum}T${formData.idopont}:00`,
                        assignment_reason: translateReason(formData.esemenyTipus)
                    }));

                    const { error: assignError } = await supabase
                        .from('animal_pen_assignments')
                        .insert(newAssignments);

                    if (assignError) {
                        console.warn('‚ö†Ô∏è √öj hozz√°rendel√©sek l√©trehoz√°sa hiba:', assignError);
                    } else {
                        console.log('‚úÖ Fizikai kar√°m hozz√°rendel√©sek friss√≠tve:', newAssignments.length, '√°llat');
                    }
                }
            }

            // ‚≠ê SZINKRONIZ√ÅCI√ì LOGIKA - HIBRID
if (formData.funkci === 'h√°rem' && !editingEvent) {
    if (formData.torteneti) {
        // T√ñRT√âNETI: Nincs szinkroniz√°ci√≥ (nem zavarja a jelenlegi √°llapotot)
        console.log('üìö T√∂rt√©neti h√°rem esem√©ny - szinkroniz√°ci√≥ kihagyva');
    } else {
        // AKT√çV: Szinkroniz√°ci√≥ sz√ºks√©ges
        console.log('üîÑ Akt√≠v h√°rem szinkroniz√°ci√≥ ind√≠t√°sa...');
        
        setTimeout(async () => {
            const syncResult = await syncHaremData(formData.hovaPen);
            if (syncResult.success) {
                console.log('‚úÖ H√°rem szinkroniz√°ci√≥ sikeres:', syncResult.message);
            }
        }, 1000);
    }
}

// ‚úÖ FOKOZOTT FRISS√çT√âS - MINDEN √öJRAT√ñLT√âSE
alert(`‚úÖ Esem√©ny sikeresen ${editingEvent ? 'friss√≠tve' : 'r√∂gz√≠tve'}!`);

            // Modal bez√°r√°sa
            setShowModal(false);
            setEditingEvent(null);

            // üî• √öJ - SZ√úL≈ê KOMPONENS AZONNALI FRISS√çT√âSE
            if (onDataChange) {
                console.log('üîÑ Sz√ºl≈ë komponens friss√≠t√©se...');
                onDataChange(); // ‚Üê Ez fogja friss√≠teni a kar√°m √°llat list√°j√°t
            }

            // üî• EXTRA - OLDAL √öJRAT√ñLT√âS HA KAR√ÅM M√ìDBAN VAGYUNK
            if (mode === 'pen') {
                console.log('üîÑ Kar√°m oldal teljes friss√≠t√©se...');
                setTimeout(() => {
                    window.location.reload(); // ‚Üê Brut√°lis, de biztosan m≈±k√∂dik
                }, 1000);
            }

            // TELJES adatok √∫jrat√∂lt√©se k√©nyszer√≠tett m√≥don
            console.log('üîÑ TELJES adatok √∫jrat√∂lt√©se k√©nyszer√≠tve...');

            // 1. Komponens state reset
            setKombinaltEsemenyek([]);

            // 2. Kis k√©sleltet√©s √©s teljes √∫jrat√∂lt√©s
            setTimeout(async () => {
                await loadAllData(); // Teljes √∫jrat√∂lt√©s
                console.log('‚úÖ Teljes √∫jrat√∂lt√©s befejezve');
            }, 200);

            // 3. Sz√ºl≈ë komponens √©rtes√≠t√©se
            if (onDataChange) {
                setTimeout(() => {
                    onDataChange();
                }, 300);
            }

        } catch (error) {
            console.error('‚ùå Ment√©si hiba:', error);
            alert('‚ùå Hiba t√∂rt√©nt a ment√©s sor√°n: ' + (error as Error).message);
        }
    };

    const handleDelete = async (event: KombinaltEsemeny) => {
        if (!confirm(`‚ö†Ô∏è Biztosan t√∂r√∂lni akarod ezt az esem√©nyt?\n\nD√°tum: ${formatHungarianDate(event.datum)}\n√Ållat: ${event.animal_enar}\nFunkci√≥: ${event.funkci}\n\n‚ö†Ô∏è Ez t√∂rli az esem√©nyt √âS a fizikai kar√°m hozz√°rendel√©st is!`)) {
            return;
        }

        try {
            const tableName = event.forr√°s === 'animal_events' ? 'animal_events' : 'animal_movements';
            const realId = event.id.replace('event_', '').replace('movement_', '');

            console.log('üóëÔ∏è T√∂rl√©s megkezd√©se:', {
                tableName,
                realId,
                animal_id: event.animal_id,
                pen_id: event.to_pen,
                mode
            });

            // 1. ‚úÖ ESEM√âNY T√ñRL√âSE (eredeti)
            const { error: eventError } = await supabase
                .from(tableName)
                .delete()
                .eq('id', realId);

            if (eventError) throw eventError;
            console.log('‚úÖ Esem√©ny sikeresen t√∂r√∂lve az adatb√°zisb√≥l');

            // 2. üî• KRITIKUS - FIZIKAI KAR√ÅM HOZZ√ÅRENDEL√âS T√ñRL√âSE
            // Ez a legut√≥bbi hozz√°rendel√©st keresve t√∂rli!
            const { error: assignmentError } = await supabase
                .from('animal_pen_assignments')
                .update({
                    removed_at: new Date().toISOString(),
                    notes: `T√∂r√∂lve esem√©ny t√∂rl√©se miatt: ${formatHungarianDate(event.datum)}`
                })
                .eq('animal_id', event.animal_id)
                .eq('pen_id', event.to_pen)
                .is('removed_at', null)
                .order('assigned_at', { ascending: false })
                .limit(1);

            if (assignmentError) {
                console.warn('‚ö†Ô∏è Fizikai hozz√°rendel√©s t√∂rl√©se hiba:', assignmentError);
            } else {
                console.log('‚úÖ Fizikai kar√°m hozz√°rendel√©s is t√∂r√∂lve');

                // üî• √öJ - ANIMALS T√ÅBLA FRISS√çT√âSE (TypeScript safe)
                const { data: currentAssignment } = await supabase
                    .from('animal_pen_assignments')
                    .select(`
            pen_id,
            pens!inner(pen_number)
        `)
                    .eq('animal_id', event.animal_id)
                    .is('removed_at', null)
                    .order('assigned_at', { ascending: false })
                    .limit(1);

                let newKaram: string | null = null;

                if (currentAssignment && currentAssignment.length > 0) {
                    const assignment = currentAssignment[0] as any; // Explicit any cast
                    newKaram = assignment.pens?.pen_number || null;
                }

                await supabase
                    .from('animals')
                    .update({ jelenlegi_karam: newKaram })
                    .eq('id', event.animal_id);

                console.log('‚úÖ Animals t√°bla friss√≠tve:', newKaram);
            }

            // 3. üî• KOR√ÅBBI KAR√ÅM VISSZA√ÅLL√çT√ÅSA - JAV√çTOTT LOGIKA
            const { data: previousAssignments } = await supabase
                .from('animal_pen_assignments')
                .select('*')
                .eq('animal_id', event.animal_id)
                .not('removed_at', 'is', null)  // T√∂r√∂lt hozz√°rendel√©sek
                .order('removed_at', { ascending: false })  // Legut√≥bb t√∂r√∂lt
                .limit(1);

            if (previousAssignments && previousAssignments.length > 0) {
                const previousAssignment = previousAssignments[0];

                // √öj hozz√°rendel√©s l√©trehoz√°sa a kor√°bbi kar√°m alapj√°n
                const { error: restoreError } = await supabase
                    .from('animal_pen_assignments')
                    .insert({
                        animal_id: event.animal_id,
                        pen_id: previousAssignment.pen_id,
                        assigned_at: new Date().toISOString(),
                        assignment_reason: `Vissza√°ll√≠tva esem√©ny t√∂rl√©se miatt`,
                        notes: `Vissza√°ll√≠tva kor√°bbi kar√°mba: ${previousAssignment.pen_id}`
                    });

                if (restoreError) {
                    console.warn('‚ö†Ô∏è Kor√°bbi kar√°m vissza√°ll√≠t√°sa hiba:', restoreError);
                } else {
                    console.log('‚úÖ √Ållat vissza√°ll√≠tva kor√°bbi kar√°mba');

                    // üî• √öJ - ANIMALS T√ÅBLA FRISS√çT√âSE IS!
                    const { data: penData } = await supabase
                        .from('pens')
                        .select('pen_number')
                        .eq('id', previousAssignment.pen_id)
                        .single();

                    if (penData) {
                        await supabase
                            .from('animals')
                            .update({ jelenlegi_karam: penData.pen_number })
                            .eq('id', event.animal_id);
                        console.log('‚úÖ Animals t√°bla is friss√≠tve kor√°bbi kar√°mmal:', penData.pen_number);
                    }
                }
            } else {
                console.log('‚ö†Ô∏è Nincs kor√°bbi kar√°m - √°llat "szabadon" marad');
            }

            alert('‚úÖ Esem√©ny √âS fizikai kar√°m hozz√°rendel√©s sikeresen t√∂r√∂lve!');

            // 4. üî• FOKOZOTT FRISS√çT√âS - MINDEN LEHETS√âGES M√ìR√ìN!
            console.log('üîÑ Teljes friss√≠t√©s ind√≠t√°sa...');

            // A. Helyi adatok friss√≠t√©se
            await loadAllData();

            // B. Sz√ºl≈ë komponens friss√≠t√©se (kar√°m oldal)
            if (onDataChange) {
                console.log('üîÑ Sz√ºl≈ë komponens friss√≠t√©se...');
                setTimeout(() => {
                    onDataChange();
                }, 100);
            }

            // C. BRUT√ÅLIS MEGOLD√ÅS - Ha kar√°m m√≥dban vagyunk, oldal √∫jrat√∂lt√©s
            if (mode === 'pen') {
                console.log('üîÑ Kar√°m oldal er≈ëltetett friss√≠t√©se...');
                setTimeout(() => {
                    console.log('üîÑ Oldal √∫jrat√∂lt√©s...');
                    window.location.reload();
                }, 1500);
            }

        } catch (error) {
            console.error('‚ùå T√∂rl√©si hiba:', error);
            alert('‚ùå Hiba t√∂rt√©nt a t√∂rl√©s sor√°n: ' + (error as Error).message);
        }
    };

    // üîπ UTILITY FUNCTIONS
    const formatHungarianDate = (dateString: string): string => {
        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('hu-HU', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit'
            });
        } catch {
            return dateString;
        }
    };

    const napokEltelte = (dateString: string): string => {
        try {
            const date = new Date(dateString);
            const now = new Date();
            const diffTime = now.getTime() - date.getTime();
            const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));

            if (diffDays === 0) return 'Ma';
            if (diffDays === 1) return 'Tegnap';
            if (diffDays > 0) return `${diffDays} napja`;
            return `${Math.abs(diffDays)} nap m√∫lva`;
        } catch {
            return '-';
        }
    };

    const getFunkciEmoji = (funkci: string | undefined, tipus: string): string => {
        const emojiMap: { [key: string]: string } = {
            'b√∂lcsi': 'üêÆ',
            '√≥vi': 'üêÑ',
            'h√°rem': 'üêÑüíï',
            'vemhes': 'üêÑüíñ',
            'ellet≈ë': 'üêÑüçº',
            'teh√©n': 'üêÑüçº',
            'h√≠z√≥bika': 'üêÇ',
            '√ºres': '‚≠ï',
            'pen_movement': 'üîÑ',
            'pen_assignment': 'üìç',
            'function_change': '‚öôÔ∏è',
            'breeding': 'üêÑüíï',
            'pregnancy': 'üêÑüíñ',
            'birth': 'üçº',
            'medical': 'üè•',
            'quarantine': 'üö®',
            'culling': '‚ùå',
            'breeding_entry': 'üêÑüíï',
            'harem_entry': 'üêÑüíï',
            'other': 'üìù'
        };
        return emojiMap[funkci || tipus] || 'üìù';
    };

    const translateReason = (reason: string): string => {
        const translations: { [key: string]: string } = {
            'breeding': 'Teny√©szt√©s',
            'pregnancy': 'Vemhess√©g',
            'birth': 'Ell√©s',
            'medical': 'Orvosi kezel√©s',
            'quarantine': 'Karant√©n',
            'culling': 'Selejtez√©s',
            'breeding_entry': 'Teny√©szt√©sbe √°ll√≠t√°s',
            'harem_entry': 'H√°rembe helyez√©s',
            'other': 'Egy√©b',
            'weaning': 'V√°laszt√°s',
            'sale': '√ârt√©kes√≠t√©s',
            'death': 'Elhull√°s',
            'pen_movement': 'Kar√°m v√°lt√°s',
            'pen_assignment': 'Kar√°m hozz√°rendel√©s',
            'function_change': 'Funkci√≥ v√°lt√°s'
        };
        return translations[reason] || reason;
    };

    // üîπ LOADING STATE
    if (loading) {
        return (
            <div className="flex items-center justify-center p-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600"></div>
                <span className="ml-3 text-gray-600">Kar√°m t√∂rt√©nelem bet√∂lt√©se...</span>
            </div>
        );
    }

    // üîπ ERROR STATE
    if (error) {
        return (
            <div className="p-6 bg-red-50 border border-red-200 rounded-lg">
                <h3 className="text-lg font-medium text-red-800 mb-2">‚ùå Bet√∂lt√©si hiba</h3>
                <p className="text-red-600 text-sm mb-4">{error}</p>
                <button
                    onClick={loadAllData}
                    className="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 text-sm"
                >
                    üîÑ √öjrapr√≥b√°l√°s
                </button>
            </div>
        );
    }

    // üîπ MAIN RENDER
    return (
        <div className="space-y-6">
            {/* Header */}
            <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-900">
                    üìö {mode === 'pen' ? `Kar√°m ${penNumber} T√∂rt√©nelem` : '√Ållat Kar√°m T√∂rt√©nelem'}
                </h2>
                <div className="flex items-center space-x-4">
                    <div className="text-sm text-gray-500">
                        {kombinaltEsemenyek.length} esem√©ny
                    </div>
                    {mode !== 'view-only' && (
                        <>
                            <button
                                onClick={() => openModal()}
                                className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors"
                            >
                                ‚ûï √öj Esem√©ny
                            </button>
                            <button
                                onClick={() => loadAllData()}
                                className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
                            >
                                üîÑ Friss√≠t√©s
                            </button>
                        </>
                    )}
                </div>
            </div>

            {/* ‚úÖ Sz≈±r≈ë √©s pagination vez√©rl≈ëk */}
            <div className="flex justify-between items-center mb-6 p-4 bg-gray-50 rounded-lg">
                <div className="flex gap-2">
                    <button
                        onClick={() => {
                            setEventFilter('all');
                            setCurrentPage(1);
                        }}
                        className={`px-3 py-2 rounded-lg font-medium transition-colors ${eventFilter === 'all'
                            ? 'bg-blue-500 text-white'
                            : 'bg-white text-gray-700 hover:bg-gray-100'
                            }`}
                    >
                        üè† √ñsszes ({kombinaltEsemenyek.length})
                    </button>
                    <button
                        onClick={() => {
                            setEventFilter('harem');
                            setCurrentPage(1);
                        }}
                        className={`px-3 py-2 rounded-lg font-medium transition-colors ${eventFilter === 'harem'
                            ? 'bg-pink-500 text-white'
                            : 'bg-white text-gray-700 hover:bg-gray-100'
                            }`}
                    >
                        üíï H√°rem ({kombinaltEsemenyek.filter(e => e.funkci === 'h√°rem').length})
                    </button>
                    <button
                        onClick={() => {
                            setEventFilter('movement');
                            setCurrentPage(1);
                        }}
                        className={`px-3 py-2 rounded-lg font-medium transition-colors ${eventFilter === 'movement'
                            ? 'bg-green-500 text-white'
                            : 'bg-white text-gray-700 hover:bg-gray-100'
                            }`}
                    >
                        üîÑ Mozgat√°sok ({kombinaltEsemenyek.filter(e => e.tipus === 'movement').length})
                    </button>
                </div>

                {/* Pagination vez√©rl≈ëk */}
                <div className="flex gap-2 items-center">
                    <button
                        onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                        disabled={currentPage === 1}
                        className="px-3 py-1 bg-white text-gray-700 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100 transition-colors"
                    >
                        ‚¨ÖÔ∏è El≈ëz≈ë
                    </button>
                    <span className="px-3 py-1 bg-white rounded-lg text-gray-700 font-medium">
                        {currentPage} / {totalPages}
                    </span>
                    <button
                        onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                        disabled={currentPage === totalPages}
                        className="px-3 py-1 bg-white text-gray-700 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100 transition-colors"
                    >
                        K√∂vetkez≈ë ‚û°Ô∏è
                    </button>
                </div>
            </div>

            {/* Statistics */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="bg-blue-50 p-4 rounded-lg">
                    <div className="text-2xl font-bold text-blue-600">{filteredEvents.length}</div>
                    <div className="text-sm text-blue-600">Sz≈±rt esem√©nyek</div>
                </div>
                <div className="bg-green-50 p-4 rounded-lg">
                    <div className="text-2xl font-bold text-green-600">{kombinaltEsemenyek.filter(e => e.tipus === 'movement').length}</div>
                    <div className="text-sm text-green-600">Mozgat√°sok</div>
                </div>
                <div className="bg-purple-50 p-4 rounded-lg">
                    <div className="text-2xl font-bold text-purple-600">{kombinaltEsemenyek.filter(e => e.funkci === 'h√°rem').length}</div>
                    <div className="text-sm text-purple-600">H√°rem esem√©nyek</div>
                </div>
                <div className="bg-orange-50 p-4 rounded-lg">
                    <div className="text-2xl font-bold text-orange-600">{kombinaltEsemenyek.length > 0 ? kombinaltEsemenyek[0].pen_number || 'N/A' : 'N/A'}</div>
                    <div className="text-sm text-orange-600">Jelenlegi kar√°m</div>
                </div>
            </div>

            {/* Events Timeline */}
            <div className="space-y-4">
                {kombinaltEsemenyek.length === 0 ? (
                    <div className="text-center py-12 bg-gray-50 rounded-lg">
                        <div className="text-6xl mb-4">üìù</div>
                        <h3 className="text-lg font-medium text-gray-900 mb-2">M√©g nincs r√∂gz√≠tett t√∂rt√©nelem</h3>
                        <p className="text-gray-600 mb-4">
                            Ez az {mode === 'pen' ? 'kar√°m' : '√°llat'} m√©g nem rendelkezik esem√©ny t√∂rt√©nettel.
                        </p>
                        {mode !== 'view-only' && (
                            <button
                                onClick={() => openModal()}
                                className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700"
                            >
                                ‚ûï Els≈ë esem√©ny r√∂gz√≠t√©se
                            </button>
                        )}
                    </div>
                ) : (
                    currentEvents.map((esemeny, index) => (
                        <div key={esemeny.id} className="bg-white border rounded-lg p-4 hover:shadow-md transition-shadow">
                            <div className="flex items-start justify-between">
                                <div className="flex items-start space-x-4 flex-1">
                                    <div className="text-3xl">
                                        {getFunkciEmoji(esemeny.funkci, esemeny.tipus)}
                                    </div>
                                    <div className="flex-1">
                                        {/* ü§ç KAR√ÅM ID≈êSZAK INFO - F≈êSOR HELY√âN */}
                                        <div className="flex items-center space-x-3 mb-2">
                                            {(() => {
                                                const nextEvent = mode === 'animal'
                                                    ? kombinaltEsemenyek[index - 1]  // √Ållat m√≥d: k√∂vetkez≈ë esem√©ny a list√°ban (EREDETI)
                                                    : kombinaltEsemenyek.find((e, i) =>  // Kar√°m m√≥d: ugyanannak az √°llatnak k√∂vetkez≈ë esem√©nye
                                                        i < index && e.animal_id === esemeny.animal_id
                                                    );
                                                if (nextEvent) {
                                                    const karamVege = new Date(nextEvent.datum);
                                                    karamVege.setDate(karamVege.getDate() - 1);
                                                    const karamKezdete = new Date(esemeny.datum);
                                                    const diffTime = karamVege.getTime() - karamKezdete.getTime();
                                                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                                                    return (
                                                        <span className="font-medium text-lg">
                                                            üìÖ {formatHungarianDate(esemeny.datum)} - {formatHungarianDate(karamVege.toISOString().split('T')[0])} ({diffDays} nap)
                                                        </span>
                                                    );
                                                } else {
                                                    // JAV√çTOTT LOGIKA: Csak akkor "Folyamatban", ha t√©nyleg ez az √°llat jelenlegi kar√°mja!
                                                    const karamKezdete = new Date(esemeny.datum);
                                                    const ma = new Date();
                                                    const diffTime = ma.getTime() - karamKezdete.getTime();
                                                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                                                    // KAR√ÅM M√ìDBAN: Nem biztos hogy "Folyamatban" - lehet m√°r m√°shol van az √°llat
                                                    if (mode === 'pen') {
                                                        return (
                                                            <span className="font-medium text-lg">
                                                                üìÖ {formatHungarianDate(esemeny.datum)} - <span className="text-blue-600">Utols√≥ esem√©ny</span> ({diffDays} napja)
                                                            </span>
                                                        );
                                                    } else {
                                                        // √ÅLLAT M√ìDBAN: Folyamatban, mert ez az √°llat jelenlegi kar√°mja
                                                        return (
                                                            <span className="font-medium text-lg">
                                                                üìÖ {formatHungarianDate(esemeny.datum)} - <span className="text-green-600">Folyamatban</span> ({diffDays} nap)
                                                            </span>
                                                        );
                                                    }
                                                }
                                            })()}
                                            <span className="text-sm text-gray-500">
                                                ({napokEltelte(esemeny.datum)})
                                            </span>
                                            <span className={`text-xs px-2 py-1 rounded ${esemeny.tipus === 'event' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800'
                                                }`}>
                                                {esemeny.forr√°s}
                                            </span>
                                            {index === 0 && mode !== 'pen' && (
                                                <span className="text-xs px-2 py-1 rounded bg-yellow-100 text-yellow-800">
                                                    ‚≠ê Jelenlegi
                                                </span>
                                            )}
                                        </div>

                                        <div className="space-y-1 text-sm">
                                            {mode !== 'animal' && (
                                                <p><strong>üêÑ √Ållat:</strong> {esemeny.animal_enar || `ID: ${esemeny.animal_id}`}</p>
                                            )}
                                            <p><strong>üè† Kar√°m:</strong> {esemeny.pen_number || `ID: ${esemeny.to_pen}`} {esemeny.pen_location && `(${esemeny.pen_location})`}</p>
                                            {esemeny.funkci && (
                                                <p><strong>‚öôÔ∏è Funkci√≥:</strong> <span className="font-medium text-purple-600">{esemeny.funkci}</span></p>
                                            )}
                                            <p><strong>üìã Ok:</strong> {translateReason(esemeny.ok)}</p>
                                            <p><strong>üïê Id≈ëpont:</strong> {esemeny.idopont}</p>
                                            {esemeny.megjegyzes && (
                                                <p><strong>üìù Megjegyz√©s:</strong> {esemeny.megjegyzes}</p>
                                            )}
                                        </div>

                                        {/* üî• H√ÅREM METADATA MEGJELEN√çT√âS - KOMPLEX VERZI√ì! */}
                                        {(esemeny.funkci === 'h√°rem' ||
                                            esemeny.ok?.toLowerCase().includes('breeding') ||
                                            esemeny.ok?.toLowerCase().includes('teny√©szt√©')) && (
                                                <div className="mt-3 p-3 bg-pink-50 border border-pink-200 rounded">
                                                    <h4 className="font-medium text-pink-800 mb-2">üíï H√°rem Inform√°ci√≥k</h4>
                                                    <div className="text-sm space-y-1">
                                                        {esemeny.function_metadata?.bulls && esemeny.function_metadata.bulls.length > 0 ? (
                                                            <>
                                                                <p><strong>üêÇ Teny√©szbik√°k:</strong> {esemeny.function_metadata.bulls.map((b: any) => `${b.name} (${b.enar})`).join(', ')}</p>

                                                                {esemeny.function_metadata.pairing_start_date && (
                                                                    <p><strong>üìÖ H√°rem kezdete:</strong> {formatHungarianDate(esemeny.function_metadata.pairing_start_date)}</p>
                                                                )}

                                                                {/* KOMPLEX VV √âS √ÅLLAT ST√ÅTUSZ LOGIKA */}
                                                                {(() => {
                                                                    const vvResult = esemeny.function_metadata.vv_result;
                                                                    const haremKezdete = new Date(esemeny.function_metadata.pairing_start_date || esemeny.datum);

                                                                    // √Ållat aktu√°lis st√°tusz - ezt k√©s≈ëbb dynamic-ra cser√©lj√ºk
                                                                    // üî• TENY√âSZBIKA KIZ√ÅR√ÅS
                                                                    const isThisAnimalABull = esemeny.function_metadata?.bulls?.some((bull: any) =>
                                                                        bull.enar === esemeny.animal_enar
                                                                    );

                                                                    const currentAnimalStatus: string = (() => {
                                                                        if (isThisAnimalABull) return 'teny√©szbika';

                                                                        // Val√≥di √°llat st√°tusz az adatb√°zisb√≥l
                                                                        if (esemeny.animal_pregnancy_status === 'vemhes') return 'vemhes';
                                                                        if (esemeny.animal_pregnancy_status === 'empty') return '√ºres';

                                                                        return 'unknown';
                                                                    })();
                                                                    if (!vvResult) {
                                                                        // Nincs VV eredm√©ny EHHEZ a h√°remhez
                                                                        const ma = new Date();
                                                                        const diffTime = ma.getTime() - haremKezdete.getTime();
                                                                        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                                                                        return (
                                                                            <>
                                                                                <p><strong>üìÖ H√°rem v√©ge:</strong> <span className="text-orange-600">VV eredm√©ny v√°rhat√≥</span></p>
                                                                                <p><strong>üìÖ H√°remben t√∂lt√∂tt id≈ë:</strong> {diffDays} nap (folyamatban)</p>

                                                                                {/* KOMPLEX √ÅLLAT ST√ÅTUSZ */}
                                                                                {currentAnimalStatus === 'teny√©szbika' ? (
                                                                                    <>
                                                                                        <p><strong>üêÇ Teny√©szbika:</strong> <span className="text-blue-600">Akt√≠v a h√°remben</span></p>
                                                                                        <p><strong>üìã Funkci√≥:</strong> <span className="text-purple-600">Teny√©szt≈ë szerep</span></p>
                                                                                    </>
                                                                                ) : currentAnimalStatus === 'vemhes' ? (
                                                                                    <>
                                                                                        <p><strong>üêÑ √Ållat egyedi st√°tusz:</strong> <span className="text-green-600">‚úÖ Vemhes (kor√°bbi VV alapj√°n)</span></p>
                                                                                        <p><strong>üî¨ VV sz√ºks√©ges:</strong> <span className="text-gray-600">NINCS (m√°r vemhes)</span></p>
                                                                                        <p><strong>üìã H√°rem szerep:</strong> <span className="text-blue-600">Biztons√°gi teny√©szt√©s + dominancia stabiliz√°l√°s</span></p>
                                                                                    </>
                                                                                ) : currentAnimalStatus === '√ºres' ? (
                                                                                    <>
                                                                                        <p><strong>üêÑ √Ållat egyedi st√°tusz:</strong> <span className="text-orange-600">‚ùå √úres (utols√≥ VV negat√≠v)</span></p>
                                                                                        <p><strong>üî¨ VV sz√ºks√©ges:</strong> <span className="text-orange-600">IGEN - √∫j ciklus ind√≠t√°sa</span></p>
                                                                                        <p><strong>üìã H√°rem szerep:</strong> <span className="text-orange-600">Akt√≠v teny√©szt√©s - VV id≈ëz√≠t√©s fontos</span></p>
                                                                                    </>
                                                                                ) : (
                                                                                    <>
                                                                                        <p><strong>üêÑ √Ållat egyedi st√°tusz:</strong> <span className="text-gray-600">‚ùì Ismeretlen (nincs VV)</span></p>
                                                                                        <p><strong>üî¨ VV sz√ºks√©ges:</strong> <span className="text-red-600">IGEN - √°llapot meghat√°roz√°s</span></p>
                                                                                        <p><strong>üìã H√°rem szerep:</strong> <span className="text-red-600">VV s√ºrg≈ës - 75 nap ut√°n!</span></p>
                                                                                    </>
                                                                                )}
                                                                            </>
                                                                        );
                                                                    } else if (vvResult.status === 'pregnant' || vvResult.status === 'vemhes') {
                                                                        // Pozit√≠v VV - h√°rem lez√°rult
                                                                        const vvDate = new Date(vvResult.date);
                                                                        const diffTime = vvDate.getTime() - haremKezdete.getTime();
                                                                        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                                                                        return (
                                                                            <>
                                                                                <p><strong>üìÖ H√°rem v√©ge:</strong> {formatHungarianDate(vvResult.date)} (VV pozit√≠v)</p>
                                                                                <p><strong>üìÖ H√°remben t√∂lt√∂tt id≈ë:</strong> {diffDays} nap</p>
                                                                                <p><strong>üî¨ VV eredm√©ny:</strong> <span className="text-green-600">‚úÖ Vemhes ({formatHungarianDate(vvResult.date)})</span></p>
                                                                                <p><strong>üêÑ √Ållat st√°tusz:</strong> <span className="text-green-600">‚úÖ Vemhes - teny√©szt√©si c√©l el√©rve</span></p>
                                                                                <p><strong>üìã H√°rem eredm√©ny:</strong> <span className="text-green-600">SIKERES - v√°rhat√≥ ell√©s ~285 nap</span></p>
                                                                            </>
                                                                        );
                                                                    } else if (vvResult.status === 'empty' || vvResult.status === '√ºres') {
                                                                        // Negat√≠v VV - h√°rem folytat√≥dhat
                                                                        const ma = new Date();
                                                                        const diffTime = ma.getTime() - haremKezdete.getTime();
                                                                        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                                                                        return (
                                                                            <>
                                                                                <p><strong>üìÖ H√°rem v√©ge:</strong> <span className="text-blue-600">Folytat√≥dik (VV negat√≠v)</span></p>
                                                                                <p><strong>üìÖ H√°remben t√∂lt√∂tt id≈ë:</strong> {diffDays} nap + folytat√°s</p>
                                                                                <p><strong>üî¨ VV eredm√©ny:</strong> <span className="text-orange-600">‚ùå √úres ({formatHungarianDate(vvResult.date)}) - √∫j ciklus</span></p>
                                                                                <p><strong>üêÑ √Ållat st√°tusz:</strong> <span className="text-orange-600">‚ùå √úres - √∫jra teny√©szt√©s sz√ºks√©ges</span></p>
                                                                                <p><strong>üìã K√∂vetkez≈ë l√©p√©s:</strong> <span className="text-blue-600">√öj VV 75 nap m√∫lva vagy bika v√°lt√°s</span></p>
                                                                            </>
                                                                        );
                                                                    } else if (vvResult.status === 'csira' || vvResult.status === 'cyst') {
                                                                        // Cs√≠ra - selejtez√©s
                                                                        const vvDate = new Date(vvResult.date);
                                                                        const diffTime = vvDate.getTime() - haremKezdete.getTime();
                                                                        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                                                                        return (
                                                                            <>
                                                                                <p><strong>üìÖ H√°rem v√©ge:</strong> {formatHungarianDate(vvResult.date)} (selejtez√©s)</p>
                                                                                <p><strong>üìÖ H√°remben t√∂lt√∂tt id≈ë:</strong> {diffDays} nap</p>
                                                                                <p><strong>üî¨ VV eredm√©ny:</strong> <span className="text-red-600">‚ö†Ô∏è Cs√≠ra ({formatHungarianDate(vvResult.date)}) - selejtezend≈ë</span></p>
                                                                                <p><strong>üêÑ √Ållat st√°tusz:</strong> <span className="text-red-600">‚ö†Ô∏è Selejtezend≈ë - teny√©szt√©sre alkalmatlan</span></p>
                                                                                <p><strong>üìã K√∂vetkez≈ë l√©p√©s:</strong> <span className="text-red-600">√ârt√©kes√≠t√©s vagy h√∫stermel√©s</span></p>
                                                                            </>
                                                                        );
                                                                    }
                                                                })()}

                                                                <p><strong>üéØ P√°rz√°si m√≥dszer:</strong> {esemeny.function_metadata.breeding_method === 'natural' ? 'Term√©szetes' : 'Mesters√©ges'}</p>
                                                            </>
                                                        ) : (
                                                            <div className="text-gray-600">
                                                                <p>üìù H√°rem esem√©ny - r√©szletek nem r√∂gz√≠tettek</p>
                                                                <p className="text-xs">Szerkeszd az esem√©nyt a h√°rem inform√°ci√≥k hozz√°ad√°s√°hoz</p>
                                                            </div>
                                                        )}
                                                    </div>
                                                </div>
                                            )}
                                    </div>
                                </div>

                                {/* Action buttons */}
                                {mode !== 'view-only' && (
                                    <div className="flex space-x-2 ml-4">
                                        <button
                                            onClick={() => openModal(esemeny)}
                                            className="text-blue-600 hover:text-blue-800 p-2 rounded hover:bg-blue-50"
                                            title="Szerkeszt√©s"
                                        >
                                            ‚úèÔ∏è
                                        </button>
                                        <button
                                            onClick={() => handleDelete(esemeny)}
                                            className="text-red-600 hover:text-red-800 p-2 rounded hover:bg-red-50"
                                            title="T√∂rl√©s"
                                        >
                                            üóëÔ∏è
                                        </button>
                                    </div>
                                )}
                            </div>
                        </div>
                    ))
                )}
            </div>

            {/* Modal */}
            {showModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                    <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
                        <h3 className="text-xl font-bold mb-4">
                            {editingEvent ? '‚úèÔ∏è Esem√©ny Szerkeszt√©se' : '‚ûï √öj Kar√°m Esem√©ny'}
                        </h3>

                        <div className="grid grid-cols-2 gap-4 mb-4">
                            <div>
                                <label className="block text-sm font-medium mb-2">D√°tum *</label>
                                <input
                                    type="date"
                                    value={formData.datum}
                                    onChange={(e) => setFormData({ ...formData, datum: e.target.value })}
                                    className="w-full px-3 py-2 border rounded-md focus:ring-green-500 focus:border-green-500"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium mb-2">Id≈ëpont</label>
                                <input
                                    type="time"
                                    value={formData.idopont}
                                    onChange={(e) => setFormData({ ...formData, idopont: e.target.value })}
                                    className="w-full px-3 py-2 border rounded-md focus:ring-green-500 focus:border-green-500"
                                />
                            </div>
                        </div>

                        <div className="grid grid-cols-2 gap-4 mb-4">
                            <div>
                                <label className="block text-sm font-medium mb-2">Kar√°m funkci√≥ *</label>
                                <select
                                    value={formData.funkci}
                                    onChange={(e) => setFormData({ ...formData, funkci: e.target.value })}
                                    className="w-full px-3 py-2 border rounded-md focus:ring-green-500 focus:border-green-500"
                                >
                                    <option value="b√∂lcsi">üêÆ B√∂lcsi</option>
                                    <option value="√≥vi">üêÑ √ìvi</option>
                                    <option value="h√°rem">üêÑüíï H√°rem</option>
                                    <option value="vemhes">üêÑüíñ Vemhes</option>
                                    <option value="ellet≈ë">üêÑüçº Ellet≈ë</option>
                                    <option value="teh√©n">üêÑüçº Teh√©n</option>
                                    <option value="h√≠z√≥bika">üêÇ H√≠z√≥bika</option>
                                    <option value="√ºres">‚≠ï √úres</option>
                                </select>
                            </div>
                            <div>
                                <label className="block text-sm font-medium mb-2">Esem√©ny oka *</label>
                                <select
                                    value={formData.esemenyTipus}
                                    onChange={(e) => setFormData({ ...formData, esemenyTipus: e.target.value as any })}
                                    className="w-full px-3 py-2 border rounded-md focus:ring-green-500 focus:border-green-500"
                                >
                                    <option value="pen_assignment">üìç Kar√°m hozz√°rendel√©s</option>
                                    <option value="pen_movement">üîÑ Kar√°m v√°lt√°s</option>
                                    <option value="function_change">‚öôÔ∏è Funkci√≥ v√°lt√°s</option>
                                    <option value="breeding">üêÑüíï Teny√©szt√©s</option>
                                    <option value="harem_entry">üêÑüíï H√°rembe helyez√©s</option>
                                    <option value="breeding_entry">üêÑüíï Teny√©szt√©sbe √°ll√≠t√°s</option>
                                    <option value="pregnancy">üêÑüíñ Vemhess√©g</option>
                                    <option value="birth">üçº Ell√©s</option>
                                    <option value="medical">üè• Orvosi kezel√©s</option>
                                    <option value="quarantine">üö® Karant√©n</option>
                                    <option value="culling">‚ùå Selejtez√©s</option>
                                    <option value="other">üìù Egy√©b</option>
                                </select>
                            </div>
                        </div>

                        <div className="mb-4">
                            <label className="block text-sm font-medium mb-2">C√©lkar√°m *</label>
                            <select
                                value={formData.hovaPen}
                                onChange={(e) => setFormData({ ...formData, hovaPen: e.target.value })}
                                className="w-full px-3 py-2 border rounded-md focus:ring-green-500 focus:border-green-500"
                            >
                                <option value="">V√°lassz karamot...</option>
                                {availablePens.map(pen => (
                                    <option key={pen.id} value={pen.id}>
                                        {pen.pen_number} ({pen.location})
                                    </option>
                                ))}
                            </select>
                        </div>

                        {/* H√°rem specifikus mez≈ëk */}
                        {formData.funkci === 'h√°rem' && (
                            <div className="mb-4 p-4 bg-pink-50 border border-pink-200 rounded">
                                <h4 className="font-medium text-pink-800 mb-3">üíï H√°rem be√°ll√≠t√°sok</h4>

                                {/* H√°rem kezdet d√°tuma */}
                                <div className="mb-4">
                                    <label className="block text-sm font-medium mb-2">üìÖ H√°rem kezdete (teny√©szbika be√°ll√≠t√°s d√°tuma)</label>
                                    <input
                                        type="date"
                                        value={formData.haremKezdete || formData.datum}
                                        onChange={(e) => setFormData({ ...formData, haremKezdete: e.target.value })}
                                        className="w-full px-3 py-2 border rounded-md focus:ring-pink-500 focus:border-pink-500"
                                    />
                                    <div className="mt-1 text-xs text-pink-600">
                                        Ez lehet elt√©r≈ë a kar√°m esem√©ny d√°tum√°t√≥l, ha k√©s≈ëbbi id≈ëpontban ker√ºlt be a teny√©szbika
                                    </div>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium mb-2">üêÇ Teny√©szbik√°k ({availableBulls.length} el√©rhet≈ë)</label>
                                    <div className="space-y-2 max-h-24 overflow-y-auto border rounded p-2 bg-white">
                                        {availableBulls.map(bika => (
                                            <div key={bika.id} className="flex items-center">
                                                <input
                                                    type="checkbox"
                                                    id={`bika-${bika.id}`}
                                                    checked={formData.kivalasztottBikak.includes(bika.id)}
                                                    onChange={async (e) => {
    const isChecked = e.target.checked;
    
    if (isChecked) {
        // Hozz√°ad√°s a kiv√°lasztottakhoz
        setFormData({
            ...formData,
            kivalasztottBikak: [...formData.kivalasztottBikak, bika.id]
        });
        
        // ‚úÖ √öJ: FIZIKAI HOZZ√ÅRENDEL√âS AZONNAL (csak ha nem t√∂rt√©neti)
        if (!formData.torteneti && formData.hovaPen) {
            try {
                console.log('üîÑ Azonnali fizikai hozz√°rendel√©s:', bika.name);
                
                const result = await handleBullPhysicalAssignment([bika], formData.hovaPen, false);
                
                if (result.success && result.addedBulls > 0) {
                    console.log(`‚úÖ ${bika.name} fizikailag hozz√°rendelve`);
                    
                    // Helyi √©rtes√≠t√©s
                    const toast = document.createElement('div');
                    toast.className = 'fixed bottom-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg z-50 text-sm';
                    toast.textContent = `‚úÖ ${bika.name} hozz√°rendelve a kar√°mhoz!`;
                    document.body.appendChild(toast);
                    
                    setTimeout(() => {
                        if (document.body.contains(toast)) {
                            document.body.removeChild(toast);
                        }
                    }, 2000);
                    
                    // Sz√ºl≈ë komponens friss√≠t√©se
                    if (onDataChange) {
                        setTimeout(() => {
                            onDataChange();
                        }, 500);
                    }
                    
                } else {
                    console.warn(`‚ö†Ô∏è ${bika.name} fizikai hozz√°rendel√©s sikertelen:`, result.message);
                }
                
            } catch (error) {
                console.error('‚ùå Azonnali hozz√°rendel√©si hiba:', error);
            }
        }
        
    } else {
        // Elt√°vol√≠t√°s a kiv√°lasztottakb√≥l
        setFormData({
            ...formData,
            kivalasztottBikak: formData.kivalasztottBikak.filter(id => id !== bika.id)
        });
        
        // ‚úÖ √öJ: FIZIKAI ELT√ÅVOL√çT√ÅS AZONNAL (csak ha nem t√∂rt√©neti)
        if (!formData.torteneti && formData.hovaPen) {
            try {
                console.log('üóëÔ∏è Azonnali fizikai elt√°vol√≠t√°s:', bika.name);
                
                // Animal ID megkeres√©se
                const { data: animalData } = await supabase
                    .from('animals')
                    .select('id')
                    .eq('enar', bika.enar)
                    .single();

                if (animalData) {
                    // Assignment lez√°r√°sa
                    await supabase
                        .from('animal_pen_assignments')
                        .update({ 
                            removed_at: new Date().toISOString(),
                            removal_reason: 'kar√°m_t√∂rt√©net_elt√°vol√≠t√°s'
                        })
                        .eq('animal_id', animalData.id)
                        .eq('pen_id', formData.hovaPen)
                        .is('removed_at', null);

                    console.log(`‚úÖ ${bika.name} fizikailag elt√°vol√≠tva`);
                    
                    // Sz√ºl≈ë komponens friss√≠t√©se
                    if (onDataChange) {
                        setTimeout(() => {
                            onDataChange();
                        }, 500);
                    }
                }
                
            } catch (error) {
                console.error('‚ùå Azonnali elt√°vol√≠t√°si hiba:', error);
            }
        }
    }
}}
                                                    className="mr-3 h-4 w-4 text-pink-600 border-gray-300 rounded focus:ring-pink-500"
                                                />
                                                <label htmlFor={`bika-${bika.id}`} className="text-sm cursor-pointer">
                                                    <strong className="text-pink-900">{bika.name}</strong>
                                                    <span className="text-gray-600 ml-2">({bika.enar})</span>
                                                    {bika.kplsz && <span className="text-gray-500 text-xs ml-1">KPLSZ: {bika.kplsz}</span>}
                                                </label>
                                            </div>
                                        ))}
                                    </div>
                                    <div className="mt-2 text-xs text-pink-600">
                                        {formData.kivalasztottBikak.length} teny√©szbika kiv√°lasztva
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* üêÑ √ÅLLAT V√ÅLASZT√ÅS - INTELLIGENS MEGJELEN√çT√âS */}
                        {(mode === 'pen' && !editingEvent) ? (
                            // √öJ ESEM√âNY KAR√ÅM M√ìDBAN - √ÅLLAT V√ÅLASZT√ÅS SZ√úKS√âGES
                            <div className="space-y-4 mb-4">
                                <div className="flex items-center space-x-2">
                                    <span className="text-lg">üêÑ</span>
                                    <h4 className="text-md font-medium text-gray-900">√ârintett √°llatok kiv√°laszt√°sa</h4>
                                    <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                                        V√°lassz az √∂sszes √°llatb√≥l
                                    </span>
                                </div>

                                <AnimalSelector
                                    key={`animal-selector-${showModal}-${Date.now()}`}
                                    penId={undefined}       // ‚Üê Nincs kar√°m sz≈±r√©s!
                                    selected={formData.selectedAnimals}
                                    onChange={(selected) => setFormData(prev => ({
                                        ...prev,
                                        selectedAnimals: selected
                                    }))}
                                    multiSelect={true}
                                    currentOnly={false}     // ‚Üê √ñSSZES √°llat bet√∂lt√©se!
                                    label="El√©rhet≈ë √°llatok"
                                    placeholder="Keres√©s ENAR vagy kateg√≥ria alapj√°n..."
                                    maxHeight="max-h-48"
                                />

                                {formData.selectedAnimals.length > 0 && (
                                    <div className="text-sm text-green-600">
                                        ‚úÖ {formData.selectedAnimals.length} √°llat kiv√°lasztva az esem√©nyhez
                                    </div>
                                )}

                                {formData.selectedAnimals.length === 0 && (
                                    <div className="text-sm text-blue-600 bg-blue-50 p-3 rounded-lg">
                                        ‚ÑπÔ∏è Nincs √°llat kiv√°lasztva - esem√©ny kar√°m-szintre vonatkozik (pl. √ºres kar√°m, funkci√≥ v√°lt√°s)
                                    </div>
                                )}
                            </div>
                        ) : editingEvent ? (
                            // SZERKESZT√âS M√ìDBAN - EGYSZER≈∞S√çTETT INFO
                            <div className="space-y-4 mb-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                                <div className="flex items-center space-x-2">
                                    <span className="text-lg">‚úèÔ∏è</span>
                                    <h4 className="text-md font-medium text-gray-900">Esem√©ny szerkeszt√©se</h4>
                                </div>
                                <div className="text-sm text-blue-800">
                                    <p>üìù Megl√©v≈ë esem√©ny m√≥dos√≠t√°sa - √°llat v√°laszt√°s nem v√°ltoztathat√≥.</p>
                                    <p>üêÑ √ârintett √°llat: <strong>{editingEvent.animal_enar}</strong></p>
                                </div>
                            </div>
                        ) : (
                            // √ÅLLAT M√ìDBAN - NINCS V√ÅLASZT√ÅS SZ√úKS√âGES  
                            <div className="space-y-4 mb-4 p-4 bg-green-50 border border-green-200 rounded-lg">
                                <div className="flex items-center space-x-2">
                                    <span className="text-lg">üêÑ</span>
                                    <h4 className="text-md font-medium text-gray-900">√Ållat-specifikus esem√©ny</h4>
                                </div>
                                <div className="text-sm text-green-800">
                                    <p>‚úÖ Ez az esem√©ny automatikusan erre az √°llatra vonatkozik.</p>
                                    <p>üéØ Nincs sz√ºks√©g tov√°bbi √°llat kiv√°laszt√°sra.</p>
                                </div>
                            </div>
                        )}

                        <div className="mb-4">
                            <label className="block text-sm font-medium mb-2">üìù Megjegyz√©s</label>
                            <textarea
                                value={formData.megjegyzes}
                                onChange={(e) => setFormData({ ...formData, megjegyzes: e.target.value })}
                                rows={2}
                                className="w-full px-3 py-2 border rounded-md focus:ring-green-500 focus:border-green-500"
                                placeholder="Opcion√°lis megjegyz√©s..."
                            />
                        </div>

                        <div className="mb-6">
                            <label className="flex items-center">
                                <input
                                    type="checkbox"
                                    checked={formData.torteneti}
                                    onChange={(e) => setFormData({ ...formData, torteneti: e.target.checked })}
                                    className="mr-2 h-4 w-4 text-green-600 border-gray-300 rounded focus:ring-green-500"
                                />
                                <span className="text-sm">üìö T√∂rt√©neti esem√©ny (m√∫ltbeli d√°tum)</span>
                            </label>
                        </div>

                        <div className="flex justify-end gap-3 pt-6 border-t">
                            <button
                                onClick={() => setShowModal(false)}
                                className="px-4 py-2 text-gray-600 border rounded-md hover:bg-gray-50"
                            >
                                M√©gse
                            </button>
                            <button
                                onClick={handleSave}
                                disabled={
                                    !formData.datum ||
                                    !formData.funkci ||
                                    !formData.hovaPen ||
                                    (mode === 'pen' && !editingEvent && formData.selectedAnimals.length === 0)
                                }
                                className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
                            >
                                üíæ Ment√©s
                                {(mode === 'pen' && !editingEvent && formData.selectedAnimals.length === 0) && (
                                    <span className="ml-2 text-xs">(v√°lassz √°llato(ka)t)</span>
                                )}
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default TeljesKaramTortenelem;