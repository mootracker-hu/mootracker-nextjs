// src/components/EditHistoricalPeriod.tsx
'use client';

import { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabase';
import AnimalSelector from './AnimalSelector';
import { broadcastPenHistoryUpdate, broadcastAnimalHistoryUpdate } from '@/lib/penHistorySync';

interface PenHistoryPeriod {
  id: string;
  pen_id: string;
  function_type: string;
  start_date: string;
  end_date: string | null;
  animals_snapshot: any[];
  metadata: any;
  notes?: string;
  historical: boolean;
  created_at: string;
}

interface EditHistoricalPeriodProps {
  period: PenHistoryPeriod;
  penNumber: string;
  onSave: () => void;
  onCancel: () => void;
}

export default function EditHistoricalPeriod({
  period,
  penNumber,
  onSave,
  onCancel
}: EditHistoricalPeriodProps) {
  const [formData, setFormData] = useState({
    start_date: period.start_date,
    end_date: period.end_date || '',
    function_type: period.function_type,
    notes: period.notes || ''
  });

  const [selectedAnimals, setSelectedAnimals] = useState<number[]>([]);
  const [selectedAnimalsData, setSelectedAnimalsData] = useState<any[]>([]);
  const [selectedBulls, setSelectedBulls] = useState<number[]>([]);
  const [availableBulls, setAvailableBulls] = useState<any[]>([]);
  const [saving, setSaving] = useState(false);
  const [loading, setLoading] = useState(true);

  // Funkci√≥ opci√≥k
  const functionOptions = [
    { value: 'h√°rem', label: 'üíï H√°rem' },
    { value: 'vemhes', label: 'üêÑüíñ Vemhes' },
    { value: 'b√∂lcsi', label: 'üêÆ B√∂lcsi' },
    { value: '√≥vi', label: 'üêÑ √ìvi' },
    { value: 'ellet≈ë', label: 'üêÑüçº Ellet≈ë' },
    { value: 'teh√©n', label: 'üêÑüçº Teh√©n' },
    { value: 'h√≠z√≥bika', label: 'üêÇ H√≠z√≥bika' },
    { value: '√ºres', label: '‚≠ï √úres' },
    { value: '√°tmeneti', label: 'üîÑ √Åtmeneti' },
    { value: 'k√≥rh√°z', label: 'üè• K√≥rh√°z' },
    { value: 'karant√©n', label: 'üîí Karant√©n' },
    { value: 'selejt', label: 'üì¶ Selejt' }
  ];

  // Eredeti adatok bet√∂lt√©se
  useEffect(() => {
    loadOriginalData();
  }, [period]);

  const loadOriginalData = async () => {
    try {
      setLoading(true);
      console.log('üìÇ Eredeti peri√≥dus adatok bet√∂lt√©se:', period.id);

      // 1. √Ållatok ID-k kinyer√©se a snapshot-b√≥l
      const animalIds = period.animals_snapshot?.map(animal => animal.id).filter(Boolean) || [];
      console.log('üêÑ Eredeti √°llat ID-k:', animalIds);

      setSelectedAnimals(animalIds);

      // 2. Teny√©szbik√°k kinyer√©se a metadata-b√≥l
      if (period.metadata?.bulls) {
        const bullIds = period.metadata.bulls.map((bull: any) => bull.id).filter(Boolean);
        console.log('üêÇ Eredeti teny√©szbika ID-k:', bullIds);
        setSelectedBulls(bullIds);
      }

      // 3. Teny√©szbik√°k list√°j√°nak bet√∂lt√©se
      await loadAvailableBulls();

    } catch (error) {
      console.error('‚ùå Eredeti adatok bet√∂lt√©si hiba:', error);
    } finally {
      setLoading(false);
    }
  };

  // Kiv√°lasztott √°llatok adatainak lek√©rdez√©se
  useEffect(() => {
    if (selectedAnimals.length > 0) {
      loadSelectedAnimalsData();
    } else {
      setSelectedAnimalsData([]);
    }
  }, [selectedAnimals]);

  const loadSelectedAnimalsData = async () => {
    try {
      console.log('üîç Kiv√°lasztott √°llatok adatainak lek√©rdez√©se:', selectedAnimals);
      
      if (selectedAnimals.length === 0) {
        setSelectedAnimalsData([]);
        return;
      }

      const { data, error } = await supabase
        .from('animals')
        .select('id, enar, kategoria, ivar, szuletesi_datum, statusz')
        .in('id', selectedAnimals);

      if (error) {
        console.error('‚ùå Supabase error:', error);
        throw error;
      }

      console.log('‚úÖ √Ållatok bet√∂ltve:', data?.length || 0);
      setSelectedAnimalsData(data || []);
    } catch (error) {
      console.error('‚ùå Kiv√°lasztott √°llatok adatainak lek√©rdez√©se sikertelen:', error);
    }
  };

  // Teny√©szbik√°k bet√∂lt√©se
  const loadAvailableBulls = async () => {
    try {
      const { data, error } = await supabase
        .from('animals')
        .select('id, enar, name, kategoria, statusz')
        .eq('kategoria', 'teny√©szbika')
        .in('statusz', ['akt√≠v', 'eladott', 'elhullott']) // ‚Üê ELHULLOTT TENY√âSZBIK√ÅK IS!
        .order('enar');

      if (error) throw error;
      setAvailableBulls(data || []);
      console.log('üêÇ Teny√©szbik√°k bet√∂ltve:', data?.length || 0);
    } catch (error) {
      console.error('‚ùå Teny√©szbik√°k bet√∂lt√©se sikertelen:', error);
    }
  };

  const handleSave = async () => {
    // Valid√°ci√≥
    if (!formData.start_date || !formData.function_type) {
      alert('‚ö†Ô∏è K√©rlek t√∂ltsd ki a k√∂telez≈ë mez≈ëket!');
      return;
    }

    if (selectedAnimals.length === 0) {
      alert('‚ö†Ô∏è Legal√°bb egy √°llatot ki kell v√°lasztani!');
      return;
    }

    setSaving(true);

    try {
      console.log('üíæ Peri√≥dus friss√≠t√©s ind√≠t√°sa:', {
        periodId: period.id,
        selectedAnimals: selectedAnimals.length,
        animalsData: selectedAnimalsData.length,
        functionType: formData.function_type
      });

      // Metadata √∂ssze√°ll√≠t√°sa
      const metadata: any = {
        ...period.metadata, // Megl√©v≈ë metadata meg≈ërz√©se
        animal_count: selectedAnimalsData.length,
        last_edited: new Date().toISOString(),
        selected_animal_ids: selectedAnimals
      };

      // H√°rem specifikus metadata friss√≠t√©se
      if (formData.function_type === 'h√°rem' && selectedBulls.length > 0) {
        const selectedBullsData = availableBulls.filter(bull => 
          selectedBulls.includes(bull.id)
        );
        
        metadata.bulls = selectedBullsData.map(bull => ({
          id: bull.id,
          enar: bull.enar,
          name: bull.name || 'N√©vtelen',
          kplsz: bull.kplsz || '',
          sold_status: bull.statusz === 'eladott' ? 'eladott' : 'akt√≠v'
        }));
        metadata.bull_count = selectedBullsData.length;
        
        const bulls = selectedAnimalsData.filter(a => a.kategoria === 'teny√©szbika') || [];
        const females = selectedAnimalsData.filter(a => a.kategoria !== 'teny√©szbika') || [];
        
        metadata.bull_count_actual = bulls.length;
        metadata.female_count = females.length;
        metadata.selected_bulls = selectedBullsData;
      } else if (formData.function_type !== 'h√°rem') {
        // Ha m√°r nem h√°rem, t√∂r√∂lj√ºk a h√°rem specifikus metadata-t
        delete metadata.bulls;
        delete metadata.bull_count;
        delete metadata.bull_count_actual;
        delete metadata.female_count;
        delete metadata.selected_bulls;
      }

      // Kateg√≥ria √∂sszes√≠t≈ë friss√≠t√©se
      const categoryStats: Record<string, number> = {};
      selectedAnimalsData.forEach(animal => {
        categoryStats[animal.kategoria] = (categoryStats[animal.kategoria] || 0) + 1;
      });
      metadata.category_breakdown = categoryStats;

      // Eladott √©s elhullott √°llatok sz√°ml√°l√°sa
      const soldAnimals = selectedAnimalsData.filter(a => a.statusz === 'eladott');
      const deceasedAnimals = selectedAnimalsData.filter(a => a.statusz === 'elhullott');
      const inactiveAnimals = [...soldAnimals, ...deceasedAnimals];
      
      if (inactiveAnimals.length > 0) {
        metadata.inactive_animals_count = inactiveAnimals.length;
        metadata.sold_animals_count = soldAnimals.length;
        metadata.deceased_animals_count = deceasedAnimals.length;
        metadata.contains_inactive_animals = true;
        metadata.inactive_animals = inactiveAnimals.map(a => ({
          id: a.id,
          enar: a.enar,
          statusz: a.statusz
        }));
      } else {
        delete metadata.inactive_animals_count;
        delete metadata.sold_animals_count;
        delete metadata.deceased_animals_count;
        delete metadata.contains_inactive_animals;
        delete metadata.inactive_animals;
      }

      // Peri√≥dus friss√≠t√©se
      const { error: updateError } = await supabase
        .from('pen_history_periods')
        .update({
          function_type: formData.function_type,
          start_date: formData.start_date,
          end_date: formData.end_date || null,
          animals_snapshot: selectedAnimalsData,
          metadata: metadata,
          notes: formData.notes || null
        })
        .eq('id', period.id);

      if (updateError) {
        throw new Error(`Friss√≠t√©si hiba: ${updateError.message}`);
      }

      console.log('‚úÖ T√∂rt√©neti peri√≥dus sikeresen friss√≠tve');

      // Fizikai √°llat szinkroniz√°ci√≥ (ha folyamatban l√©v≈ë peri√≥dus)
      if (!formData.end_date) {
        try {
          console.log('üîÑ Folyamatban l√©v≈ë peri√≥dus - √°llatok fizikai szinkroniz√°l√°sa...');
          
          // El≈ëz≈ë fizikai hozz√°rendel√©sek lez√°r√°sa ehhez a kar√°mhoz
          await supabase
            .from('animal_pen_assignments')
            .update({ removed_at: new Date().toISOString() })
            .eq('pen_id', period.pen_id)
            .is('removed_at', null);

          // Csak az akt√≠v √°llatok fizikai mozgat√°sa
          const activeAnimals = selectedAnimalsData.filter(a => a.statusz === 'akt√≠v');
          
          for (const animal of activeAnimals) {
            // √öj hozz√°rendel√©s
            await supabase
              .from('animal_pen_assignments')
              .insert({
                animal_id: animal.id,
                pen_id: period.pen_id,
                assigned_at: new Date().toISOString(),
                assignment_reason: 'Szerkesztett peri√≥dus szinkroniz√°ci√≥'
              });
            
            // Animals t√°bla friss√≠t√©se
            await supabase
              .from('animals')
              .update({ jelenlegi_karam: penNumber })
              .eq('id', animal.id);
          }
          
          console.log('‚úÖ Akt√≠v √°llatok fizikailag szinkroniz√°lva:', activeAnimals.length);
        } catch (syncError) {
          console.error('‚ùå Fizikai szinkroniz√°ci√≥ hiba:', syncError);
        }
      }

      // Broadcast √©rtes√≠t√©sek
      broadcastPenHistoryUpdate(period.pen_id, 'period_updated', { 
        periodId: period.id,
        functionType: formData.function_type,
        animalCount: selectedAnimalsData.length 
      });

      // √ârintett √°llatok broadcast-ja
      const activeAnimalIds = selectedAnimalsData.filter(a => a.statusz === 'akt√≠v').map(animal => animal.id.toString());
      if (activeAnimalIds.length > 0) {
        broadcastAnimalHistoryUpdate(activeAnimalIds, 'period_updated', { 
          penId: period.pen_id,
          functionType: formData.function_type 
        });
      }

      // Sikeres friss√≠t√©s √ºzenet
      const categoryBreakdown = Object.entries(categoryStats)
        .map(([kategoria, count]) => `${kategoria}: ${count}`)
        .join(', ');

      const inactiveInfo = inactiveAnimals.length > 0 ? `\n\nüìã Nem akt√≠v √°llatok: ${inactiveAnimals.length} db (${soldAnimals.length} eladott, ${deceasedAnimals.length} elhullott)` : '';

      alert(`‚úÖ T√∂rt√©neti peri√≥dus sikeresen friss√≠tve!

Peri√≥dus: ${formData.function_type}
√Ållatok: ${selectedAnimalsData.length} db (${selectedAnimalsData.filter(a => a.statusz === 'akt√≠v').length} akt√≠v + ${inactiveAnimals.length} nem akt√≠v)
Kateg√≥ri√°k: ${categoryBreakdown}
Id≈ëszak: ${formData.start_date} - ${formData.end_date || 'folyamatban'}${inactiveInfo}`);

      onSave();

    } catch (error) {
      console.error('‚ùå Friss√≠t√©si hiba:', error);
      alert(`‚ùå Hiba t√∂rt√©nt a friss√≠t√©s sor√°n:\n${error instanceof Error ? error.message : 'Ismeretlen hiba'}`);
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow-lg border p-6 max-w-4xl mx-auto">
        <div className="text-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Peri√≥dus adatok bet√∂lt√©se...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-lg border p-6 max-w-4xl mx-auto">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center">
          <span className="text-2xl mr-3">‚úèÔ∏è</span>
          <h3 className="text-xl font-bold text-gray-900">
            T√∂rt√©neti Peri√≥dus Szerkeszt√©se
          </h3>
        </div>
        <div className="text-sm text-gray-500">
          Kar√°m {penNumber} ‚Ä¢ ID: {period.id.slice(0, 8)}...
        </div>
      </div>

      <div className="space-y-6">
        {/* Id≈ëszak */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              üìÖ Kezdet d√°tum *
            </label>
            <input
              type="date"
              value={formData.start_date}
              onChange={(e) => setFormData({ ...formData, start_date: e.target.value })}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              üìÖ V√©g d√°tum
            </label>
            <input
              type="date"
              value={formData.end_date}
              onChange={(e) => setFormData({ ...formData, end_date: e.target.value })}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors"
              placeholder="√úres = folyamatban"
            />
            <p className="text-xs text-gray-500 mt-1">
              üí° Ha √ºres marad, akkor "folyamatban" lesz
            </p>
          </div>
        </div>

        {/* Funkci√≥ t√≠pus */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            üéØ Funkci√≥ t√≠pus *
          </label>
          <select
            value={formData.function_type}
            onChange={(e) => setFormData({ ...formData, function_type: e.target.value })}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors bg-white"
            required
          >
            {functionOptions.map(option => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        {/* √Ållatok kiv√°laszt√°sa */}
        <div>
          <AnimalSelector
            penId={period.pen_id}
            selected={selectedAnimals}
            onChange={setSelectedAnimals}
            multiSelect={true}
            currentOnly={false}
            includeSoldAnimals={true}
            label="üêÑ √Ållatok kiv√°laszt√°sa * (akt√≠v, eladott √©s elhullott √°llatok)"
            placeholder="Keres√©s ENAR, kateg√≥ria alapj√°n... (eladott √©s elhullott √°llatok is megjelennek)"
            maxHeight="max-h-80"
          />
          <p className="text-xs text-gray-600 mt-2">
            üí° <strong>Szerkeszt√©s m√≥dban:</strong> √Ållatok hozz√°adhat√≥k √©s elt√°vol√≠that√≥k. Az eladott √©s elhullott √°llatok is el√©rhet≈ëk.
          </p>
        </div>

        {/* Kiv√°lasztott √°llatok √∂sszes√≠t≈ë */}
        {selectedAnimalsData.length > 0 && (
          <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <h4 className="font-medium text-blue-900 mb-2">
              üìä Kiv√°lasztott √°llatok √∂sszes√≠t≈ë ({selectedAnimalsData.length} db)
            </h4>
            
            {/* St√°tusz szerinti bont√°s */}
            {(() => {
              const activeCount = selectedAnimalsData.filter(a => a.statusz === 'akt√≠v').length;
              const soldCount = selectedAnimalsData.filter(a => a.statusz === 'eladott').length;
              const deceasedCount = selectedAnimalsData.filter(a => a.statusz === 'elhullott').length;
              
              return (
                <div className="mb-3 p-2 bg-white rounded border">
                  <p className="text-sm font-medium text-gray-700 mb-1">St√°tusz megoszl√°s:</p>
                  <div className="flex gap-4 text-sm">
                    <span className="text-green-700">‚úÖ Akt√≠v: {activeCount} db</span>
                    {soldCount > 0 && (
                      <span className="text-red-700">üì¶ Eladott: {soldCount} db</span>
                    )}
                    {deceasedCount > 0 && (
                      <span className="text-gray-700">üíÄ Elhullott: {deceasedCount} db</span>
                    )}
                  </div>
                  {(soldCount > 0 || deceasedCount > 0) && (
                    <p className="text-xs text-red-600 mt-1">
                      ‚ÑπÔ∏è A nem akt√≠v √°llatok csak t√∂rt√©neti r√∂gz√≠t√©sre ker√ºlnek, fizikai mozgat√°s nem t√∂rt√©nik.
                    </p>
                  )}
                </div>
              );
            })()}
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div>
                <p className="font-medium text-blue-800">Kateg√≥ri√°k:</p>
                <ul className="text-blue-700">
                  {(() => {
                    const categoryStats: Record<string, number> = {};
                    selectedAnimalsData.forEach(animal => {
                      categoryStats[animal.kategoria] = (categoryStats[animal.kategoria] || 0) + 1;
                    });

                    return Object.entries(categoryStats).map(([kategoria, count]) => (
                      <li key={kategoria}>‚Ä¢ {kategoria}: {count} db</li>
                    ));
                  })()}
                </ul>
              </div>
              <div>
                <p className="font-medium text-blue-800">Ivarok:</p>
                <ul className="text-blue-700">
                  {(() => {
                    const ivarStats: Record<string, number> = {};
                    selectedAnimalsData.forEach(animal => {
                      ivarStats[animal.ivar] = (ivarStats[animal.ivar] || 0) + 1;
                    });

                    return Object.entries(ivarStats).map(([ivar, count]) => (
                      <li key={ivar}>‚Ä¢ {ivar}: {count} db</li>
                    ));
                  })()}
                </ul>
              </div>
            </div>
          </div>
        )}

        {/* H√°rem specifikus mez≈ë - ELADOTT √âS ELHULLOTT TENY√âSZBIK√ÅK IS */}
        {formData.function_type === 'h√°rem' && (
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              üêÇ Teny√©szbik√°k kiv√°laszt√°sa (akt√≠v, eladott √©s elhullott)
            </label>
            
            {availableBulls.length > 0 ? (
              <div className="border border-gray-300 rounded-lg p-3 max-h-48 overflow-y-auto">
                <div className="space-y-2">
                  {availableBulls.map(bull => (
                    <label key={bull.id} className={`flex items-center ${
                      bull.statusz === 'eladott' ? 'bg-red-50 p-2 rounded border border-red-200' : 
                      bull.statusz === 'elhullott' ? 'bg-gray-50 p-2 rounded border border-gray-200' : ''
                    }`}>
                      <input
                        type="checkbox"
                        checked={selectedBulls.includes(bull.id)}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setSelectedBulls([...selectedBulls, bull.id]);
                          } else {
                            setSelectedBulls(selectedBulls.filter(id => id !== bull.id));
                          }
                        }}
                        className="mr-3 rounded border-gray-300 text-green-600 focus:ring-green-500"
                      />
                      <span className="text-sm flex-1">
                        üêÇ {bull.enar} - {bull.name || 'N√©vtelen'}
                        {bull.statusz === 'eladott' && (
                          <span className="ml-2 text-xs text-red-600">
                            [ELADOTT]
                          </span>
                        )}
                        {bull.statusz === 'elhullott' && (
                          <span className="ml-2 text-xs text-gray-600">
                            [ELHULLOTT]
                          </span>
                        )}
                      </span>
                    </label>
                  ))}
                </div>
                
                {selectedBulls.length > 0 && (
                  <div className="mt-3 p-2 bg-green-50 border border-green-200 rounded">
                    <p className="text-green-800 text-sm">
                      {selectedBulls.length} teny√©szbika kiv√°lasztva
                      {(() => {
                        const selectedBullsData = availableBulls.filter(bull => selectedBulls.includes(bull.id));
                        const activeBulls = selectedBullsData.filter(b => b.statusz === 'akt√≠v').length;
                        const soldBulls = selectedBullsData.filter(b => b.statusz === 'eladott').length;
                        const deceasedBulls = selectedBullsData.filter(b => b.statusz === 'elhullott').length;
                        
                        const statusParts = [];
                        if (activeBulls > 0) statusParts.push(`${activeBulls} akt√≠v`);
                        if (soldBulls > 0) statusParts.push(`${soldBulls} eladott`);
                        if (deceasedBulls > 0) statusParts.push(`${deceasedBulls} elhullott`);
                        
                        return statusParts.length > 1 ? ` (${statusParts.join(', ')})` : '';
                      })()}
                    </p>
                  </div>
                )}
              </div>
            ) : (
              <div className="p-3 text-gray-500 text-sm border border-gray-200 rounded-lg">
                Nincsenek el√©rhet≈ë teny√©szbik√°k az adatb√°zisban
              </div>
            )}
            <p className="text-xs text-gray-600 mt-2">
              üí° Eladott √©s elhullott teny√©szbik√°k is kiv√°laszthat√≥k t√∂rt√©neti h√°rem peri√≥dus szerkeszt√©s√©hez.
            </p>
          </div>
        )}

        {/* Megjegyz√©s */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            üìù Megjegyz√©sek
          </label>
          <textarea
            value={formData.notes}
            onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
            placeholder="Tov√°bbi megjegyz√©sek a peri√≥dusr√≥l..."
            rows={3}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors"
          />
        </div>
      </div>

      {/* Gombok */}
      <div className="flex justify-end gap-3 mt-8">
        <button
          onClick={onCancel}
          disabled={saving}
          className="bg-white hover:bg-gray-50 text-gray-700 font-medium px-6 py-3 rounded-lg border border-gray-300 transition-colors disabled:opacity-50 inline-flex items-center"
        >
          <span className="mr-2">‚ùå</span>
          M√©gse
        </button>
        <button
          onClick={handleSave}
          disabled={saving || !formData.start_date || !formData.function_type || selectedAnimals.length === 0}
          className="bg-green-600 hover:bg-green-700 text-white font-medium px-6 py-3 rounded-lg transition-colors disabled:opacity-50 inline-flex items-center"
        >
          {saving ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              Ment√©s...
            </>
          ) : (
            <>
              <span className="mr-2">üíæ</span>
              V√°ltoztat√°sok Ment√©se
            </>
          )}
        </button>
      </div>
    </div>
  );
}