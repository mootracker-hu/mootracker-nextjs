// src/components/AddHistoricalPeriod.tsx
// ‚úÖ JAV√çTOTT VERZI√ì - CSAK METADATA, NINCS FIZIKAI MOZGAT√ÅS

'use client';

import { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabase';
import AnimalSelector from './AnimalSelector';
import { broadcastManualPeriodAdded, broadcastPenHistoryUpdate } from '@/lib/penHistorySync';
import { displayEnar } from '@/constants/enar-formatter';

interface AddHistoricalPeriodProps {
  penId: string;
  penNumber: string;
  onSave: () => void;
  onCancel: () => void;
}

export default function AddHistoricalPeriod({
  penId,
  penNumber,
  onSave,
  onCancel
}: AddHistoricalPeriodProps) {
  const [formData, setFormData] = useState({
    start_date: '',
    end_date: '',
    function_type: 'h√°rem',
    notes: ''
  });

  // √Ållatok √©s teny√©szbik√°k state-jei
  const [selectedAnimals, setSelectedAnimals] = useState<number[]>([]);
  const [selectedAnimalsData, setSelectedAnimalsData] = useState<any[]>([]);
  const [selectedBulls, setSelectedBulls] = useState<number[]>([]);
  const [availableBulls, setAvailableBulls] = useState<any[]>([]);
  const [saving, setSaving] = useState(false);

  // Funkci√≥ opci√≥k
  const functionOptions = [
    { value: 'h√°rem', label: 'üíï H√°rem' },
    { value: 'vemhes', label: 'üêÑüíñ Vemhes' },
    { value: 'b√∂lcsi', label: 'üêÆ B√∂lcsi' },
    { value: '√≥vi', label: 'üêÑ √ìvi' },
    { value: 'ellet≈ë', label: 'üêÑüçº Ellet≈ë' },
    { value: 'teh√©n', label: 'üêÑüçº Teh√©n' },
    { value: 'h√≠z√≥bika', label: 'üêÇ H√≠z√≥bika' },
    { value: '√ºres', label: '‚≠ï √úres' },
    { value: '√°tmeneti', label: 'üîÑ √Åtmeneti' },
    { value: 'k√≥rh√°z', label: 'üè• K√≥rh√°z' },
    { value: 'karant√©n', label: 'üîí Karant√©n' },
    { value: 'selejt', label: 'üì¶ Selejt' }
  ];

  // Kiv√°lasztott √°llatok adatainak lek√©rdez√©se
  useEffect(() => {
    if (selectedAnimals.length > 0) {
      loadSelectedAnimalsData();
    } else {
      setSelectedAnimalsData([]);
    }
  }, [selectedAnimals]);

  const loadSelectedAnimalsData = async () => {
    try {
      const { data, error } = await supabase
        .from('animals')
        .select('id, enar, kategoria, ivar, szuletesi_datum, statusz')
        .in('id', selectedAnimals);

      if (error) throw error;
      setSelectedAnimalsData(data || []);
    } catch (error) {
      console.error('‚ùå Kiv√°lasztott √°llatok adatainak lek√©rdez√©se sikertelen:', error);
    }
  };

  // Teny√©szbik√°k bet√∂lt√©se (akt√≠v, eladott, elhullott)
  useEffect(() => {
    loadAvailableBulls();
  }, []);

  const loadAvailableBulls = async () => {
    try {
      const { data, error } = await supabase
        .from('animals')
        .select('id, enar, name, kategoria, statusz')
        .eq('kategoria', 'teny√©szbika')
        .in('statusz', ['akt√≠v', 'eladott', 'elhullott'])
        .order('enar');

      if (error) throw error;
      setAvailableBulls(data || []);
    } catch (error) {
      console.error('‚ùå Teny√©szbik√°k bet√∂lt√©se sikertelen:', error);
    }
  };

  const handleSave = async () => {
    // Valid√°ci√≥
    if (!formData.start_date || !formData.function_type) {
      alert('‚ö†Ô∏è K√©rlek t√∂ltsd ki a k√∂telez≈ë mez≈ëket!');
      return;
    }

    if (selectedAnimals.length === 0) {
      alert('‚ö†Ô∏è Legal√°bb egy √°llatot ki kell v√°lasztani!');
      return;
    }

    setSaving(true);

    try {
      console.log('üìö T√ñRT√âNETI METADATA MENT√âS (fizikai mozgat√°s n√©lk√ºl):', {
        selectedAnimals: selectedAnimals.length,
        functionType: formData.function_type,
        physicalMovement: false // ‚ö†Ô∏è FONTOS: NINCS FIZIKAI MOZGAT√ÅS!
      });

      // ‚úÖ TISZTA METADATA √ñSSZE√ÅLL√çT√ÅSA (fizikai mozgat√°s n√©lk√ºl)
      const metadata: any = {
        animal_count: selectedAnimalsData.length,
        manual_entry: true,
        entry_date: new Date().toISOString(),
        selected_animal_ids: selectedAnimals,
        historical_only: true, // ‚ö†Ô∏è CSAK T√ñRT√âNETI DOKUMENT√ÅCI√ì!
        no_physical_movement: true // ‚ö†Ô∏è FIZIKAI MOZGAT√ÅS TILTVA!
      };

      // H√°rem specifikus metadata
      if (formData.function_type === 'h√°rem' && selectedBulls.length > 0) {
        const selectedBullsData = availableBulls.filter(bull =>
          selectedBulls.includes(bull.id)
        );

        metadata.bulls = selectedBullsData.map(bull => ({
          id: bull.id,
          enar: bull.enar,
          name: bull.name || 'N√©vtelen',
          kplsz: bull.kplsz || '',
          sold_status: bull.statusz === 'eladott' ? {
            sold_date: bull.sold_date,
            sold_to: bull.sold_to
          } : null
        }));
        metadata.bull_count = selectedBullsData.length;

        // N≈ëivarok √©s bik√°k sz√©tv√°laszt√°sa
        const bulls = selectedAnimalsData.filter(a => a.kategoria === 'teny√©szbika') || [];
        const females = selectedAnimalsData.filter(a => a.kategoria !== 'teny√©szbika') || [];

        metadata.bull_count_actual = bulls.length;
        metadata.female_count = females.length;
        metadata.selected_bulls = selectedBullsData;
      }

      // Kateg√≥ria √∂sszes√≠t≈ë
      const categoryStats: Record<string, number> = {};
      selectedAnimalsData.forEach(animal => {
        categoryStats[animal.kategoria] = (categoryStats[animal.kategoria] || 0) + 1;
      });
      metadata.category_breakdown = categoryStats;

      // Nem akt√≠v √°llatok kezel√©se
      const soldAnimals = selectedAnimalsData.filter(a => a.statusz === 'eladott');
      const deceasedAnimals = selectedAnimalsData.filter(a => a.statusz === 'elhullott');
      const inactiveAnimals = [...soldAnimals, ...deceasedAnimals];

      if (inactiveAnimals.length > 0) {
        metadata.inactive_animals_count = inactiveAnimals.length;
        metadata.sold_animals_count = soldAnimals.length;
        metadata.deceased_animals_count = deceasedAnimals.length;
        metadata.contains_inactive_animals = true;
        metadata.inactive_animals = inactiveAnimals.map(a => ({
          id: a.id,
          enar: a.enar,
          statusz: a.statusz
        }));
      }

      // ‚úÖ T√ñRT√âNETI PERI√ìDUS MENT√âSE (CSAK METADATA!)
      // ‚ùå NINCS animal_pen_assignments M√ìDOS√çT√ÅS!
      // ‚ùå NINCS animals.jelenlegi_karam FRISS√çT√âS!
      // ‚ùå NINCS FIZIKAI MOZGAT√ÅS!

      const { error: insertError } = await supabase
        .from('pen_history_periods')
        .insert({
          pen_id: penId,
          function_type: formData.function_type,
          start_date: formData.start_date,
          end_date: formData.end_date || null,
          animals_snapshot: selectedAnimalsData, // Csak adatok ment√©se!
          metadata: metadata,
          notes: formData.notes || null,
          historical: true // ‚ö†Ô∏è T√ñRT√âNETI JEL√ñL√âS!
        });

      if (insertError) {
        throw new Error(`Ment√©si hiba: ${insertError.message}`);
      }

      console.log('‚úÖ T√∂rt√©neti peri√≥dus (CSAK METADATA) sikeresen mentve');

      // √öJ:
      broadcastPenHistoryUpdate(penId, 'period_added', {
        functionType: formData.function_type,
        animalCount: selectedAnimalsData.length,
        historicalOnly: true
      });

      // Sikeres ment√©s √ºzenet
      const categoryBreakdown = Object.entries(categoryStats)
        .map(([kategoria, count]) => `${kategoria}: ${count}`)
        .join(', ');

      const soldInfo = inactiveAnimals.length > 0
        ? `\n\nüìã Nem akt√≠v √°llatok: ${inactiveAnimals.length} db (${soldAnimals.length} eladott, ${deceasedAnimals.length} elhullott)`
        : '';

      alert(`‚úÖ T√∂rt√©neti peri√≥dus sikeresen dokument√°lva!

‚ö†Ô∏è CSAK DOKUMENT√ÅCI√ìS C√âL√ö - fizikai mozgat√°s nem t√∂rt√©nt!

Peri√≥dus: ${formData.function_type}
√Ållatok: ${selectedAnimalsData.length} db dokument√°lva
Kateg√≥ri√°k: ${categoryBreakdown}
Id≈ëszak: ${formData.start_date} - ${formData.end_date || 'folyamatban'}${soldInfo}

üí° Val√≥di √°llat mozgat√°shoz haszn√°ld a kar√°m oldal "üîÑ Mozgat√°s" gombj√°t!`);

      onSave();

    } catch (error) {
      console.error('‚ùå T√∂rt√©neti dokument√°l√°si hiba:', error);
      alert(`‚ùå Hiba t√∂rt√©nt a dokument√°l√°s sor√°n:\n${error instanceof Error ? error.message : 'Ismeretlen hiba'}`);
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-lg border p-6 max-w-4xl mx-auto">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center">
          <span className="text-2xl mr-3">üìö</span>
          <h3 className="text-xl font-bold text-gray-900">
            T√∂rt√©neti Peri√≥dus Dokument√°l√°sa
          </h3>
        </div>
        <div className="text-sm text-gray-500">
          Kar√°m {penNumber}
        </div>
      </div>

      {/* ‚ö†Ô∏è NAGY FIGYELMEZTET√âS - M√ìDOS√çTOTT */}
      <div className="bg-amber-50 p-4 rounded-lg border-2 border-amber-400 mb-6">
        <div className="flex items-start">
          <span className="text-2xl mr-3">‚ö†Ô∏è</span>
          <div>
            <h4 className="font-bold text-amber-800 text-lg">Csak T√∂rt√©neti Dokument√°ci√≥!</h4>
            <p className="text-amber-700 mt-2">
              Ez a funkci√≥ <strong>kiz√°r√≥lag dokument√°ci√≥s c√©l√∫</strong>.
              <strong className="text-red-700"> Fizikai √°llat mozgat√°s NEM t√∂rt√©nik!</strong>
            </p>
            <p className="text-amber-600 text-sm mt-2">
              üí° Val√≥di √°llat mozgat√°shoz haszn√°ld a kar√°m oldal <strong>"üîÑ √Ållatok Mozgat√°sa"</strong> gombj√°t!
            </p>
          </div>
        </div>
      </div>

      <div className="space-y-6">
        {/* Id≈ëszak */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              üìÖ Kezdet d√°tum *
            </label>
            <input
              type="date"
              value={formData.start_date}
              onChange={(e) => setFormData({ ...formData, start_date: e.target.value })}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              üìÖ V√©g d√°tum
            </label>
            <input
              type="date"
              value={formData.end_date}
              onChange={(e) => setFormData({ ...formData, end_date: e.target.value })}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors"
              placeholder="√úres = folyamatban"
            />
            <p className="text-xs text-gray-500 mt-1">
              üí° Ha √ºres marad, akkor "folyamatban" lesz
            </p>
          </div>
        </div>

        {/* Funkci√≥ t√≠pus */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            üéØ Funkci√≥ t√≠pus *
          </label>
          <select
            value={formData.function_type}
            onChange={(e) => setFormData({ ...formData, function_type: e.target.value })}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors bg-white"
            required
          >
            {functionOptions.map(option => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        {/* √Ållatok kiv√°laszt√°sa - FIGYELMEZTET√âSSEL */}
        <div>
          <AnimalSelector
            penId={penId}
            selected={selectedAnimals}
            onChange={setSelectedAnimals}
            multiSelect={true}
            currentOnly={false}
            includeSoldAnimals={true}
            label="üêÑ √Ållatok dokument√°l√°sa * (akt√≠v, eladott √©s elhullott √°llatok)"
            placeholder="Keres√©s ENAR, kateg√≥ria alapj√°n... (csak dokument√°ci√≥hoz)"
            maxHeight="max-h-80"
          />

          {/* ‚ö†Ô∏è ER≈êS FIGYELMEZTET√âS */}
          <div className="bg-red-50 p-3 rounded-lg border-2 border-red-300 mt-3">
            <div className="flex items-start">
              <span className="text-lg mr-2">üö´</span>
              <div>
                <h5 className="font-medium text-red-800">Fontos - Csak Dokument√°ci√≥!</h5>
                <p className="text-sm text-red-700 mt-1">
                  A kiv√°lasztott √°llatok jelenlegi kar√°m hozz√°rendel√©se <strong>NEM v√°ltozik</strong>.
                  Ez csak t√∂rt√©neti dokument√°ci√≥, nem val√≥di mozgat√°s!
                </p>
              </div>
            </div>
          </div>

          <p className="text-xs text-gray-600 mt-2">
            üìö <strong>T√∂rt√©neti dokument√°ci√≥:</strong> Eladott √©s elhullott √°llatok is kiv√°laszthat√≥k
            kar√°mt√∂rt√©net dokument√°l√°s√°hoz.
          </p>
        </div>

        {/* Kiv√°lasztott √°llatok √∂sszes√≠t≈ë */}
        {selectedAnimalsData.length > 0 && (
          <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <h4 className="font-medium text-blue-900 mb-2">
              üìä Dokument√°land√≥ √°llatok ({selectedAnimalsData.length} db)
            </h4>

            {/* St√°tusz szerinti bont√°s */}
            {(() => {
              const activeCount = selectedAnimalsData.filter(a => a.statusz === 'akt√≠v').length;
              const soldCount = selectedAnimalsData.filter(a => a.statusz === 'eladott').length;
              const deceasedCount = selectedAnimalsData.filter(a => a.statusz === 'elhullott').length;

              return (
                <div className="mb-3 p-2 bg-white rounded border">
                  <p className="text-sm font-medium text-gray-700 mb-1">St√°tusz megoszl√°s:</p>
                  <div className="flex gap-4 text-sm">
                    <span className="text-green-700">‚úÖ Akt√≠v: {activeCount} db</span>
                    {soldCount > 0 && (
                      <span className="text-red-700">üì¶ Eladott: {soldCount} db</span>
                    )}
                    {deceasedCount > 0 && (
                      <span className="text-gray-700">üíÄ Elhullott: {deceasedCount} db</span>
                    )}
                  </div>
                  <p className="text-xs text-blue-600 mt-1">
                    üìö Minden √°llat csak t√∂rt√©neti dokument√°ci√≥k√©nt ker√ºl r√∂gz√≠t√©sre.
                  </p>
                </div>
              );
            })()}

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div>
                <p className="font-medium text-blue-800">Kateg√≥ri√°k:</p>
                <ul className="text-blue-700">
                  {(() => {
                    const categoryStats: Record<string, number> = {};
                    selectedAnimalsData.forEach(animal => {
                      categoryStats[animal.kategoria] = (categoryStats[animal.kategoria] || 0) + 1;
                    });

                    return Object.entries(categoryStats).map(([kategoria, count]) => (
                      <li key={kategoria}>‚Ä¢ {kategoria}: {count} db</li>
                    ));
                  })()}
                </ul>
              </div>
              <div>
                <p className="font-medium text-blue-800">Ivarok:</p>
                <ul className="text-blue-700">
                  {(() => {
                    const ivarStats: Record<string, number> = {};
                    selectedAnimalsData.forEach(animal => {
                      ivarStats[animal.ivar] = (ivarStats[animal.ivar] || 0) + 1;
                    });

                    return Object.entries(ivarStats).map(([ivar, count]) => (
                      <li key={ivar}>‚Ä¢ {ivar}: {count} db</li>
                    ));
                  })()}
                </ul>
              </div>
            </div>
          </div>
        )}

        {/* H√°rem specifikus mez≈ë - METADATA FIGYELMEZTET√âSSEL */}
        {formData.function_type === 'h√°rem' && (
          <div className="bg-pink-50 p-4 rounded-lg border border-pink-200">
            <h4 className="text-lg font-medium text-pink-900 mb-2 flex items-center">
              üíï H√°rem Metadata (csak dokument√°ci√≥)
            </h4>

            <p className="text-sm text-pink-700 mb-4">
              ‚ö†Ô∏è Ez csak t√∂rt√©neti dokument√°ci√≥ - teny√©szbik√°k fizikai hozz√°rendel√©se <strong>NEM t√∂rt√©nik</strong>!
            </p>

            <label className="block text-sm font-medium text-gray-700 mb-2">
              üêÇ Teny√©szbik√°k dokument√°l√°sa (akt√≠v √©s eladott)
            </label>

            {availableBulls.length > 0 ? (
              <div className="border border-gray-300 rounded-lg p-3 max-h-48 overflow-y-auto">
                <div className="space-y-2">
                  {availableBulls.map(bull => (
                    <label key={bull.id} className={`flex items-center ${bull.statusz === 'eladott' ? 'bg-red-50 p-2 rounded border border-red-200' : ''}`}>
                      <input
                        type="checkbox"
                        checked={selectedBulls.includes(bull.id)}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setSelectedBulls([...selectedBulls, bull.id]);
                          } else {
                            setSelectedBulls(selectedBulls.filter(id => id !== bull.id));
                          }
                        }}
                        className="mr-3 rounded border-gray-300 text-green-600 focus:ring-green-500"
                      />
                      <span className="text-sm flex-1">
                        üêÇ {bull.enar} - {bull.name || 'N√©vtelen'}
                        {bull.statusz === 'eladott' && (
                          <span className="ml-2 text-xs text-red-600">
                            [ELADOTT]
                          </span>
                        )}
                      </span>
                    </label>
                  ))}
                </div>

                {selectedBulls.length > 0 && (
                  <div className="mt-3 p-2 bg-green-50 border border-green-200 rounded">
                    <p className="text-green-800 text-sm">
                      {selectedBulls.length} teny√©szbika dokument√°lva (csak metadata)
                      {(() => {
                        const selectedBullsData = availableBulls.filter(bull => selectedBulls.includes(bull.id));
                        const activeBulls = selectedBullsData.filter(b => b.statusz === 'akt√≠v').length;
                        const soldBulls = selectedBullsData.filter(b => b.statusz === 'eladott').length;

                        return soldBulls > 0 ? ` (${activeBulls} akt√≠v, ${soldBulls} eladott)` : '';
                      })()}
                    </p>
                  </div>
                )}
              </div>
            ) : (
              <div className="p-3 text-gray-500 text-sm border border-gray-200 rounded-lg">
                Nincsenek el√©rhet≈ë teny√©szbik√°k az adatb√°zisban
              </div>
            )}
            <p className="text-xs text-gray-600 mt-2">
              üìö Csak metadata dokument√°ci√≥ - fizikai bika hozz√°rendel√©s nem t√∂rt√©nik.
            </p>
          </div>
        )}

        {/* Megjegyz√©s */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            üìù Megjegyz√©sek
          </label>
          <textarea
            value={formData.notes}
            onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
            placeholder="Tov√°bbi megjegyz√©sek a t√∂rt√©neti peri√≥dusr√≥l..."
            rows={3}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors"
          />
        </div>
      </div>

      {/* Gombok */}
      <div className="flex justify-end gap-3 mt-8">
        <button
          onClick={onCancel}
          disabled={saving}
          className="bg-white hover:bg-gray-50 text-gray-700 font-medium px-6 py-3 rounded-lg border border-gray-300 transition-colors disabled:opacity-50 inline-flex items-center"
        >
          <span className="mr-2">‚ùå</span>
          M√©gse
        </button>
        <button
          onClick={handleSave}
          disabled={saving || !formData.start_date || !formData.function_type || selectedAnimals.length === 0}
          className="bg-amber-600 hover:bg-amber-700 text-white font-medium px-6 py-3 rounded-lg transition-colors disabled:opacity-50 inline-flex items-center"
        >
          {saving ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              Dokument√°l√°s...
            </>
          ) : (
            <>
              <span className="mr-2">üìö</span>
              T√∂rt√©neti Dokument√°l√°s (Csak Metadata)
            </>
          )}
        </button>
      </div>
    </div>
  );
}