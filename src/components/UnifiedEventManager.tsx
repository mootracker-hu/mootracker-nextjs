// üéØ EGYS√âGES T√ñRT√âNET KEZEL≈ê - JAV√çTOTT TENY√âSZBIKA BET√ñLT√âS
// src/components/UnifiedEventManager.tsx

import React, { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabase';
import { Plus, Edit3, Trash2, Calendar, MapPin, Users, FileText } from 'lucide-react';

// üìä INTERFACES
interface AnimalEvent {
  id: string;
  animal_id: number;
  event_type: 'pen_assignment' | 'pen_movement' | 'function_change' | 'breeding_start' | 'breeding_end' | 'vv_check' | 'birth' | 'health_event';
  event_date: string;
  event_time: string;
  pen_id?: string;
  previous_pen_id?: string;
  pen_function?: string;
  function_metadata: any;
  reason?: string;
  notes?: string;
  is_historical: boolean;
  created_at: string;
  // Relations
  animals?: { enar: string; kategoria: string };
  pens?: { pen_number: string; location: string };
  previous_pen?: { pen_number: string; location: string };
}

interface UnifiedEventProps {
  mode: 'animal' | 'pen' | 'view-only';
  animalId?: number;
  animalEnar?: string;
  penId?: string;
  allowEdit?: boolean;
  maxHeight?: string;
}

interface EventFormData {
  event_type: string;
  event_date: string;
  event_time: string;
  pen_id: string;
  previous_pen_id: string;
  pen_function: string;
  reason: string;
  notes: string;
  is_historical: boolean;
  // H√°rem specifikus
  bulls: Array<{ enar: string; name: string; kplsz: string; id?: string }>;
  pairing_start_date: string;
  expected_vv_date: string;
  breeding_method: string;
}

const UnifiedEventManager: React.FC<UnifiedEventProps> = ({ 
  mode, 
  animalId, 
  animalEnar,
  penId, 
  allowEdit = true,
  maxHeight = "500px"
}) => {
  // STATE MANAGEMENT
  const [events, setEvents] = useState<AnimalEvent[]>([]);
  const [loading, setLoading] = useState(true);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editingEvent, setEditingEvent] = useState<AnimalEvent | null>(null);
  const [availablePens, setAvailablePens] = useState<any[]>([]);
  const [availableBulls, setAvailableBulls] = useState<any[]>([]);
  const [bullsLoading, setBullsLoading] = useState(false);
  
  // FORM STATE
  const [formData, setFormData] = useState<EventFormData>({
    event_type: 'pen_movement',
    event_date: new Date().toISOString().split('T')[0],
    event_time: '12:00',
    pen_id: '',
    previous_pen_id: '',
    pen_function: '',
    reason: '',
    notes: '',
    is_historical: false,
    bulls: [],
    pairing_start_date: '',
    expected_vv_date: '',
    breeding_method: 'natural'
  });

  // EFFECTS
  useEffect(() => {
    fetchEvents();
    fetchAvailablePens();
  }, [animalId, penId, mode]);

  // VV D√ÅTUM AUTOMATIKUS SZ√ÅM√çT√ÅS
  useEffect(() => {
    if (formData.pairing_start_date) {
      const pairingDate = new Date(formData.pairing_start_date);
      pairingDate.setDate(pairingDate.getDate() + 75); // 75 nap m√∫lva
      setFormData(prev => ({
        ...prev,
        expected_vv_date: pairingDate.toISOString().split('T')[0]
      }));
    }
  }, [formData.pairing_start_date]);

  // üìã OK FORD√çT√ÅS MAGYAR MEGJELEN√çT√âSHEZ
  const translateReason = (reason: string): string => {
    const reasonMap: { [key: string]: string } = {
      'age_separation': 'üéÇ √âletkor alap√∫ v√°lt√°s',
      'breeding': 'üíï Teny√©szt√©sbe √°ll√≠t√°s', 
      'pregnancy': 'ü§∞ Vemhess√©g',
      'birthing': 'üçº Ell√©s el≈ëk√©sz√≠t√©s',
      'health': 'üè• Eg√©szs√©g√ºgyi ok',
      'capacity': 'üìä Kapacit√°s probl√©ma',
      'function_change': 'üîÑ Funkci√≥ v√°lt√°s',
      'management': 'üìã Gazd√°lkod√°si d√∂nt√©s',
      'seasonal': 'üåÖ Szezon√°lis v√°lt√°s',
      'grouping': 'üë• Csoportos√≠t√°s',
      'maintenance': 'üîß Kar√°m karbantart√°s',
      'veterinary': 'üë®‚Äç‚öïÔ∏è √Ållatorvosi utas√≠t√°s',
      'feeding': 'üåæ Takarm√°nyoz√°si ok',
      'safety': '‚ö†Ô∏è Biztons√°gi ok',
      'other': '‚ùì Egy√©b ok'
    };
    
    return reasonMap[reason] || reason; // Ha nincs ford√≠t√°s, eredeti
  };

  // üìä JAV√çTOTT ADATOK BET√ñLT√âSE
  const fetchEvents = async () => {
    try {
      setLoading(true);
      
      console.log('üîç FetchEvents ind√≠t√°sa:', { mode, animalId, penId });
      
      let query = supabase
        .from('animal_events')
        .select(`
          id,
          animal_id,
          event_type,
          event_date,
          event_time,
          pen_id,
          previous_pen_id,
          pen_function,
          function_metadata,
          reason,
          notes,
          is_historical,
          created_at,
          animals!animal_id(enar, kategoria),
          current_pen:pens!pen_id(pen_number, location),
          previous_pen:pens!previous_pen_id(pen_number, location)
        `)
        .order('event_date', { ascending: false })
        .order('created_at', { ascending: false });

      // Sz≈±r√©s m√≥d szerint  
      if (mode === 'animal' && animalId) {
        console.log('üêÑ Sz≈±r√©s √°llatra:', animalId);
        query = query.eq('animal_id', animalId);
      } else if (mode === 'pen' && penId) {
        console.log('üè† Sz≈±r√©s kar√°mra:', penId);
        query = query.eq('pen_id', penId);
      }

      const { data, error } = await query;
      
      if (error) {
        console.error('‚ùå Query hiba r√©szletek:', {
          message: error.message,
          code: error.code,
          details: error.details,
          hint: error.hint
        });
        
        // Ha a t√°bla nem l√©tezik, √ºres list√°t adunk vissza
        if (error.code === '42P01') {
          console.warn('‚ö†Ô∏è animal_events t√°bla nem tal√°lhat√≥ - √ºres lista');
          setEvents([]);
          return;
        }
        
        throw error;
      }
      
      console.log(`‚úÖ ${mode} esem√©nyek bet√∂ltve:`, data?.length || 0, data);
      
      // ‚≠ê ADATOK NORMALIZ√ÅL√ÅSA a komponens sz√°m√°ra
      const normalizedEvents = (data || []).map((event: any) => ({
        ...event,
        animals: event.animals,
        pens: event.current_pen,
        previous_pen: event.previous_pen
      }));
      
      setEvents(normalizedEvents);
      
    } catch (error) {
      console.error('‚ùå FetchEvents hiba:', error);
      setEvents([]);
    } finally {
      setLoading(false);
    }
  };

  // üêÇ JAV√çTOTT TENY√âSZBIKA √âS KAR√ÅM BET√ñLT√âS
  const fetchAvailablePens = async () => {
    try {
      console.log('üè† Karamok √©s teny√©szbik√°k bet√∂lt√©se...');
      setBullsLoading(true);
      
      // KARAMOK BET√ñLT√âSE
      const { data: pensData, error: pensError } = await supabase
        .from('pens')
        .select('id, pen_number, location, pen_type')
        .order('pen_number');
      
      if (pensError) {
        console.error('‚ùå Karamok bet√∂lt√©si hiba:', pensError);
      } else {
        console.log('‚úÖ Karamok bet√∂ltve:', pensData?.length, pensData);
        setAvailablePens(pensData || []);
      }

      // üêÇ TENY√âSZBIK√ÅK BET√ñLT√âSE - K√úL√ñN BULLS T√ÅBLA
      console.log('üêÇ Teny√©szbik√°k bet√∂lt√©se a bulls t√°bl√°b√≥l...');
      
      // ‚≠ê HELYES T√ÅBL√ÅB√ìL: bulls (nem animals!)
      const { data: bullsData, error: bullsError } = await supabase
        .from('bulls')
        .select('id, name, enar, kplsz, active, notes')
        .eq('active', true)
        .order('name');

      console.log('üêÇ Bulls t√°bla eredm√©nye:', {
        count: bullsData?.length || 0,
        error: bullsError,
        data: bullsData
      });

      if (bullsError) {
        console.error('‚ùå Bulls t√°bla bet√∂lt√©si hiba:', bullsError);
        setAvailableBulls([]);
      } else {
        console.log('‚úÖ Bulls t√°bla bet√∂ltve:', bullsData?.length, bullsData);
        
        // ‚≠ê BULLS T√ÅBLA FORM√ÅZ√ÅSA (m√°r j√≥ oszlopnevek)
        const formattedBulls = (bullsData || []).map((bull: any) => ({
          id: bull.id,
          enar: bull.enar || 'Nincs ENAR',
          name: bull.name || 'N√©vtelen teny√©szbika',
          kplsz: bull.kplsz || 'Nincs KPLSZ',
          active: bull.active,
          notes: bull.notes
        }));
        
        console.log('üêÇ Form√°zott bik√°k a bulls t√°bl√°b√≥l:', formattedBulls);
        setAvailableBulls(formattedBulls);
      }
      
    } catch (error) {
      console.error('‚ùå Karamok/bik√°k bet√∂lt√©si hiba:', error);
      setAvailablePens([]);
      setAvailableBulls([]);
    } finally {
      setBullsLoading(false);
    }
  };

  const getEventTitle = (event: AnimalEvent) => {
    switch (event.event_type) {
      case 'pen_assignment':
        return `üìç Kar√°m hozz√°rendel√©s - ${event.pens?.pen_number}`;
      case 'pen_movement':
        return `üîÑ Mozgat√°s: ${event.previous_pen?.pen_number || '?'} ‚Üí ${event.pens?.pen_number}`;
      case 'function_change':
        return `üè† Funkci√≥ v√°lt√°s - ${event.pen_function}`;
      case 'breeding_start':
        return `üíï H√°rem kezdete - ${event.pens?.pen_number}`;
      case 'breeding_end':
        return `üèÅ H√°rem v√©ge - ${event.pens?.pen_number}`;
      case 'vv_check':
        return `üîç VV vizsg√°lat`;
      case 'birth':
        return `üçº Ell√©s`;
      case 'health_event':
        return `üè• Eg√©szs√©g√ºgyi esem√©ny`;
      default:
        return `üìã ${event.event_type}`;
    }
  };

  const getEventColor = (event: AnimalEvent) => {
    if (event.is_historical) return 'bg-blue-50 border-blue-200';
    
    switch (event.event_type) {
      case 'breeding_start':
      case 'breeding_end':
        return 'bg-pink-50 border-pink-200';
      case 'pen_movement':
        return 'bg-green-50 border-green-200';
      case 'function_change':
        return 'bg-yellow-50 border-yellow-200';
      case 'vv_check':
        return 'bg-purple-50 border-purple-200';
      case 'birth':
        return 'bg-orange-50 border-orange-200';
      case 'health_event':
        return 'bg-red-50 border-red-200';
      default:
        return 'bg-gray-50 border-gray-200';
    }
  };

  // üíæ CRUD M≈∞VELETEK
  const openEditModal = (event?: AnimalEvent) => {
    if (event) {
      setEditingEvent(event);
      setFormData({
        event_type: event.event_type,
        event_date: event.event_date,
        event_time: event.event_time,
        pen_id: event.pen_id || '',
        previous_pen_id: event.previous_pen_id || '',
        pen_function: event.pen_function || '',
        reason: event.reason || '',
        notes: event.notes || '',
        is_historical: event.is_historical,
        bulls: event.function_metadata?.bulls || [],
        pairing_start_date: event.function_metadata?.pairing_start_date || '',
        expected_vv_date: event.function_metadata?.expected_vv_date || '',
        breeding_method: event.function_metadata?.breeding_method || 'natural'
      });
    } else {
      setEditingEvent(null);
      setFormData({
        event_type: 'pen_movement',
        event_date: new Date().toISOString().split('T')[0],
        event_time: '12:00',
        pen_id: '',
        previous_pen_id: '',
        pen_function: '',
        reason: '',
        notes: '',
        is_historical: false,
        bulls: [],
        pairing_start_date: '',
        expected_vv_date: '',
        breeding_method: 'natural'
      });
    }
    setShowEditModal(true);
  };

  const handleSave = async () => {
    try {
      // ‚≠ê H√ÅREM METADATA √ñSSZE√ÅLL√çT√ÅSA
      let metadata: any = {};
      
      if (formData.pen_function === 'h√°rem' || formData.event_type === 'breeding_start') {
        metadata = {
          bulls: formData.bulls,
          pairing_start_date: formData.pairing_start_date,
          expected_vv_date: formData.expected_vv_date,
          breeding_method: formData.breeding_method
        };
        
        console.log('üíï H√°rem metadata √∂ssze√°ll√≠tva:', metadata);
      }

      const eventData = {
        animal_id: animalId,
        event_type: formData.event_type,
        event_date: formData.event_date,
        event_time: formData.event_time,
        pen_id: formData.pen_id || null,
        previous_pen_id: formData.previous_pen_id || null,
        pen_function: formData.pen_function || null,
        function_metadata: metadata,
        reason: formData.reason || null,
        notes: formData.notes || null,
        is_historical: formData.is_historical
      };

      console.log('üíæ Mentend≈ë esem√©ny adatok:', eventData);

      if (editingEvent) {
        // Friss√≠t√©s
        const { error } = await supabase
          .from('animal_events')
          .update(eventData)
          .eq('id', editingEvent.id);
        
        if (error) throw error;
        
        alert('‚úÖ Esem√©ny sikeresen friss√≠tve!');
      } else {
        // √öj l√©trehoz√°s
        const { error } = await supabase
          .from('animal_events')
          .insert(eventData);
        
        if (error) throw error;
        
        alert('‚úÖ √öj esem√©ny sikeresen r√∂gz√≠tve!');
      }

      setShowEditModal(false);
      setEditingEvent(null);
      fetchEvents();
      
    } catch (error) {
      console.error('‚ùå Esem√©ny ment√©si hiba:', error);
      alert('‚ùå Hiba t√∂rt√©nt az esem√©ny ment√©sekor!');
    }
  };

  const handleDelete = async (event: AnimalEvent) => {
    if (!confirm(`üóëÔ∏è Biztosan t√∂r√∂lni akarod ezt az esem√©nyt?\n\n${getEventTitle(event)}\nD√°tum: ${event.event_date}`)) {
      return;
    }

    try {
      const { error } = await supabase
        .from('animal_events')
        .delete()
        .eq('id', event.id);
      
      if (error) throw error;
      
      alert('‚úÖ Esem√©ny sikeresen t√∂r√∂lve!');
      fetchEvents();
      
    } catch (error) {
      console.error('‚ùå Esem√©ny t√∂rl√©si hiba:', error);
      alert('‚ùå Hiba t√∂rt√©nt az esem√©ny t√∂rl√©sekor!');
    }
  };

  // üéØ RENDERING
  if (loading) {
    return (
      <div className="flex items-center justify-center py-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600"></div>
        <span className="ml-3 text-gray-600">Esem√©nyek bet√∂lt√©se...</span>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {/* FEJL√âC */}
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold flex items-center">
          {mode === 'animal' && (
            <>üìã √Ållat Kar√°mt√∂rt√©nete ({events.length})</>
          )}
          {mode === 'pen' && (
            <>üè† Kar√°m Esem√©nyt√∂rt√©nete ({events.length})</>
          )}
          {mode === 'view-only' && (
            <>üëÅÔ∏è T√∂rt√©net ({events.length})</>
          )}
          {animalEnar && (
            <span className="ml-2 text-sm text-gray-600 font-mono">{animalEnar}</span>
          )}
        </h3>

        {allowEdit && mode !== 'view-only' && (
          <button
            onClick={() => openEditModal()}
            className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center text-sm"
          >
            <Plus className="h-4 w-4 mr-2" />
            √öj Esem√©ny
          </button>
        )}
      </div>

      {/* ESEM√âNYEK LIST√ÅJA */}
      <div 
        className="space-y-3 overflow-y-auto"
        style={{ maxHeight }}
      >
        {events.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            <div className="text-4xl mb-2">üìã</div>
            <p>M√©g nincsenek r√∂gz√≠tett esem√©nyek</p>
            {allowEdit && (
              <button
                onClick={() => openEditModal()}
                className="mt-3 text-green-600 hover:text-green-800 text-sm"
              >
                ‚ûï Els≈ë esem√©ny r√∂gz√≠t√©se
              </button>
            )}
          </div>
        ) : (
          events.map((event) => (
            <div 
              key={event.id} 
              className={`border rounded-lg p-4 ${getEventColor(event)}`}
            >
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  {/* Esem√©ny c√≠m */}
                  <div className="flex items-center mb-2">
                    <span className="text-xl mr-2">
                      {(() => {
                        switch (event.event_type) {
                          case 'pen_assignment': return 'üìç';
                          case 'pen_movement': return 'üîÑ';
                          case 'function_change': 
                            return event.pen_function === 'h√°rem' ? 'üíï' : 
                                   event.pen_function === 'vemhes' ? 'ü§∞' : 'üîÑ';
                          case 'breeding_start': return 'üíï';
                          case 'breeding_end': return 'üèÅ';
                          case 'vv_check': return 'üîç';
                          case 'birth': return 'üçº';
                          case 'health_event': return 'üè•';
                          default: return 'üìã';
                        }
                      })()}
                    </span>
                    <h4 className="font-medium text-gray-900">
                      {getEventTitle(event)}
                    </h4>
                    {event.is_historical && (
                      <span className="ml-2 px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">
                        üìö T√∂rt√©neti
                      </span>
                    )}
                  </div>

                  {/* R√©szletek */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                    <div className="flex items-center text-gray-600">
                      <Calendar className="h-4 w-4 mr-2" />
                      {new Date(event.event_date).toLocaleDateString('hu-HU')} {event.event_time}
                    </div>
                    
                    {mode === 'pen' && event.animals && (
                      <div className="flex items-center text-gray-600">
                        <Users className="h-4 w-4 mr-2" />
                        {event.animals.enar} ({event.animals.kategoria})
                      </div>
                    )}
                    
                    {event.pens && (
                      <div className="flex items-center text-gray-600">
                        <MapPin className="h-4 w-4 mr-2" />
                        {event.pens.pen_number} ({event.pens.location})
                      </div>
                    )}
                    
                    {event.reason && (
                      <div className="flex items-center text-gray-600">
                        <FileText className="h-4 w-4 mr-2" />
                        {translateReason(event.reason)}
                      </div>
                    )}
                  </div>

                  {/* H√°rem specifikus adatok */}
                  {(event.pen_function === 'h√°rem' || event.event_type === 'breeding_start') && 
                   event.function_metadata && Object.keys(event.function_metadata).length > 0 && (
                    <div className="mt-3 p-3 bg-white bg-opacity-60 rounded border border-pink-300">
                      <h5 className="font-medium text-pink-900 mb-2">üíï H√°rem Adatok:</h5>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
                        {event.function_metadata.bulls && event.function_metadata.bulls.length > 0 && (
                          <div>
                            <span className="text-pink-700">üêÇ Teny√©szbik√°k:</span>
                            <div className="ml-4">
                              {event.function_metadata.bulls.map((bull: any, i: number) => (
                                <div key={i} className="text-gray-700">
                                  {bull.name} ({bull.enar})
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                        {event.function_metadata.pairing_start_date && (
                          <div>
                            <span className="text-pink-700">üíï P√°rz√°si kezdet:</span>
                            <span className="ml-2 text-gray-700">
                              {new Date(event.function_metadata.pairing_start_date).toLocaleDateString('hu-HU')}
                            </span>
                          </div>
                        )}
                        {event.function_metadata.expected_vv_date && (
                          <div>
                            <span className="text-pink-700">üîç VV tervezett:</span>
                            <span className="ml-2 text-gray-700">
                              {new Date(event.function_metadata.expected_vv_date).toLocaleDateString('hu-HU')}
                            </span>
                          </div>
                        )}
                      </div>
                    </div>
                  )}

                  {/* Megjegyz√©s */}
                  {event.notes && (
                    <div className="mt-2 text-sm text-gray-600 italic">
                      üí¨ {event.notes}
                    </div>
                  )}
                </div>

                {/* M≈±veletek */}
                {allowEdit && mode !== 'view-only' && (
                  <div className="flex items-center space-x-2 ml-4">
                    <button
                      onClick={() => openEditModal(event)}
                      className="p-2 text-gray-400 hover:text-blue-600 rounded"
                      title="Szerkeszt√©s"
                    >
                      <Edit3 className="h-4 w-4" />
                    </button>
                    <button
                      onClick={() => handleDelete(event)}
                      className="p-2 text-gray-400 hover:text-red-600 rounded"
                      title="T√∂rl√©s"
                    >
                      <Trash2 className="h-4 w-4" />
                    </button>
                  </div>
                )}
              </div>
            </div>
          ))
        )}
      </div>

      {/* SZERKESZT≈ê MODAL */}
      {showEditModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-3xl mx-4 max-h-[90vh] overflow-y-auto">
            <h3 className="text-xl font-bold mb-4">
              {editingEvent ? '‚úèÔ∏è Esem√©ny Szerkeszt√©se' : '‚ûï √öj Esem√©ny R√∂gz√≠t√©se'}
            </h3>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* Esem√©ny t√≠pus */}
              <div className="md:col-span-2">
                <label className="block text-sm font-medium mb-2">Esem√©ny t√≠pusa:</label>
                <select
                  value={formData.event_type}
                  onChange={(e) => setFormData({...formData, event_type: e.target.value})}
                  className="w-full p-3 border rounded-lg"
                >
                  <option value="pen_assignment">üìç Kar√°m hozz√°rendel√©s</option>
                  <option value="pen_movement">üîÑ Kar√°m mozgat√°s</option>
                  <option value="function_change">üè† Funkci√≥ v√°lt√°s</option>
                  <option value="breeding_start">üíï H√°rem kezdete</option>
                  <option value="breeding_end">üèÅ H√°rem v√©ge</option>
                  <option value="vv_check">üîç VV vizsg√°lat</option>
                  <option value="birth">üçº Ell√©s</option>
                  <option value="health_event">üè• Eg√©szs√©g√ºgyi esem√©ny</option>
                </select>
              </div>

              {/* D√°tum √©s id≈ë */}
              <div>
                <label className="block text-sm font-medium mb-2">D√°tum:</label>
                <input
                  type="date"
                  value={formData.event_date}
                  onChange={(e) => setFormData({...formData, event_date: e.target.value})}
                  className="w-full p-3 border rounded-lg"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">Id≈ëpont:</label>
                <input
                  type="time"
                  value={formData.event_time}
                  onChange={(e) => setFormData({...formData, event_time: e.target.value})}
                  className="w-full p-3 border rounded-lg"
                />
              </div>

              {/* Kar√°m v√°laszt√°s */}
              <div>
                <label className="block text-sm font-medium mb-2">Kar√°m:</label>
                <select
                  value={formData.pen_id}
                  onChange={(e) => setFormData({...formData, pen_id: e.target.value})}
                  className="w-full p-3 border rounded-lg"
                >
                  <option value="">V√°lassz karamot...</option>
                  {availablePens.map(pen => (
                    <option key={pen.id} value={pen.id}>
                      {pen.pen_number} - {pen.location}
                    </option>
                  ))}
                </select>
              </div>

              {/* El≈ëz≈ë kar√°m (mozgat√°sn√°l) */}
              {formData.event_type === 'pen_movement' && (
                <div>
                  <label className="block text-sm font-medium mb-2">Honnan:</label>
                  <select
                    value={formData.previous_pen_id}
                    onChange={(e) => setFormData({...formData, previous_pen_id: e.target.value})}
                    className="w-full p-3 border rounded-lg"
                  >
                    <option value="">V√°lassz karamot...</option>
                    {availablePens.map(pen => (
                      <option key={pen.id} value={pen.id}>
                        {pen.pen_number} - {pen.location}
                      </option>
                    ))}
                  </select>
                </div>
              )}

              {/* Funkci√≥ (ha funkci√≥ v√°lt√°s vagy h√°rem) */}
              {(formData.event_type === 'function_change' || formData.event_type === 'breeding_start') && (
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium mb-2">Funkci√≥:</label>
                  <select
                    value={formData.pen_function}
                    onChange={(e) => setFormData({...formData, pen_function: e.target.value})}
                    className="w-full p-3 border rounded-lg"
                  >
                    <option value="">V√°lassz funkci√≥t...</option>
                    <option value="b√∂lcsi">üêÆ B√∂lcsi</option>
                    <option value="√≥vi">üêÑ √ìvi</option>
                    <option value="h√°rem">üíï H√°rem</option>
                    <option value="vemhes">ü§∞ Vemhes</option>
                    <option value="ellet≈ë">üçº Ellet≈ë</option>
                    <option value="teh√©n">üêÑüçº Teh√©n</option>
                    <option value="h√≠z√≥bika">üêÇ H√≠z√≥bika</option>
                    <option value="√ºres">‚≠ï √úres</option>
                  </select>
                </div>
              )}

              {/* ‚≠ê H√ÅREM SPECIFIKUS MEZ≈êK - MINDIG MEGJELEN√çT√âS TESZTEL√âSHEZ */}
              {(formData.pen_function === 'h√°rem' || formData.event_type === 'breeding_start' || true) && (
                <div className="md:col-span-2 bg-pink-50 p-4 rounded-lg border border-pink-200">
                  <h4 className="font-medium text-pink-900 mb-4">üíï H√°rem Specifikus Adatok</h4>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {/* üêÇ JAV√çTOTT TENY√âSZBIKA V√ÅLASZT√ÅS */}
                    <div className="md:col-span-2">
                      <label className="block text-sm font-medium mb-2">
                        üêÇ Teny√©szbik√°k ({availableBulls.length} el√©rhet≈ë):
                      </label>
                      
                      {bullsLoading ? (
                        <div className="flex items-center justify-center p-4 border rounded bg-white">
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-pink-600 mr-2"></div>
                          <span className="text-sm text-gray-600">Teny√©szbik√°k bet√∂lt√©se...</span>
                        </div>
                      ) : availableBulls.length > 0 ? (
                        <div className="space-y-2 max-h-32 overflow-y-auto border rounded p-3 bg-white">
                          {availableBulls.map((bull, index) => (
                            <div key={`bull-${bull.id}-${index}`} className="flex items-center cursor-pointer">
                              <input
                                type="checkbox"
                                id={`bull-checkbox-${bull.id}-${index}`}
                                checked={formData.bulls.some(b => b.enar === bull.enar)}
                                onChange={(e) => {
                                  console.log('üêÇ Checkbox v√°ltoz√°s:', bull.name, e.target.checked);
                                  
                                  if (e.target.checked) {
                                    setFormData(prev => ({
                                      ...prev,
                                      bulls: [...prev.bulls, {
                                        id: bull.id,
                                        enar: bull.enar,
                                        name: bull.name,
                                        kplsz: bull.kplsz
                                      }]
                                    }));
                                  } else {
                                    setFormData(prev => ({
                                      ...prev,
                                      bulls: prev.bulls.filter(b => b.enar !== bull.enar)
                                    }));
                                  }
                                }}
                                className="mr-3 h-4 w-4 text-pink-600 border-gray-300 rounded focus:ring-pink-500"
                              />
                              <label 
                                htmlFor={`bull-checkbox-${bull.id}-${index}`}
                                className="text-sm cursor-pointer flex-1"
                              >
                                <strong className="text-pink-900">{bull.name}</strong>
                                <span className="text-gray-600 ml-2">({bull.enar})</span>
                                {bull.kplsz && bull.kplsz !== 'Nincs KPLSZ' && (
                                  <span className="text-gray-500 text-xs ml-1">KPLSZ: {bull.kplsz}</span>
                                )}
                              </label>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <div className="p-4 border rounded bg-gray-50 text-center">
                          <p className="text-sm text-gray-600 mb-2">üêÇ Nem tal√°lhat√≥ teny√©szbika az adatb√°zisban</p>
                          <p className="text-xs text-gray-500">
                            Ellen≈ërizd, hogy a bulls t√°bl√°ban vannak-e akt√≠v teny√©szbik√°k.
                          </p>
                        </div>
                      )}

                      {/* KIV√ÅLASZTOTT BIK√ÅK MEGJELEN√çT√âSE */}
                      {formData.bulls.length > 0 && (
                        <div className="mt-3 p-2 bg-pink-100 rounded border border-pink-300">
                          <p className="text-sm font-medium text-pink-900 mb-1">
                            ‚úÖ Kiv√°lasztott teny√©szbik√°k ({formData.bulls.length}):
                          </p>
                          <div className="space-y-1">
                            {formData.bulls.map((bull, i) => (
                              <div key={i} className="text-sm text-pink-800">
                                üêÇ {bull.name} ({bull.enar})
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>

                    {/* P√°rz√°si id≈ëszak */}
                    <div>
                      <label className="block text-sm font-medium mb-2">üíï P√°rz√°si kezdet:</label>
                      <input
                        type="date"
                        value={formData.pairing_start_date}
                        onChange={(e) => setFormData({...formData, pairing_start_date: e.target.value})}
                        className="w-full p-2 border rounded"
                      />
                    </div>

                    {/* VV tervezett (automatikus) */}
                    <div>
                      <label className="block text-sm font-medium mb-2">üîç VV tervezett:</label>
                      <input
                        type="date"
                        value={formData.expected_vv_date}
                        disabled
                        className="w-full p-2 border rounded bg-gray-50"
                      />
                      <p className="text-xs text-gray-500 mt-1">
                        Automatikusan sz√°m√≠tva: p√°rz√°si kezdet + 75 nap
                      </p>
                    </div>

                    {/* P√°rz√°si m√≥dszer */}
                    <div className="md:col-span-2">
                      <label className="block text-sm font-medium mb-2">üî¨ P√°rz√°si m√≥dszer:</label>
                      <select
                        value={formData.breeding_method}
                        onChange={(e) => setFormData({...formData, breeding_method: e.target.value})}
                        className="w-full p-2 border rounded"
                      >
                        <option value="natural">üêÇ Term√©szetes fedeztet√©s</option>
                        <option value="ai">üß™ Mesters√©ges term√©keny√≠t√©s</option>
                      </select>
                    </div>
                  </div>
                </div>
              )}

              {/* Ok */}
              <div>
                <label className="block text-sm font-medium mb-2">Ok:</label>
                <select
                  value={formData.reason}
                  onChange={(e) => setFormData({...formData, reason: e.target.value})}
                  className="w-full p-3 border rounded-lg"
                >
                  <option value="">V√°lassz okot...</option>
                  <option value="age_separation">üéÇ √âletkor alap√∫ v√°lt√°s</option>
                  <option value="breeding">üíï Teny√©szt√©sbe √°ll√≠t√°s</option>
                  <option value="pregnancy">ü§∞ Vemhess√©g</option>
                  <option value="birthing">üçº Ell√©s el≈ëk√©sz√≠t√©s</option>
                  <option value="health">üè• Eg√©szs√©g√ºgyi ok</option>
                  <option value="capacity">üìä Kapacit√°s probl√©ma</option>
                  <option value="function_change">üîÑ Funkci√≥ v√°lt√°s</option>
                  <option value="management">üìã Gazd√°lkod√°si d√∂nt√©s</option>
                  <option value="seasonal">üåÖ Szezon√°lis v√°lt√°s</option>
                  <option value="grouping">üë• Csoportos√≠t√°s</option>
                  <option value="maintenance">üîß Kar√°m karbantart√°s</option>
                  <option value="veterinary">üë®‚Äç‚öïÔ∏è √Ållatorvosi utas√≠t√°s</option>
                  <option value="feeding">üåæ Takarm√°nyoz√°si ok</option>
                  <option value="safety">‚ö†Ô∏è Biztons√°gi ok</option>
                  <option value="other">‚ùì Egy√©b ok</option>
                </select>
              </div>

              {/* T√∂rt√©neti checkbox */}
              <div className="flex items-center">
                <input
                  type="checkbox"
                  checked={formData.is_historical}
                  onChange={(e) => setFormData({...formData, is_historical: e.target.checked})}
                  className="mr-2"
                  id="historical"
                />
                <label htmlFor="historical" className="text-sm">
                  üìö T√∂rt√©neti esem√©ny (m√∫ltbeli r√∂gz√≠t√©s)
                </label>
              </div>

              {/* Megjegyz√©s */}
              <div className="md:col-span-2">
                <label className="block text-sm font-medium mb-2">Megjegyz√©s:</label>
                <textarea
                  value={formData.notes}
                  onChange={(e) => setFormData({...formData, notes: e.target.value})}
                  rows={3}
                  className="w-full p-3 border rounded-lg"
                  placeholder="Opcion√°lis megjegyz√©s az esem√©nyhez..."
                />
              </div>
            </div>

            {/* Modal gombok */}
            <div className="flex justify-end gap-3 mt-6">
              <button
                onClick={() => setShowEditModal(false)}
                className="px-4 py-2 text-gray-600 border border-gray-300 rounded hover:bg-gray-50"
              >
                ‚ùå M√©gse
              </button>
              <button
                onClick={handleSave}
                className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
              >
                üíæ Ment√©s
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default UnifiedEventManager;