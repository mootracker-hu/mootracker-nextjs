// Enhanced Alert Action Panel - Modern Colors - Teljes friss√≠tett verzi√≥
// ‚úÖ K√âK ‚Üí VIOLET, Z√ñLD ‚Üí EMERALD sz√≠nfriss√≠t√©s

import React, { useState, useEffect } from 'react';
import { 
  PlusCircle, 
  Clock, 
  CheckCircle2, 
  Calendar,
  AlertTriangle,
  FileText
} from 'lucide-react';

interface EnhancedAlertActionPanelProps {
  alert: any;
  onCreateTask: (alert: any, taskData: any) => Promise<void>;
  onSnoozeAlert: (alertId: string, duration: string) => Promise<void>;
  onResolveAlert: (alertId: string, reason?: string) => Promise<void>;
}

export const EnhancedAlertActionPanel: React.FC<EnhancedAlertActionPanelProps> = ({
  alert,
  onCreateTask,
  onSnoozeAlert,
  onResolveAlert
}) => {
  const [showTaskForm, setShowTaskForm] = useState(false);
  const [showResolveForm, setShowResolveForm] = useState(false);
  const [taskData, setTaskData] = useState({
    title: '',
    due_date: '',
    action_required: '',
    notes: '',
    priority: 'kozepes' as any
  });
  const [resolveNotes, setResolveNotes] = useState('');

  // üéØ INTELLIGENS TASK ADATOK EL≈êKIT√ñLT√âSE
  useEffect(() => {
    if (showTaskForm) {
      const suggestions = getTaskSuggestions(alert.type);
      
      setTaskData({
        title: suggestions.title.replace('{enar}', alert.animal?.enar || 'N/A'),
        due_date: suggestions.due_date,
        action_required: suggestions.actions.join('\n‚Ä¢ '),
        notes: `Alert-b≈ël gener√°lt feladat: ${alert.description}`,
        priority: suggestions.priority
      });
    }
  }, [showTaskForm, alert]);

  // üìã TASK SUGGESTIONS LOGIC
  const getTaskSuggestions = (alertType: string) => {
    const today = new Date();
    
    const suggestions: Record<string, any> = {
      'valasztas_ideje': {
        title: '{enar} - Borj√∫ v√°laszt√°s (6 h√≥napos)',
        due_date: new Date(today.getTime() + (7 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0],
        actions: [
          'Koll√©g√°kkal egyeztet√©s v√°laszt√°si id≈ëpontr√≥l',
          'C√©l kar√°m kiv√°laszt√°sa (‚ôÄ‚Üíb√∂lcsi, ‚ôÇ‚Üíh√≠z√≥bika)', 
          'Borj√∫ lev√°laszt√°sa anyj√°r√≥l',
          'Kar√°m √°thelyez√©s v√©grehajt√°sa'
        ],
        priority: 'magas'
      },
      'vakcinazas_esed√©kes': {
        title: '{enar} - 15 napos borj√∫ kezel√©sek',
        due_date: new Date(today.getTime() + (3 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0],
        actions: [
          'BoviPast vakcina bead√°sa',
          'Szarvtalan√≠t√°s elv√©gz√©se',
          'F√ºlsz√°m felhelyez√©se',
          'Eg√©szs√©g√ºgyi √°llapot felm√©r√©se'
        ],
        priority: 'kritikus'
      },
      'vemhessegvizsgalat': {
        title: '{enar} - Vemhess√©gvizsg√°lat (75 nap h√°remben)',
        due_date: new Date(today.getTime() + (3 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0],
        actions: [
          '√Ållatorvos √©rtes√≠t√©se √©s id≈ëpont egyeztet√©se',
          'VV vizsg√°lat el≈ëk√©sz√≠t√©se',
          'Ultrahangos vizsg√°lat elv√©gz√©se',
          'VV eredm√©ny r√∂gz√≠t√©se a rendszerben'
        ],
        priority: 'magas'
      },
      'rcc_vakcina_esed√©kes': {
        title: '{enar} - RCC vakcina (ell√©s el≈ëtt 6 h√©t)',
        due_date: new Date(today.getTime() + (2 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0],
        actions: [
          'RCC vakcina beszerz√©se',
          '√Ållatorvos √©rtes√≠t√©se',
          'Vakcina bead√°sa vemhes √°llatnak',
          'Vakcin√°z√°s dokument√°l√°sa'
        ],
        priority: 'kritikus'
      },
      'elles_kesesben': {
        title: '{enar} - T√öLHORD√ÅS - Azonnali beavatkoz√°s',
        due_date: today.toISOString().split('T')[0], // MA!
        actions: [
          'AZONNALI √°llatorvosi vizsg√°lat',
          'Ultrahang magzatvizsg√°lat',
          'Cs√°sz√°rmetsz√©s m√©rlegel√©se',
          'Intenz√≠v megfigyel√©s √©s monitoring'
        ],
        priority: 'surgos'
      }
    };

    return suggestions[alertType] || {
      title: '{enar} - ' + alert.title,
      due_date: new Date(today.getTime() + (7 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0],
      actions: [alert.action_required || 'Sz√ºks√©ges int√©zked√©s v√©grehajt√°sa'],
      priority: 'kozepes'
    };
  };

  // üìã TASK L√âTREHOZ√ÅS
  const handleCreateTask = async () => {
    try {
      await onCreateTask(alert, {
        title: taskData.title,
        description: taskData.notes,
        priority: taskData.priority,
        category: getTaskCategory(alert.type),
        due_date: new Date(taskData.due_date).toISOString(),
        action_required: taskData.action_required,
        alert_id: alert.id,
        animal_id: alert.animal_id,
        status: 'fugg≈ëben'
      });
      
      setShowTaskForm(false);
      console.log('‚úÖ Task sikeresen l√©trehozva alert-b≈ël');
    } catch (error) {
      console.error('‚ùå Task l√©trehoz√°si hiba:', error);
      alert('Hiba t√∂rt√©nt a feladat l√©trehoz√°sa sor√°n!');
    }
  };

  // üìÇ TASK KATEG√ìRIA MAPPING
  const getTaskCategory = (alertType: string) => {
    const mapping: Record<string, string> = {
      'valasztas_ideje': 'mozgatas',
      'vakcinazas_esed√©kes': 'vakcinazas',
      'vemhessegvizsgalat': 'tenyesztes',
      'rcc_vakcina_esed√©kes': 'vakcinazas',
      'bovipast_vakcina_esed√©kes': 'vakcinazas',
      'elles_kesesben': 'egeszsegugy',
      'piaci_lehetoseg': 'ertekesites'
    };
    return mapping[alertType] || 'altalanos';
  };

  // ‚è∞ SNOOZE FUNKCI√ì
  const handleSnooze = async (duration: string) => {
    try {
      await onSnoozeAlert(alert.id, duration);
      console.log(`‚è∞ Alert snooze-olva: ${duration}`);
    } catch (error) {
      console.error('‚ùå Snooze hiba:', error);
      alert('Hiba t√∂rt√©nt a halaszt√°s sor√°n!');
    }
  };

  // ‚úÖ RESOLVE FUNKCI√ì
  const handleResolve = async () => {
    try {
      await onResolveAlert(alert.id, resolveNotes);
      setShowResolveForm(false);
      setResolveNotes('');
      console.log('‚úÖ Alert feloldva');
    } catch (error) {
      console.error('‚ùå Resolve hiba:', error);
      alert('Hiba t√∂rt√©nt a felold√°s sor√°n!');
    }
  };

  // üé® MODERN PRIORITY COLOR MAPPING - FRISS√çTETT!
  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'surgos': return 'bg-red-600 text-white';
      case 'kritikus': return 'bg-rose-500 text-white';
      case 'magas': return 'bg-amber-500 text-white';
      case 'kozepes': return 'bg-cyan-500 text-white';
      default: return 'bg-slate-500 text-white';
    }
  };

  return (
    <div className="mt-3 p-4 bg-gray-50 rounded-lg border border-gray-200">
      {/* üìã ALERT INFORM√ÅCI√ì */}
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center gap-2">
          <AlertTriangle className="w-4 h-4 text-amber-500" />
          <span className="text-sm font-medium text-gray-900">M≈±veletek</span>
        </div>
        <span className={`px-2 py-1 text-xs font-medium rounded-full ${getPriorityColor(alert.priority)}`}>
          {alert.priority.charAt(0).toUpperCase() + alert.priority.slice(1)}
        </span>
      </div>

      {/* üéØ MAIN ACTION BUTTONS */}
      {!showTaskForm && !showResolveForm && (
        <div className="space-y-2">
          {/* Task l√©trehoz√°s gomb - ‚úÖ K√âK ‚Üí VIOLET */}
          <button
            onClick={() => setShowTaskForm(true)}
            disabled={!!alert.related_task_id}
            className={`w-full flex items-center justify-center gap-2 p-3 rounded-lg text-sm font-medium transition-colors ${
              alert.related_task_id 
                ? 'bg-gray-200 text-gray-500 cursor-not-allowed' 
                : 'bg-violet-600 text-white hover:bg-violet-700 cursor-pointer shadow-sm'
            }`}
          >
            <PlusCircle className="w-4 h-4" />
            {alert.related_task_id ? 'Feladat m√°r l√©trehozva' : 'Feladat l√©trehoz√°sa'}
          </button>

          {/* Snooze gombok - ‚úÖ S√ÅRGA ‚Üí AMBER */}
          <div className="grid grid-cols-3 gap-2">
            <button
              onClick={() => handleSnooze('1d')}
              className="flex items-center justify-center gap-1 p-2 bg-amber-100 text-amber-800 rounded text-xs hover:bg-amber-200 transition-colors cursor-pointer"
            >
              <Clock className="w-3 h-3" />
              1 nap
            </button>
            <button
              onClick={() => handleSnooze('3d')}
              className="flex items-center justify-center gap-1 p-2 bg-amber-100 text-amber-800 rounded text-xs hover:bg-amber-200 transition-colors cursor-pointer"
            >
              <Clock className="w-3 h-3" />
              3 nap
            </button>
            <button
              onClick={() => handleSnooze('1w')}
              className="flex items-center justify-center gap-1 p-2 bg-amber-100 text-amber-800 rounded text-xs hover:bg-amber-200 transition-colors cursor-pointer"
            >
              <Clock className="w-3 h-3" />
              1 h√©t
            </button>
          </div>

          {/* Resolve gomb - ‚úÖ Z√ñLD ‚Üí EMERALD */}
          <button
            onClick={() => setShowResolveForm(true)}
            className="w-full flex items-center justify-center gap-2 p-2 bg-emerald-600 text-white rounded text-sm hover:bg-emerald-700 transition-colors cursor-pointer shadow-sm"
          >
            <CheckCircle2 className="w-4 h-4" />
            Megoldva jel√∂l√©se
          </button>
        </div>
      )}

      {/* üìã TASK L√âTREHOZ√ÅS FORM - ‚úÖ K√âK ‚Üí VIOLET */}
      {showTaskForm && (
        <div className="space-y-3">
          <div className="flex items-center gap-2 mb-3">
            <FileText className="w-4 h-4 text-violet-600" />
            <h4 className="text-sm font-medium text-violet-900">√öj feladat l√©trehoz√°sa</h4>
          </div>
          
          <div>
            <label className="block text-xs font-medium text-gray-700 mb-1">
              Feladat c√≠me
            </label>
            <input
              type="text"
              value={taskData.title}
              onChange={(e) => setTaskData(prev => ({ ...prev, title: e.target.value }))}
              className="w-full p-2 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-violet-500 focus:outline-none"
            />
          </div>
          
          <div className="grid grid-cols-2 gap-3">
            <div>
              <label className="block text-xs font-medium text-gray-700 mb-1">
                Hat√°rid≈ë
              </label>
              <input
                type="date"
                value={taskData.due_date}
                onChange={(e) => setTaskData(prev => ({ ...prev, due_date: e.target.value }))}
                className="w-full p-2 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-violet-500 focus:outline-none"
              />
            </div>
            <div>
              <label className="block text-xs font-medium text-gray-700 mb-1">
                Priorit√°s
              </label>
              <select
                value={taskData.priority}
                onChange={(e) => setTaskData(prev => ({ ...prev, priority: e.target.value as any }))}
                className="w-full p-2 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-violet-500 focus:outline-none"
              >
                <option value="alacsony">Alacsony</option>
                <option value="kozepes">K√∂zepes</option>
                <option value="magas">Magas</option>
                <option value="kritikus">Kritikus</option>
                <option value="surgos">S√ºrg≈ës</option>
              </select>
            </div>
          </div>
          
          <div>
            <label className="block text-xs font-medium text-gray-700 mb-1">
              Sz√ºks√©ges int√©zked√©sek
            </label>
            <textarea
              value={taskData.action_required}
              onChange={(e) => setTaskData(prev => ({ ...prev, action_required: e.target.value }))}
              className="w-full p-2 text-sm border border-gray-300 rounded h-20 focus:ring-2 focus:ring-violet-500 focus:outline-none"
              placeholder="Mit kell tenni..."
            />
          </div>
          
          <div>
            <label className="block text-xs font-medium text-gray-700 mb-1">
              Megjegyz√©sek
            </label>
            <textarea
              value={taskData.notes}
              onChange={(e) => setTaskData(prev => ({ ...prev, notes: e.target.value }))}
              className="w-full p-2 text-sm border border-gray-300 rounded h-16 focus:ring-2 focus:ring-violet-500 focus:outline-none"
              placeholder="Tov√°bbi r√©szletek, koordin√°ci√≥s inform√°ci√≥k..."
            />
          </div>
          
          <div className="flex gap-2 pt-2">
            <button
              onClick={handleCreateTask}
              className="flex-1 px-3 py-2 bg-violet-600 text-white text-sm rounded hover:bg-violet-700 cursor-pointer transition-colors shadow-sm"
            >
              ‚úÖ Feladat l√©trehoz√°sa
            </button>
            <button
              onClick={() => setShowTaskForm(false)}
              className="px-3 py-2 border border-gray-300 text-gray-700 text-sm rounded hover:bg-gray-50 cursor-pointer transition-colors"
            >
              M√©gse
            </button>
          </div>
        </div>
      )}

      {/* ‚úÖ RESOLVE FORM - ‚úÖ Z√ñLD ‚Üí EMERALD */}
      {showResolveForm && (
        <div className="space-y-3">
          <div className="flex items-center gap-2 mb-3">
            <CheckCircle2 className="w-4 h-4 text-emerald-600" />
            <h4 className="text-sm font-medium text-emerald-900">Riaszt√°s felold√°sa</h4>
          </div>
          
          <div>
            <label className="block text-xs font-medium text-gray-700 mb-1">
              Felold√°s oka / Megjegyz√©s
            </label>
            <textarea
              value={resolveNotes}
              onChange={(e) => setResolveNotes(e.target.value)}
              className="w-full p-2 text-sm border border-gray-300 rounded h-16 focus:ring-2 focus:ring-emerald-500 focus:outline-none"
              placeholder="Mi√©rt lett megoldva? Mi t√∂rt√©nt? (opcion√°lis)"
            />
          </div>
          
          <div className="flex gap-2">
            <button
              onClick={handleResolve}
              className="flex-1 px-3 py-2 bg-emerald-600 text-white text-sm rounded hover:bg-emerald-700 cursor-pointer transition-colors shadow-sm"
            >
              ‚úÖ Megoldva
            </button>
            <button
              onClick={() => setShowResolveForm(false)}
              className="px-3 py-2 border border-gray-300 text-gray-700 text-sm rounded hover:bg-gray-50 cursor-pointer transition-colors"
            >
              M√©gse
            </button>
          </div>
        </div>
      )}
    </div>
  );
};