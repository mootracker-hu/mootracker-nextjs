// src/app/dashboard/import-export/page.tsx
'use client';

import React, { useState, useCallback } from 'react';
import { Upload, FileSpreadsheet, Check, AlertCircle, ArrowRight, Database } from 'lucide-react';
import * as XLSX from 'xlsx';
import { createClient } from '@supabase/supabase-js';
import { displayEnar } from '@/constants/enar-formatter';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

interface ImportedAnimal {
  enar: string;
  gender: string;
  color: string;
  breed: string;
  birthDate: string;
  motherEnar: string;
  fatherEnar: string;
  fatherKPLSZ: string;
  
  // √öJ: Lifecycle mez≈ëk
  bekerulesDatum?: string;
  kikerulesiDatum?: string;
  elhullasDatum?: string;
  vagasDatum?: string;
  szarmazasiTenyeszet?: string;
  celtenyeszet?: string;
  
  calculatedCategory: string;
  calculatedStatus: string;
  operation: 'SAFE_UPDATE' | 'NEW_INSERT';
  protectedFields: string[];
  isValid: boolean;
  errors: string[];
}

// üõ°Ô∏è Ultra-Safe v√©dett mez≈ëk - SOHA nem m√≥dos√≠tjuk ezeket
const PROTECTED_FIELDS = [
  'apa_enar',
  'kplsz', 
  'kategoria',
  'has_given_birth',
  'last_birth_date',
  'pregnancy_status',
  'vv_date',
  'pairing_date',
  'expected_birth_date'
];

// St√°tusz meghat√°roz√°s lifecycle adatok alapj√°n
const determineStatus = (row: any): string => {
  if (row.elhullasDatum || row['Elhull√°s, elvesz√©s d√°tuma']) return 'elhullott';
  if (row.vagasDatum || row['Le√∂l√©s, k√©nyszev√°g√°s, h√°zi v√°g√°s d√°tuma']) return 'h√°zi_v√°g√°s';
  if ((row.kikerulesiDatum || row['Kiker√ºl√©s d√°tuma']) && (row.celtenyeszet || row['C√©lteny√©szet'])) return 'eladott';
  if (row.kikerulesiDatum || row['Kiker√ºl√©s d√°tuma']) return 'kiker√ºlt';
  return 'akt√≠v';
};

const ImportExportPage = () => {
  const [step, setStep] = useState(1);
  const [file, setFile] = useState<File | null>(null);
  const [importedData, setImportedData] = useState<ImportedAnimal[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [importStats, setImportStats] = useState({ 
    total: 0, 
    valid: 0, 
    errors: 0,
    updated: 0,
    inserted: 0, 
    protected: 0
  });
  const [isImporting, setIsImporting] = useState(false);

  // ENAR form√°z√°s (HU1234567890 ‚Üí HU 12345 6789 0)
  const formatEnar = (enar: string): string => {
    const clean = enar.replace(/\s/g, '');
    if (clean.length === 12 && clean.startsWith('HU')) {
      const country = clean.substring(0, 2);
      const part1 = clean.substring(2, 7);
      const part2 = clean.substring(7, 11);
      const part3 = clean.substring(11, 12);
      return `${country} ${part1} ${part2} ${part3}`;
    }
    return enar;
  };

  // ENAR normaliz√°l√°s (sz√≥k√∂z√∂k egys√©ges√≠t√©se)
  const normalizeEnar = (enar: string): string => {
    const clean = enar.replace(/\s/g, '');
    if (clean.length === 12 && clean.startsWith('HU')) {
      return `${clean.substring(0, 2)} ${clean.substring(2, 7)} ${clean.substring(7, 11)} ${clean.substring(11, 12)}`;
    }
    return enar;
  };

  // Utols√≥ 5 jegy kiemel√©se
  const getShortEnar = (enar: string): string => {
    const clean = enar.replace(/\s/g, '');
    if (clean.length >= 5) {
      return clean.slice(-5);
    }
    return clean;
  };

  // Kateg√≥ria kalkul√°ci√≥
  const calculateCategory = (birthDate: string, gender: string, hasGivenBirth: boolean = false): string => {
    const birth = new Date(birthDate);
    const now = new Date();
    const ageMonths = (now.getTime() - birth.getTime()) / (1000 * 60 * 60 * 24 * 30.44);

    if (gender === 'n≈ëivar√∫') {
      if (ageMonths <= 6) return 'n≈ëivar√∫_borj√∫';      // 0-6 h√≥ (6 h√≥ v√©g√©ig) 
      if (ageMonths < 24) return 'sz≈±z_√ºsz≈ë';          // 6-24 h√≥
      if (hasGivenBirth) return 'teh√©n';               // ‚úÖ HA ELLETT
      return 'sz≈±z_√ºsz≈ë';                              // ‚úÖ HA NEM ELLETT
    } else if (gender === 'h√≠mivar√∫') {
      if (ageMonths <= 6) return 'h√≠mivar√∫_borj√∫';      // 0-6 h√≥
      return 'h√≠z√≥bika';                                 // 6+ h√≥
    }
    return 'ismeretlen';
  };

  // Fajta priorit√°s
  const extractBreed = (breedData: string): string => {
    if (!breedData) return 'blonde_daquitaine';
    if (breedData.toLowerCase().includes('limousin')) return 'limousin';
    if (breedData.toLowerCase().includes('magyartarka')) return 'magyartarka';
    if (breedData.toLowerCase().includes('blonde')) return 'blonde_daquitaine';
    return 'h√∫shaszn√∫';
  };

  // Sz√≠n optimaliz√°ci√≥
  const normalizeColor = (color: string): string => {
    if (color === 'egysz√≠n≈± zsemle' || color === 'zsemlesz√≠n≈±') return '';
    return color;
  };

  // üìä DUAL EXCEL FELDOLGOZ√ÅS - EREDETI ALAPON B≈êV√çTVE
  const processExcelFile = useCallback(async (file: File) => {
    setIsProcessing(true);

    try {
      const buffer = await file.arrayBuffer();
      const workbook = XLSX.read(buffer);
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const data = XLSX.utils.sheet_to_json(worksheet);

      console.log('üìä Excel adatok beolvasva:', data.length, 'sor');
      console.log('üîç Excel oszlopok:', Object.keys(data[0] || {}));

      // Oszlop detekt√°l√°s (Excel 1 vs Excel 2)
      const firstRow = data[0] as any;
      const hasLifecycleColumns = firstRow && (
        firstRow['Kiker√ºl√©s d√°tuma'] || 
        firstRow['Elhull√°s, elvesz√©s d√°tuma'] ||
        firstRow['Teny√©szetbe √©rkez√©s d√°tuma'] ||
        firstRow['ENAR azonos√≠t√≥']
      );

      const isExcel1 = firstRow && (
        firstRow['Egyed sz√°ma'] ||
        firstRow['Azonos√≠t√≥'] ||
        firstRow['Apa azonos√≠t√≥ja'] ||
        firstRow['Fajta']
      );

      console.log('üîç Excel t√≠pus:', {
        hasLifecycleColumns,
        isExcel1,
        detectedType: hasLifecycleColumns && !isExcel1 ? 'Excel 2 (Lifecycle)' : 
                     isExcel1 && !hasLifecycleColumns ? 'Excel 1 (R√©szletes)' : 'Hibrid'
      });

      let processedData: ImportedAnimal[] = [];

      if (hasLifecycleColumns && !isExcel1) {
        // üìä EXCEL 2 - LIFECYCLE ADATOK
        console.log('üìã Excel 2 (Lifecycle) feldolgoz√°s...');
        
        processedData = data.map((row: any, index: number) => {
          const enar = normalizeEnar(row['ENAR azonos√≠t√≥'] || '');
          
          return {
            enar,
            gender: row['Neme'] || 'n≈ëivar√∫',
            color: '',
            breed: 'blonde_daquitaine', // default Excel 2-ben nincs fajta
            birthDate: row['Sz√ºlet√©si d√°tum'] || '',
            motherEnar: row['Anyja ENAR azonos√≠t√≥ja vagy eredeti k√ºlf√∂ldi azonos√≠t√≥'] || '',
            fatherEnar: '',
            fatherKPLSZ: '',
            
            // LIFECYCLE ADATOK:
            bekerulesDatum: row['Teny√©szetbe √©rkez√©s d√°tuma'] || undefined,
            kikerulesiDatum: row['Kiker√ºl√©s d√°tuma'] || undefined,
            elhullasDatum: row['Elhull√°s, elvesz√©s d√°tuma'] || undefined,
            vagasDatum: row['Le√∂l√©s, k√©nyszev√°g√°s, h√°zi v√°g√°s d√°tuma'] || undefined,
            szarmazasiTenyeszet: row['Teny√©szet (Sz√°rmaz√°si teny√©szet)'] || undefined,
            celtenyeszet: row['C√©lteny√©szet'] || undefined,
            
            calculatedStatus: determineStatus(row),
            calculatedCategory: calculateCategory(row['Sz√ºlet√©si d√°tum'], row['Neme'] || 'n≈ëivar√∫'),
            operation: 'SAFE_UPDATE' as const,
            protectedFields: [],
            isValid: enar !== '' && row['Sz√ºlet√©si d√°tum'] !== '',
            errors: []
          };
        });

      } else {
        // üìã EXCEL 1 - R√âSZLETES ADATOK (EREDETI LOGIKA)
        console.log('üìä Excel 1 (R√©szletes) feldolgoz√°s...');
        
        processedData = data.map((row: any, index: number) => {
          const enar = formatEnar(row['Egyed sz√°ma'] || row['Azonos√≠t√≥'] || '');
          const birthDate = row['Sz√ºlet√©si d√°tum'] || '';
          const lastBirthDate = row['Utols√≥ ell√©s d√°tuma'] || '';
          const breed = row['ENAR-ba bejelentett fajta'] || row['Fajta'] || '';
          
          // Van-e ell√©s d√°tum?
          const hasGivenBirth = lastBirthDate && lastBirthDate.trim() !== '';

          return {
            enar,
            gender: row['Neme'] || 'n≈ëivar√∫',
            color: normalizeColor(row['Sz√≠ne'] || ''),
            breed: extractBreed(breed),
            birthDate,
            motherEnar: row['Anya sz√°ma'] || '',
            fatherEnar: '',
            fatherKPLSZ: row['Apa azonos√≠t√≥ja'] || '',
            
            // LIFECYCLE ADATOK (√ºres Excel 1-ben):
            bekerulesDatum: undefined,
            kikerulesiDatum: undefined,
            elhullasDatum: undefined,
            vagasDatum: undefined,
            szarmazasiTenyeszet: undefined,
            celtenyeszet: undefined,
            
            calculatedStatus: 'akt√≠v',
            calculatedCategory: calculateCategory(birthDate, row['Neme'] || 'n≈ëivar√∫', hasGivenBirth),
            operation: 'SAFE_UPDATE' as const,
            protectedFields: [],
            isValid: enar !== '' && birthDate !== '',
            errors: []
          };
        });
      }

      // Eredm√©nyek valid√°l√°sa √©s statisztik√°k
      const validAnimals = processedData.filter(a => a.isValid);
      const invalidAnimals = processedData.filter(a => !a.isValid);

      console.log('‚úÖ Feldolgoz√°s befejezve:', {
        total: processedData.length,
        valid: validAnimals.length,
        invalid: invalidAnimals.length,
        hasLifecycle: processedData.filter(a => a.bekerulesDatum || a.kikerulesiDatum).length,
        hasBreed: processedData.filter(a => a.breed && a.breed !== 'blonde_daquitaine').length,
        hasKPLSZ: processedData.filter(a => a.fatherKPLSZ).length
      });

      setImportedData(processedData);
      setImportStats({
        total: processedData.length,
        valid: validAnimals.length,
        errors: invalidAnimals.length,
        updated: 0,
        inserted: 0,
        protected: 0
      });
      setIsProcessing(false);
      setStep(3);
    } catch (error: any) {
      console.error('‚ùå Excel parsing error:', error);
      alert(`Excel f√°jl feldolgoz√°si hiba: ${error?.message || 'Ismeretlen hiba'}`);
      setIsProcessing(false);
    }
  }, []);

  // üõ°Ô∏è ULTRA-SAFE MERGE IMPORT - EREDETI LOGIKA ALAPON
  const handleConfirmImport = async () => {
    setIsImporting(true);

    try {
      const validAnimals = importedData.filter(a => a.isValid);
      let updatedCount = 0;
      let insertedCount = 0;
      let protectedCount = 0;
      let errorCount = 0;
      const importResults: string[] = [];

      for (const animal of validAnimals) {
        try {
          // Megl√©v≈ë √°llat keres√©se
          const { data: existingAnimal, error: searchError } = await supabase
            .from('animals')
            .select('*')
            .eq('enar', animal.enar)
            .maybeSingle();

          if (searchError) {
            console.error(`‚ùå Keres√©si hiba ${animal.enar}:`, searchError);
            errorCount++;
            continue;
          }

          if (existingAnimal) {
            // üõ°Ô∏è MEGL√âV≈ê √ÅLLAT - ULTRA SAFE UPDATE (EREDETI LOGIKA)
            console.log(`üîç Megl√©v≈ë √°llat: ${animal.enar}`);
            
            // V√©dett adatok list√°z√°sa
            const protectedData = PROTECTED_FIELDS.filter(field => existingAnimal[field] != null);
            if (protectedData.length > 0) {
              console.log(`üîí V√©dett adatok:`, protectedData);
              protectedCount++;
            }

            // Csak biztons√°gos mez≈ëk friss√≠t√©se (EREDETI LOGIKA):
            const updateData: any = {};
            
            if (!existingAnimal.breed && animal.breed) {
              updateData.breed = animal.breed;
            }
            if (!existingAnimal.apa_kplsz && animal.fatherKPLSZ) {
              updateData.apa_kplsz = animal.fatherKPLSZ;
            }

            // √öJ: Lifecycle mez≈ëk hozz√°ad√°sa
            if (animal.kikerulesiDatum) updateData.kikerulesi_datum = animal.kikerulesiDatum;
            if (animal.elhullasDatum) updateData.elhullas_datum = animal.elhullasDatum;
            if (animal.vagasDatum) updateData.vagas_datum = animal.vagasDatum;
            if (animal.szarmazasiTenyeszet) updateData.szarmazasi_tenyeszet = animal.szarmazasiTenyeszet;
            if (animal.celtenyeszet) updateData.celtenyeszet = animal.celtenyeszet;

            // St√°tusz csak akkor ha van kiker√ºl√©s:
            if (animal.kikerulesiDatum || animal.elhullasDatum || animal.vagasDatum) {
              updateData.statusz = determineStatus(animal);
            }

            // Friss√≠t√©s v√©grehajt√°sa (csak ha van mit friss√≠teni)
            if (Object.keys(updateData).length > 0) {
              const { error: updateError } = await supabase
                .from('animals')
                .update(updateData)
                .eq('enar', animal.enar);

              if (updateError) {
                console.error(`‚ùå Friss√≠t√©si hiba ${animal.enar}:`, updateError);
                errorCount++;
                continue;
              }

              updatedCount++;
              importResults.push(`‚úÖ Friss√≠tve: ${animal.enar} (${Object.keys(updateData).length} mez≈ë)`);
            } else {
              importResults.push(`‚ÑπÔ∏è V√°ltozatlan: ${animal.enar} (minden adat aktu√°lis)`);
            }

          } else {
            // ‚ûï √öJ √ÅLLAT - EREDETI INSERT LOGIKA B≈êV√çTVE
            const insertData = {
              enar: animal.enar,
              anya_enar: animal.motherEnar || null,
              ivar: animal.gender === 'n≈ëivar√∫' ? 'n≈ë' : 'h√≠m',
              kategoria: animal.calculatedCategory,
              szuletesi_datum: animal.birthDate,
              has_given_birth: animal.calculatedCategory === 'teh√©n',
              breed: animal.breed,
              birth_location: animal.szarmazasiTenyeszet ? 'v√°s√°rolt' : 'sz√ºletett',
              statusz: animal.calculatedStatus,
              bekerules_datum: animal.bekerulesDatum || new Date().toISOString().split('T')[0],
              apa_kplsz: animal.fatherKPLSZ || null,
              
              // √öJ: Lifecycle mez≈ëk
              kikerulesi_datum: animal.kikerulesiDatum || null,
              elhullas_datum: animal.elhullasDatum || null,
              vagas_datum: animal.vagasDatum || null,
              szarmazasi_tenyeszet: animal.szarmazasiTenyeszet || null,
              celtenyeszet: animal.celtenyeszet || null,
              
              // Alap√©rtelmezett NULL √©rt√©kek v√©dett mez≈ëkh√∂z:
              apa_enar: null,
              kplsz: null,
              pregnancy_status: null,
              vv_date: null,
              pairing_date: null,
              expected_birth_date: null,
              last_birth_date: null,
              farm_id: null // RLS kompatibilit√°s
            };

            const { error: insertError } = await supabase
              .from('animals')
              .insert(insertData);

            if (insertError) {
              console.error(`‚ùå Besz√∫r√°si hiba ${animal.enar}:`, insertError);
              errorCount++;
              continue;
            }

            insertedCount++;
            importResults.push(`‚ûï √öj √°llat: ${animal.enar}`);
          }
        } catch (animalError: any) {
          console.error(`‚ùå √Ållat feldolgoz√°si hiba ${animal.enar}:`, animalError);
          errorCount++;
        }
      }

      // Eredm√©nyek logging
      console.log(`üéâ Ultra-Safe Import befejezve!`);
      console.log(`üìä Statisztika:`);
      console.log(`   ‚Ä¢ ${updatedCount} √°llat friss√≠tve`);
      console.log(`   ‚Ä¢ ${insertedCount} √∫j √°llat`);
      console.log(`   ‚Ä¢ ${protectedCount} v√©dett adat meg≈ërizve`);
      console.log(`   ‚Ä¢ ${errorCount} hiba`);
      console.log(`üîç R√©szletes eredm√©nyek:`, importResults);

      // UI friss√≠t√©s
      setImportStats(prev => ({
        ...prev,
        updated: updatedCount,
        inserted: insertedCount,
        protected: protectedCount,
        errors: errorCount
      }));

      setStep(4);
    } catch (error: any) {
      console.error('‚ùå Kritikus import hiba:', error);
      alert(`Import hiba t√∂rt√©nt: ${error?.message || 'Ismeretlen hiba'}. Telepi adatok biztons√°gban vannak.`);
    } finally {
      setIsImporting(false);
    }
  };

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = event.target.files?.[0];
    if (selectedFile) {
      setFile(selectedFile);
      setStep(2);
    }
  };

  return (
    <div className="p-6">
      <div className="max-w-4xl mx-auto">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">

          {/* Header */}
          <div className="mb-6">
            <h1 className="text-2xl font-bold text-gray-900 mb-2">üõ°Ô∏è Ultra-Safe Import/Export</h1>
            <p className="text-gray-600">Excel √°llatlista import√°l√°sa v√©dett telepi logik√°val</p>
          </div>

          {/* Progress Steps */}
          <div className="flex items-center justify-between mb-8">
            {[1, 2, 3, 4].map((stepNum) => (
              <div key={stepNum} className="flex items-center">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${step >= stepNum ? 'bg-green-600 text-white' : 'bg-gray-200 text-gray-500'
                  }`}>
                  {step > stepNum ? <Check size={16} /> : stepNum}
                </div>
                {stepNum < 4 && (
                  <div className={`w-16 h-1 mx-2 ${step > stepNum ? 'bg-green-600' : 'bg-gray-200'
                    }`} />
                )}
              </div>
            ))}
          </div>

          {/* Step 1: File Upload */}
          {step === 1 && (
            <div className="text-center">
              <FileSpreadsheet className="w-16 h-16 text-green-600 mx-auto mb-4" />
              <h2 className="text-2xl font-bold mb-4">üõ°Ô∏è Ultra-Safe Excel Import</h2>
              <p className="text-gray-600 mb-6">
                T√∂lts fel Excel f√°jlt az automatikus import√°l√°shoz. A telepi logika 100% v√©dett!
              </p>

              <div className="bg-green-50 border border-green-200 p-4 rounded-lg mb-6">
                <h3 className="font-semibold mb-2 text-green-800">‚úÖ Ultra-Safe Garanci√°k:</h3>
                <div className="text-sm text-green-700 grid grid-cols-1 md:grid-cols-2 gap-2">
                  <div>‚Ä¢ Apa ENAR kapcsolatok meg≈ërz√©se</div>
                  <div>‚Ä¢ Teny√©szbika KPLSZ adatok v√©delme</div>
                  <div>‚Ä¢ Kateg√≥ria sz√°m√≠t√°sok v√°ltozatlanul</div>
                  <div>‚Ä¢ Ell√©si t√∂rt√©net (has_given_birth) v√©dett</div>
                  <div>‚Ä¢ VV eredm√©nyek √©rintetlenek</div>
                  <div>‚Ä¢ P√°ros√≠t√°si d√°tumok megmaradnak</div>
                </div>
              </div>

              <div className="bg-blue-50 p-4 rounded-lg mb-6">
                <h3 className="font-semibold mb-2">üìä T√°mogatott Excel t√≠pusok:</h3>
                <div className="text-sm text-gray-700 grid grid-cols-1 md:grid-cols-2 gap-2">
                  <div>
                    <strong>Excel 1 (R√©szletes):</strong>
                    <div className="text-xs mt-1">Egyed sz√°ma, Fajta, KPLSZ, Sz√≠n</div>
                  </div>
                  <div>
                    <strong>Excel 2 (Lifecycle):</strong>
                    <div className="text-xs mt-1">Beker√ºl√©s, Kiker√ºl√©s, Elhull√°s d√°tumok</div>
                  </div>
                </div>
              </div>

              <label className="bg-green-600 text-white px-6 py-3 rounded-lg cursor-pointer hover:bg-green-700 inline-flex items-center gap-2">
                <Upload size={20} />
                Excel F√°jl Kiv√°laszt√°sa
                <input
                  type="file"
                  accept=".xlsx,.xls,.csv"
                  onChange={handleFileSelect}
                  className="hidden"
                />
              </label>
            </div>
          )}

          {/* Step 2: Confirmation */}
          {step === 2 && (
            <div className="text-center">
              <FileSpreadsheet className="w-16 h-16 text-green-600 mx-auto mb-4" />
              <h2 className="text-2xl font-bold mb-4">F√°jl Kiv√°lasztva</h2>
              <div className="bg-gray-50 p-4 rounded-lg mb-6">
                <p className="font-medium">{file?.name}</p>
                <p className="text-sm text-gray-600">
                  M√©ret: {((file?.size || 0) / 1024).toFixed(1)} KB
                </p>
              </div>

              <div className="bg-green-50 border border-green-200 p-4 rounded-lg mb-6">
                <div className="flex items-start gap-3">
                  <AlertCircle className="text-green-600 mt-1" size={20} />
                  <div className="text-left">
                    <h3 className="font-semibold text-green-800">üõ°Ô∏è Ultra-Safe Import folyamat:</h3>
                    <ul className="text-sm text-green-700 mt-1 space-y-1">
                      <li>‚Ä¢ Dual Excel detekt√°l√°s (Excel 1 vs Excel 2)</li>
                      <li>‚Ä¢ ENAR normaliz√°l√°s √©s valid√°ci√≥</li>
                      <li>‚Ä¢ V√©dett mez≈ëk automatikus meg≈ërz√©se</li>
                      <li>‚Ä¢ Csak NULL mez≈ëk biztons√°gos kit√∂lt√©se</li>
                      <li>‚Ä¢ Lifecycle adatok hozz√°ad√°sa</li>
                      <li>‚Ä¢ Hibakezel√©ssel √©s rollback-kel</li>
                    </ul>
                  </div>
                </div>
              </div>

              <button
                onClick={() => file && processExcelFile(file)}
                className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 inline-flex items-center gap-2"
              >
                üõ°Ô∏è Ultra-Safe Feldolgoz√°s Ind√≠t√°sa
                <ArrowRight size={20} />
              </button>
            </div>
          )}

          {/* Step 3: Results */}
          {step === 3 && (
            <div>
              <h2 className="text-2xl font-bold mb-4">üõ°Ô∏è Ultra-Safe Import Preview</h2>

              {isProcessing ? (
                <div className="text-center py-8">
                  <div className="animate-spin w-8 h-8 border-4 border-green-600 border-t-transparent rounded-full mx-auto mb-4"></div>
                  <p>Dual Excel feldolgoz√°s folyamatban...</p>
                </div>
              ) : (
                <>
                  {/* Enhanced Statistics */}
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                    <div className="bg-gray-50 p-4 rounded-lg text-center">
                      <div className="text-2xl font-bold text-gray-600">{importStats.total}</div>
                      <div className="text-sm text-gray-600">√ñsszes √°llat</div>
                    </div>
                    <div className="bg-green-50 p-4 rounded-lg text-center">
                      <div className="text-2xl font-bold text-green-600">{importStats.valid}</div>
                      <div className="text-sm text-gray-600">√ârv√©nyes</div>
                    </div>
                    <div className="bg-blue-50 p-4 rounded-lg text-center">
                      <div className="text-2xl font-bold text-blue-600">
                        {importedData.filter(a => a.bekerulesDatum || a.kikerulesiDatum).length}
                      </div>
                      <div className="text-sm text-gray-600">Lifecycle adat</div>
                    </div>
                    <div className="bg-red-50 p-4 rounded-lg text-center">
                      <div className="text-2xl font-bold text-red-600">{importStats.errors}</div>
                      <div className="text-sm text-gray-600">Hib√°s</div>
                    </div>
                  </div>

                  {/* Protection Info */}
                  <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
                    <h3 className="font-semibold text-green-800 mb-2 flex items-center gap-2">
                      üõ°Ô∏è Ultra-Safe V√©delem Akt√≠v
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                      <div>
                        <div className="font-medium text-green-700">V√©dett mez≈ëk:</div>
                        <div className="text-green-600 text-xs">apa_enar, kplsz, kategoria, has_given_birth</div>
                      </div>
                      <div>
                        <div className="font-medium text-green-700">Biztons√°gos friss√≠t√©s:</div>
                        <div className="text-green-600 text-xs">Csak NULL mez≈ëk kit√∂lt√©se</div>
                      </div>
                      <div>
                        <div className="font-medium text-green-700">√öj adatok:</div>
                        <div className="text-green-600 text-xs">Lifecycle inform√°ci√≥k hozz√°ad√°sa</div>
                      </div>
                    </div>
                  </div>

                  {/* Animals List */}
                  <div className="border rounded-lg overflow-hidden mb-6">
                    <div className="bg-gray-50 px-4 py-2 font-medium border-b">
                      Feldolgozott √Ållatok - Ultra-Safe Preview
                    </div>
                    <div className="max-h-64 overflow-y-auto">
                      {importedData.map((animal, index) => (
                        <div key={index} className="px-4 py-3 border-b last:border-b-0 bg-white">
                          <div className="flex items-center justify-between">
                            <div>
                              <div className="font-medium">
                                {displayEnar(animal.enar)}
                                <span className="ml-2 text-sm text-green-600 bg-green-100 px-2 py-1 rounded">
                                  #{getShortEnar(animal.enar)}
                                </span>
                              </div>
                              <div className="text-sm text-gray-600">
                                {animal.calculatedCategory} ‚Ä¢ {animal.breed}
                                {animal.color && ` ‚Ä¢ ${animal.color}`}
                                {animal.fatherKPLSZ && ` ‚Ä¢ Apa KPLSZ: ${animal.fatherKPLSZ}`}
                                {animal.calculatedStatus !== 'akt√≠v' && ` ‚Ä¢ ${animal.calculatedStatus}`}
                              </div>
                            </div>
                            <Check className="text-green-600" size={20} />
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Action Buttons */}
                  <div className="flex gap-4">
                    <button
                      onClick={handleConfirmImport}
                      disabled={importStats.valid === 0 || isImporting}
                      className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                    >
                      {isImporting ? (
                        <>
                          <div className="animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full"></div>
                          Ultra-Safe Import folyamatban...
                        </>
                      ) : (
                        <>
                          <Database size={20} />
                          üõ°Ô∏è {importStats.valid} √Ållat Ultra-Safe Import√°l√°sa
                        </>
                      )}
                    </button>

                    <button
                      onClick={() => setStep(1)}
                      disabled={isImporting}
                      className="bg-gray-600 text-white px-6 py-3 rounded-lg hover:bg-gray-700 disabled:opacity-50"
                    >
                      √öj F√°jl V√°laszt√°sa
                    </button>
                  </div>
                </>
              )}
            </div>
          )}

          {/* Step 4: Success - ENHANCED */}
          {step === 4 && (
            <div className="text-center">
              <Check className="w-16 h-16 text-green-600 mx-auto mb-4" />
              <h2 className="text-2xl font-bold mb-4">üõ°Ô∏è Ultra-Safe Import Sikeres!</h2>
              <p className="text-gray-600 mb-6">
                Telepi logika 100% meg≈ërizve, √∫j adatok biztons√°gosan integr√°lva!
              </p>

              {/* Success Statistics */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                <div className="bg-blue-50 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-blue-600">{importStats.updated || 0}</div>
                  <div className="text-sm text-blue-600">Friss√≠tett √°llat</div>
                </div>
                <div className="bg-green-50 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-green-600">{importStats.inserted || 0}</div>
                  <div className="text-sm text-green-600">√öj √°llat</div>
                </div>
                <div className="bg-yellow-50 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-yellow-600">{importStats.protected || 0}</div>
                  <div className="text-sm text-yellow-600">V√©dett adat</div>
                </div>
                <div className="bg-gray-50 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-gray-600">{importStats.errors || 0}</div>
                  <div className="text-sm text-gray-600">Hiba</div>
                </div>
              </div>

              <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
                <h3 className="font-semibold text-green-800 mb-2">üéâ Import Sikeres - K√∂vetkez≈ë L√©p√©sek:</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-700">
                  <div>
                    <h4 className="font-medium text-green-700">‚úÖ Sikeresen Meg≈ërz√∂tt:</h4>
                    <ul className="text-xs space-y-1 mt-1">
                      <li>‚Ä¢ Apa ENAR kapcsolatok</li>
                      <li>‚Ä¢ Teny√©szbika KPLSZ adatok</li>
                      <li>‚Ä¢ Automatikus kateg√≥ria sz√°m√≠t√°sok</li>
                      <li>‚Ä¢ Ell√©si t√∂rt√©net (has_given_birth)</li>
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-medium text-green-700">üìä √öjonnan Hozz√°adott:</h4>
                    <ul className="text-xs space-y-1 mt-1">
                      <li>‚Ä¢ Val√≥s beker√ºl√©si d√°tumok</li>
                      <li>‚Ä¢ Kiker√ºl√©si/elhull√°si adatok</li>
                      <li>‚Ä¢ Teny√©szet inform√°ci√≥k</li>
                      <li>‚Ä¢ Apa KPLSZ kieg√©sz√≠t√©sek</li>
                    </ul>
                  </div>
                </div>
              </div>

              <div className="flex gap-4 justify-center">
                <button
                  onClick={() => window.open('/dashboard/animals', '_blank')}
                  className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700"
                >
                  üìä √Ållatok Megtekint√©se
                </button>

                <button
                  onClick={() => window.open('/dashboard/analytics', '_blank')}
                  className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700"
                >
                  üìà Statisztik√°k
                </button>

                <button
                  onClick={() => { 
                    setStep(1); 
                    setImportedData([]); 
                    setFile(null); 
                    setImportStats({ total: 0, valid: 0, errors: 0, updated: 0, inserted: 0, protected: 0 });
                  }}
                  className="bg-gray-600 text-white px-6 py-3 rounded-lg hover:bg-gray-700"
                >
                  üîÑ √öj Import√°l√°s
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ImportExportPage;