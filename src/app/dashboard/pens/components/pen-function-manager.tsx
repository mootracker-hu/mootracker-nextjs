// src/app/dashboard/pens/components/pen-function-manager.tsx
'use client';

import { useState } from 'react';
import { X, Settings, AlertTriangle, CheckCircle, Calendar, User, Heart, Clock, Shield, Package } from 'lucide-react';
import { PenFunctionType, PEN_FUNCTION_LABELS, NOTES_TEMPLATES, KorhazMetadata, AtmenetiMetadata, KarantenMetadata, SelejtMetadata } from '@/types/alert-task-types';

interface Pen {
  id: string;
  pen_number: string;
  pen_type: 'outdoor' | 'barn' | 'birthing';
  capacity: number;
  location?: string;
  current_function?: PenFunction;
  animal_count: number;
}

interface PenFunction {
  id: string;
  function_type: PenFunctionType;
  start_date: string;
  metadata: any;
  notes?: string;
}

interface PenFunctionManagerProps {
  isOpen: boolean;
  onClose: () => void;
  pen: Pen;
  onFunctionChange: (newFunction: PenFunctionType, metadata: any, notes: string) => void;
}

export default function PenFunctionManager({
  isOpen,
  onClose,
  pen,
  onFunctionChange
}: PenFunctionManagerProps) {
  const [newFunction, setNewFunction] = useState<PenFunctionType>(pen.current_function?.function_type || '√ºres');
  const [notes, setNotes] = useState(pen.current_function?.notes || '');
  const [customNotes, setCustomNotes] = useState('');
  const [loading, setLoading] = useState(false);
  
  // H√°rem specifikus mez≈ëk
  const [tenyeszbikaName, setTenyeszbikaName] = useState(pen.current_function?.metadata?.tenyeszbika_name || '');
  const [tenyeszbikaEnar, setTenyeszbikaEnar] = useState(pen.current_function?.metadata?.tenyeszbika_enar || '');
  const [parozasKezdete, setParozasKezdete] = useState(pen.current_function?.metadata?.parozas_kezdete || '');

  // K√≥rh√°z specifikus mez≈ëk
  const [treatmentType, setTreatmentType] = useState<KorhazMetadata['treatment_type']>('megfigyeles');
  const [veterinarian, setVeterinarian] = useState('');
  const [expectedRecovery, setExpectedRecovery] = useState('');
  const [returnPenId, setReturnPenId] = useState('');

  // √Åtmeneti specifikus mez≈ëk
  const [atmenetiReason, setAtmenetiReason] = useState<AtmenetiMetadata['reason']>('besorol√°s_alatt');
  const [decisionDeadline, setDecisionDeadline] = useState('');
  const [decisionCriteria, setDecisionCriteria] = useState('');

  // Karant√©n specifikus mez≈ëk
  const [quarantineReason, setQuarantineReason] = useState<KarantenMetadata['quarantine_reason']>('uj_allat');
  const [expectedEndDate, setExpectedEndDate] = useState('');
  const [releaseCriteria, setReleaseCriteria] = useState('');

  // Selejt specifikus mez≈ëk
  const [selejtReason, setSelejtReason] = useState<SelejtMetadata['reason']>('reprodukcios_problema');
  const [plannedDisposal, setPlannedDisposal] = useState<SelejtMetadata['planned_disposal']>('ertekesites');
  const [disposalDeadline, setDisposalDeadline] = useState('');

  // ‚úÖ B≈êV√çTETT FUNKCI√ì T√çPUSOK
  const functionTypes = [
    { value: 'b√∂lcsi' as PenFunctionType, label: 'üêÆ B√∂lcsi', description: '0-12 h√≥napos borjak nevel√©se', color: 'blue' },
    { value: '√≥vi' as PenFunctionType, label: 'üêÑ √ìvi', description: '12-24 h√≥napos √ºsz≈ëk nevel√©se', color: 'green' },
    { value: 'h√°rem' as PenFunctionType, label: 'üêÑüíï H√°rem', description: 'Teny√©szt√©sben l√©v≈ë √ºsz≈ëk/tehenek', color: 'pink' },
    { value: 'vemhes' as PenFunctionType, label: 'üêÑüíñ Vemhes', description: 'Vemhes √°llatok ell√©sre v√°rva', color: 'purple' },
    { value: 'h√≠z√≥bika' as PenFunctionType, label: 'üêÇ H√≠z√≥bika', description: 'H√∫stermel√©s c√©lj√°b√≥l tartott bik√°k', color: 'orange' },
    { value: 'ellet≈ë' as PenFunctionType, label: 'üêÑüçº Ellet≈ë', description: 'Ell√©s k√∂r√ºl l√©v≈ë tehenek', color: 'red' },
    { value: 'teh√©n' as PenFunctionType, label: 'üêÑüçº Teh√©n', description: 'Borj√°val egy√ºtt tartott tehenek', color: 'yellow' },
    { value: '√ºres' as PenFunctionType, label: '‚≠ï √úres', description: 'Jelenleg nincs haszn√°latban', color: 'gray' },
    
    // ‚úÖ √öJ KAR√ÅM T√çPUSOK
    { value: '√°tmeneti' as PenFunctionType, label: 'üîÑ √Åtmeneti', description: 'Ideiglenes elhelyez√©s, d√∂nt√©s alatt', color: 'indigo' },
    { value: 'k√≥rh√°z' as PenFunctionType, label: 'üè• K√≥rh√°z', description: 'Kezel√©s alatt l√©v≈ë √°llatok', color: 'red' },
    { value: 'karant√©n' as PenFunctionType, label: 'üîí Karant√©n', description: 'Elk√ºl√∂n√≠tett √°llatok', color: 'yellow' },
    { value: 'selejt' as PenFunctionType, label: 'üì¶ Selejt', description: '√ârt√©kes√≠t√©sre/v√°g√°sra v√°r√≥ √°llatok', color: 'slate' }
  ];

  // Ellet≈ë karamokra csak ellet≈ë √©s √ºres funkci√≥
  const getAvailableFunctions = () => {
    if (pen.pen_type === 'birthing') {
      return functionTypes.filter(func => ['ellet≈ë', '√ºres', 'k√≥rh√°z'].includes(func.value));
    }
    // Ellet≈ë csak ellet≈ë karamokban, de k√≥rh√°z b√°rhol lehet
    return functionTypes.filter(func => func.value !== 'ellet≈ë');
  };

  // ‚úÖ RUGALMAS KAPACIT√ÅS SZ√ÅM√çT√ÅS
  const calculateNewCapacity = (functionType: PenFunctionType): number => {
    // Ellet≈ë ist√°ll√≥ kapacit√°sok
    if (pen.pen_number.startsWith('E')) {
      if (['E1', 'E2', 'E7', 'E8'].includes(pen.pen_number)) return 25;
      return 2; // EB boxok: 1 mama + 1 borj√∫ = 2 kapacit√°s
    }
    
    // K√ºls≈ë karamok funkci√≥-alap√∫ kapacit√°sa
    const isLargePen = ['14', '15'].includes(pen.pen_number);
    const isContainerPen = ['12A', '12B'].includes(pen.pen_number);
    
    if (isLargePen) return 50;
    if (isContainerPen) return 15;
    
    // Standard karamok funkci√≥ szerint
    switch (functionType) {
      case 'h√°rem': return 27; // 25 n≈ëivar + 2 teny√©szbika
      case 'vemhes': return 30;
      case 'teh√©n': return 40; // 20 teh√©n + borjak + 2 teny√©szbika
      case 'b√∂lcsi': return 25;
      case '√≥vi': return 25;
      case 'h√≠z√≥bika': return 20;
      
      // ‚úÖ √öJ T√çPUSOK - RUGALMAS KAPACIT√ÅS
      case 'k√≥rh√°z': return Math.min(5, pen.capacity); // Max 5, de alkalmazkodik
      case '√°tmeneti': return pen.capacity; // Rugalmas, eredeti kapacit√°s
      case 'karant√©n': return Math.min(10, pen.capacity); // Max 10 elk√ºl√∂n√≠t√©sre
      case 'selejt': return pen.capacity; // Rugalmas
      
      default: return 25;
    }
  };

  // Kapacit√°s figyelmeztet√©s
  const getCapacityWarning = (): string | null => {
    if (!newFunction) return null;
    
    const newCapacity = calculateNewCapacity(newFunction);
    const currentAnimals = pen.animal_count;
    
    // Speci√°lis √ºzenetek az √∫j t√≠pusokhoz
    if (newFunction === 'k√≥rh√°z' && currentAnimals > 5) {
      return 'K√≥rh√°z kar√°m: Maximum 5 √°llat aj√°nlott intenz√≠v megfigyel√©shez.';
    }
    
    if (newFunction === '√°tmeneti') {
      return '√Åtmeneti kar√°m: Rugalmas kapacit√°s, id≈ëben korl√°tozott haszn√°lat.';
    }
    
    if (currentAnimals > newCapacity) {
      return `Figyelem: ${currentAnimals - newCapacity} √°llattal t√∫ll√©pi az √∫j kapacit√°st! √Ållatok √°thelyez√©se sz√ºks√©ges.`;
    }
    if (currentAnimals === newCapacity) {
      return 'A kar√°m tele lesz az √∫j funkci√≥val.';
    }
    return null;
  };

  // ‚úÖ METADATA √ñSSZE√ÅLL√çT√ÅSA
  const buildMetadata = (): any => {
    const baseMetadata: any = {};
    
    switch (newFunction) {
      case 'h√°rem':
        if (tenyeszbikaName) baseMetadata.tenyeszbika_name = tenyeszbikaName;
        if (tenyeszbikaEnar) baseMetadata.tenyeszbika_enar = tenyeszbikaEnar;
        if (parozasKezdete) baseMetadata.parozas_kezdete = parozasKezdete;
        break;
        
      case 'k√≥rh√°z':
        const korhazMeta: KorhazMetadata = {
          treatment_type: treatmentType,
          treatment_start_date: new Date().toISOString(),
          expected_recovery_date: expectedRecovery || undefined,
          veterinarian: veterinarian || undefined,
          return_pen_id: returnPenId || undefined,
          treatment_notes: customNotes || undefined
        };
        Object.assign(baseMetadata, korhazMeta);
        break;
        
      case '√°tmeneti':
        const atmenetiMeta: AtmenetiMetadata = {
          reason: atmenetiReason,
          temporary_since: new Date().toISOString(),
          decision_deadline: decisionDeadline || undefined,
          decision_criteria: decisionCriteria || undefined,
          notes: customNotes || undefined
        };
        Object.assign(baseMetadata, atmenetiMeta);
        break;
        
      case 'karant√©n':
        const karantenMeta: KarantenMetadata = {
          quarantine_reason: quarantineReason,
          quarantine_start_date: new Date().toISOString(),
          expected_end_date: expectedEndDate || undefined,
          release_criteria: releaseCriteria || undefined,
          notes: customNotes || undefined
        };
        Object.assign(baseMetadata, karantenMeta);
        break;
        
      case 'selejt':
        const selejtMeta: SelejtMetadata = {
          reason: selejtReason,
          planned_disposal: plannedDisposal,
          disposal_deadline: disposalDeadline || undefined,
          notes: customNotes || undefined
        };
        Object.assign(baseMetadata, selejtMeta);
        break;
    }
    
    return baseMetadata;
  };

  // Funkci√≥ v√°ltoztat√°s
  const handleFunctionChange = async () => {
    if (!newFunction) return;

    setLoading(true);
    try {
      const metadata = buildMetadata();
      const finalNotes = notes + (customNotes ? `\n\n${customNotes}` : '');
      
      await onFunctionChange(newFunction, metadata, finalNotes);
      onClose();
    } catch (error) {
      console.error('Hiba a funkci√≥ v√°lt√°skor:', error);
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  const availableFunctions = functionTypes;
  const capacityWarning = getCapacityWarning();
  const newCapacity = newFunction ? calculateNewCapacity(newFunction) : pen.capacity;
  const selectedTemplate = NOTES_TEMPLATES[newFunction];

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
      <div className="relative top-10 mx-auto p-0 border max-w-4xl shadow-lg rounded-lg bg-white">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center">
            <Settings className="h-6 w-6 text-green-600 mr-3" />
            <h3 className="text-lg font-medium text-gray-900">
              Kar√°m {pen.pen_number} - Funkci√≥ Kezel√©s
            </h3>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <X className="h-6 w-6" />
          </button>
        </div>

        {/* Content */}
        <div className="p-6 max-h-[80vh] overflow-y-auto">
          {/* Jelenlegi √°llapot */}
          <div className="mb-6 p-4 bg-gray-50 rounded-lg border border-gray-200">
            <h4 className="font-medium text-gray-900 mb-2">Jelenlegi √Ållapot:</h4>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-gray-600">Funkci√≥:</span>
                <p className="font-medium">{PEN_FUNCTION_LABELS[pen.current_function?.function_type || '√ºres']}</p>
              </div>
              <div>
                <span className="text-gray-600">Kapacit√°s:</span>
                <p className="font-medium">{pen.animal_count}/{pen.capacity} √°llat</p>
              </div>
              <div>
                <span className="text-gray-600">Funkci√≥ kezdete:</span>
                <p className="font-medium">
                  {pen.current_function?.start_date ? 
                    new Date(pen.current_function.start_date).toLocaleDateString('hu-HU') : 
                    'Nincs adat'
                  }
                </p>
              </div>
              <div>
                <span className="text-gray-600">Lok√°ci√≥:</span>
                <p className="font-medium">{pen.location}</p>
              </div>
            </div>
          </div>

          <div className="space-y-6">
            {/* √öj funkci√≥ v√°laszt√°s */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                √öj funkci√≥: *
              </label>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {availableFunctions.map(funcType => (
                  <label key={funcType.value} className="cursor-pointer">
                    <div className={`p-4 border rounded-lg transition-colors ${
                      newFunction === funcType.value 
                        ? 'border-green-500 bg-green-50' 
                        : 'border-gray-200 hover:border-gray-300'
                    }`}>
                      <div className="flex items-center">
                        <input
                          type="radio"
                          name="function"
                          value={funcType.value}
                          checked={newFunction === funcType.value}
                          onChange={(e) => setNewFunction(e.target.value as PenFunctionType)}
                          className="h-4 w-4 text-green-600 border-gray-300 focus:ring-green-500"
                        />
                        <div className="ml-3">
                          <div className="text-sm font-medium text-gray-900">{funcType.label}</div>
                          <div className="text-xs text-gray-500">{funcType.description}</div>
                          {newFunction === funcType.value && (
                            <div className="text-xs text-green-600 mt-1">
                              √öj kapacit√°s: {newCapacity} √°llat
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </label>
                ))}
              </div>
            </div>

            {/* Kapacit√°s figyelmeztet√©s */}
            {capacityWarning && (
              <div className={`p-4 rounded-lg flex items-start ${
                capacityWarning.includes('t√∫ll√©pi') ? 'bg-red-50 border border-red-200' : 'bg-yellow-50 border border-yellow-200'
              }`}>
                <AlertTriangle className={`h-5 w-5 mt-0.5 mr-3 ${
                  capacityWarning.includes('t√∫ll√©pi') ? 'text-red-600' : 'text-yellow-600'
                }`} />
                <div>
                  <div className={`text-sm font-medium ${
                    capacityWarning.includes('t√∫ll√©pi') ? 'text-red-800' : 'text-yellow-800'
                  }`}>
                    Kapacit√°s Inform√°ci√≥
                  </div>
                  <div className={`text-sm ${
                    capacityWarning.includes('t√∫ll√©pi') ? 'text-red-700' : 'text-yellow-700'
                  }`}>
                    {capacityWarning}
                  </div>
                </div>
              </div>
            )}

            {/* ‚úÖ FUNKCI√ì-SPECIFIKUS BE√ÅLL√çT√ÅSOK */}
            
            {/* H√°rem specifikus mez≈ëk */}
            {newFunction === 'h√°rem' && (
              <div className="p-4 bg-pink-50 border border-pink-200 rounded-lg">
                <h4 className="font-medium text-pink-900 mb-4 flex items-center">
                  <Heart className="h-4 w-4 mr-2" />
                  H√°rem Be√°ll√≠t√°sok
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-pink-700 mb-1">
                      Teny√©szbika neve:
                    </label>
                    <input
                      type="text"
                      value={tenyeszbikaName}
                      onChange={(e) => setTenyeszbikaName(e.target.value)}
                      className="w-full border border-pink-300 rounded-md px-3 py-2 focus:ring-pink-500 focus:border-pink-500"
                      placeholder="pl. Buksi"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-pink-700 mb-1">
                      Teny√©szbika ENAR:
                    </label>
                    <input
                      type="text"
                      value={tenyeszbikaEnar}
                      onChange={(e) => setTenyeszbikaEnar(e.target.value)}
                      className="w-full border border-pink-300 rounded-md px-3 py-2 focus:ring-pink-500 focus:border-pink-500"
                      placeholder="HU 12345 6789 0"
                    />
                  </div>
                  <div className="md:col-span-2">
                    <label className="block text-sm font-medium text-pink-700 mb-1">
                      P√°rz√°s kezdete:
                    </label>
                    <input
                      type="date"
                      value={parozasKezdete}
                      onChange={(e) => setParozasKezdete(e.target.value)}
                      className="w-full border border-pink-300 rounded-md px-3 py-2 focus:ring-pink-500 focus:border-pink-500"
                    />
                  </div>
                </div>
              </div>
            )}

            {/* K√≥rh√°z specifikus mez≈ëk */}
            {newFunction === 'k√≥rh√°z' && (
              <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
                <h4 className="font-medium text-red-900 mb-4 flex items-center">
                  <Heart className="h-4 w-4 mr-2" />
                  K√≥rh√°z Be√°ll√≠t√°sok
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-red-700 mb-1">
                      Kezel√©s t√≠pusa:
                    </label>
                    <select
                      value={treatmentType}
                      onChange={(e) => setTreatmentType(e.target.value as KorhazMetadata['treatment_type'])}
                      className="w-full border border-red-300 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500"
                    >
                      <option value="megfigyeles">Megfigyel√©s</option>
                      <option value="gyogykezeles">Gy√≥gykezel√©s</option>
                      <option value="vakcinazas">Vakcin√°z√°s</option>
                      <option value="sebezes">Seb√©szet</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-red-700 mb-1">
                      √Ållatorvos:
                    </label>
                    <input
                      type="text"
                      value={veterinarian}
                      onChange={(e) => setVeterinarian(e.target.value)}
                      className="w-full border border-red-300 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500"
                      placeholder="Dr. Nagy P√©ter"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-red-700 mb-1">
                      V√°rhat√≥ gy√≥gyul√°s:
                    </label>
                    <input
                      type="date"
                      value={expectedRecovery}
                      onChange={(e) => setExpectedRecovery(e.target.value)}
                      className="w-full border border-red-300 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-red-700 mb-1">
                      Visszahelyez√©s kar√°m ID:
                    </label>
                    <input
                      type="text"
                      value={returnPenId}
                      onChange={(e) => setReturnPenId(e.target.value)}
                      className="w-full border border-red-300 rounded-md px-3 py-2 focus:ring-red-500 focus:border-red-500"
                      placeholder="Eredeti kar√°m ID"
                    />
                  </div>
                </div>
              </div>
            )}

            {/* √Åtmeneti specifikus mez≈ëk */}
            {newFunction === '√°tmeneti' && (
              <div className="p-4 bg-indigo-50 border border-indigo-200 rounded-lg">
                <h4 className="font-medium text-indigo-900 mb-4 flex items-center">
                  <Clock className="h-4 w-4 mr-2" />
                  √Åtmeneti Be√°ll√≠t√°sok
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-indigo-700 mb-1">
                      Ide ker√ºl√©s oka:
                    </label>
                    <select
                      value={atmenetiReason}
                      onChange={(e) => setAtmenetiReason(e.target.value as AtmenetiMetadata['reason'])}
                      className="w-full border border-indigo-300 rounded-md px-3 py-2 focus:ring-indigo-500 focus:border-indigo-500"
                    >
                      <option value="besorol√°s_alatt">Besorol√°s alatt</option>
                      <option value="funkci√≥_v√°lt√°s_alatt">Funkci√≥ v√°lt√°s alatt</option>
                      <option value="vizsg√°lat_alatt">Vizsg√°lat alatt</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-indigo-700 mb-1">
                      D√∂nt√©si hat√°rid≈ë:
                    </label>
                    <input
                      type="date"
                      value={decisionDeadline}
                      onChange={(e) => setDecisionDeadline(e.target.value)}
                      className="w-full border border-indigo-300 rounded-md px-3 py-2 focus:ring-indigo-500 focus:border-indigo-500"
                    />
                  </div>
                  <div className="md:col-span-2">
                    <label className="block text-sm font-medium text-indigo-700 mb-1">
                      D√∂nt√©si krit√©riumok:
                    </label>
                    <input
                      type="text"
                      value={decisionCriteria}
                      onChange={(e) => setDecisionCriteria(e.target.value)}
                      className="w-full border border-indigo-300 rounded-md px-3 py-2 focus:ring-indigo-500 focus:border-indigo-500"
                      placeholder="VV eredm√©ny, eg√©szs√©g√ºgyi vizsg√°lat, stb."
                    />
                  </div>
                </div>
              </div>
            )}

            {/* Notes Template + Szabad sz√∂veg */}
            <div className="space-y-4">
              {/* Template preview */}
              {selectedTemplate && (
                <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                  <h4 className="font-medium text-blue-900 mb-2">üìù Javasolt mez≈ëk ({PEN_FUNCTION_LABELS[newFunction]}):</h4>
                  <pre className="text-sm text-blue-800 whitespace-pre-wrap font-mono bg-white p-3 rounded border">
                    {selectedTemplate}
                  </pre>
                </div>
              )}

              {/* Szabad megjegyz√©sek */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Egyedi megjegyz√©sek:
                </label>
                <textarea 
                  value={customNotes}
                  onChange={(e) => setCustomNotes(e.target.value)}
                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-green-500 focus:border-green-500"
                  rows={4}
                  placeholder="√çrj ide b√°rmilyen megjegyz√©st, megfigyel√©st a kar√°mmal kapcsolatban..."
                />
              </div>

              {/* √Åltal√°nos megjegyz√©sek */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Funkci√≥ v√°lt√°si megjegyz√©s:
                </label>
                <textarea 
                  value={notes}
                  onChange={(e) => setNotes(e.target.value)}
                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-green-500 focus:border-green-500"
                  rows={2}
                  placeholder="Megjegyz√©s a funkci√≥ v√°lt√°sr√≥l..."
                />
              </div>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="flex items-center justify-end space-x-4 p-6 border-t border-gray-200">
          <button
            onClick={onClose}
            disabled={loading}
            className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 disabled:opacity-50"
          >
            M√©gse
          </button>
          <button
            onClick={handleFunctionChange}
            disabled={!newFunction || newFunction === pen.current_function?.function_type || loading}
            className="px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-md hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
          >
            {loading ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Ment√©s...
              </>
            ) : (
              <>
                <Settings className="h-4 w-4 mr-2" />
                Funkci√≥ V√°lt√°sa
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
}