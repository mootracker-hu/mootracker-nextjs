// src/app/dashboard/pens/components/animal-movement-panel.tsx
'use client';

import React from 'react';
import { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabase';
import { createAutomaticPeriodSnapshot } from '@/lib/penHistorySync';
import { recordAnimalEvent, ALERT_EVENT_TYPES } from '@/lib/alerts/MagyarAlertEngine';
import { displayEnar } from '@/constants/enar-formatter';
import AnimalSelector from '@/components/AnimalSelector';

interface Animal {
  id: number;
  enar: string;
  kategoria: string;
}

interface Pen {
  id: string;
  pen_number: string;
  pen_type: 'outdoor' | 'barn' | 'birthing';
  capacity: number;
  location?: string;
  current_function?: PenFunction;
  animal_count: number;
}

interface PenFunction {
  function_type: 'b√∂lcsi' | '√≥vi' | 'h√°rem' | 'vemhes' | 'h√≠z√≥bika' | 'ellet≈ë' | '√ºres' | 'teh√©n';
}

interface TenyeszbikaOption {
  enar: string;
  kplsz: string;
  name: string;
}

interface AnimalMovementPanelProps {
  isOpen: boolean;
  onClose: () => void;
  selectedAnimals: number[];
  animals: Animal[];
  availablePens: Pen[];
  currentPenId: string;
  isAddMode?: boolean; // √öJ!
  selectedAnimalsForAdd?: number[]; // √öJ!
  setSelectedAnimalsForAdd?: (animals: number[]) => void; // √öJ!
  onMove: (targetPenId: string, reason: string, notes: string, isHistorical?: boolean, moveDate?: string, functionType?: string, metadata?: any) => void;
}

export default function AnimalMovementPanel({
  isOpen,
  onClose,
  selectedAnimals,
  animals,
  availablePens,
  currentPenId,
  isAddMode = false, // √öJ!
  selectedAnimalsForAdd = [], // √öJ!
  setSelectedAnimalsForAdd = () => { }, // √öJ!
  onMove
}: AnimalMovementPanelProps) {
  const [targetPenId, setTargetPenId] = useState('');
  const [movementReason, setMovementReason] = useState('');
  const [notes, setNotes] = useState('');
  const [loading, setLoading] = useState(false);
  const [isHistorical, setIsHistorical] = useState(false);
  const [historicalDate, setHistoricalDate] = useState('');
  const [functionType, setFunctionType] = useState('');

  // H√°rem state v√°ltoz√≥k
  const [availableBulls, setAvailableBulls] = useState<TenyeszbikaOption[]>([]);
  const [selectedBulls, setSelectedBulls] = useState<string[]>([]);
  const [paringStartDate, setPairingStartDate] = useState('');
  const [expectedVVDate, setExpectedVVDate] = useState('');

  // ‚≠ê √öJ: H√ÅREM M√ìDBAN JELENLEGI KAR√ÅM IS V√ÅLASZTHAT√ì
  const [isHaremMode, setIsHaremMode] = useState(false);

  // Teny√©szbik√°k bet√∂lt√©se
  useEffect(() => {
    const fetchBulls = async () => {
      try {
        const { data, error } = await supabase
          .from('animals')
          .select('enar, kplsz, name')
          .eq('kategoria', 'teny√©szbika')
          .eq('statusz', 'akt√≠v')
          .order('name');

        if (error) {
          console.error('Teny√©szbik√°k bet√∂lt√©si hiba:', error);
        } else {
          console.log('‚úÖ Teny√©szbik√°k bet√∂ltve:', data);
          setAvailableBulls(data || []);
        }
      } catch (error) {
        console.error('Teny√©szbik√°k fetch hiba:', error);
      }
    };

    if (isOpen) {
      fetchBulls();
    }
  }, [isOpen]);

  // ‚≠ê √öJ: H√ÅREM M√ìD AUTOMATIKUS BEKAPCSOL√ÅSA
  useEffect(() => {
    if (functionType === 'h√°rem') {
      setIsHaremMode(true);
      // Ha h√°rem funkci√≥t v√°laszt, automatikusan jelenlegi kar√°m legyen a c√©l
      if (!targetPenId && currentPenId) {
        setTargetPenId(currentPenId);
      }
    } else {
      setIsHaremMode(false);
    }
  }, [functionType, currentPenId]);

  // VV d√°tum automatikus sz√°m√≠t√°s
  useEffect(() => {
    if (paringStartDate && functionType === 'h√°rem') {
      const startDate = new Date(paringStartDate);
      const vvDate = new Date(startDate);
      vvDate.setDate(vvDate.getDate() + 75);
      setExpectedVVDate(vvDate.toISOString().split('T')[0]);
    } else {
      setExpectedVVDate('');
    }
  }, [paringStartDate, functionType]);

  // Kiv√°lasztott √°llatok adatai
  const selectedAnimalData = animals.filter(animal => selectedAnimals.includes(animal.id));

  // ‚≠ê JAV√çTOTT: Karamok sz≈±r√©se - h√°rem m√≥dban jelenlegi kar√°m is el√©rhet≈ë
  const filteredPens = availablePens.filter(pen => {
    if (isHaremMode) {
      // H√°rem m√≥dban minden kar√°m el√©rhet≈ë (bele√©rtve a jelenlegi)
      return true;
    } else {
      // Norm√°l mozgat√°sn√°l kiz√°rjuk a jelenlegi karamot
      return pen.id !== currentPenId;
    }
  });

  console.log('üìã Karamok sz≈±r√©s:', {
    isHaremMode,
    currentPenId,
    allPens: availablePens.length,
    filteredPens: filteredPens.length
  });

  // Funkci√≥ emoji
  const getFunctionEmoji = (functionType: string): string => {
    const emojiMap: { [key: string]: string } = {
      'b√∂lcsi': 'üêÆ',
      '√≥vi': 'üêÑ',
      'h√°rem': 'üêÑüíï',
      'vemhes': 'üêÑüíñ',
      'h√≠z√≥bika': 'üêÇ',
      'ellet≈ë': 'üêÑüçº',
      'teh√©n': 'üêÑüçº',
      '√ºres': '‚≠ï'
    };
    return emojiMap[functionType] || '‚ùì';
  };

  // Kapacit√°s ellen≈ërz√©s
  const getCapacityWarning = (pen: Pen): string | null => {
    // Ha ugyanabban a kar√°mban vagyunk (h√°rem be√°ll√≠t√°s), nincs kapacit√°s probl√©ma
    if (pen.id === currentPenId && isHaremMode) {
      return null;
    }

    const remainingCapacity = pen.capacity - pen.animal_count;
    if (remainingCapacity < selectedAnimals.length) {
      return `Figyelem: ${selectedAnimals.length - remainingCapacity} √°llattal t√∫ll√©pi a kapacit√°st!`;
    }
    if (remainingCapacity === selectedAnimals.length) {
      return 'A kar√°m tele lesz ezekkel az √°llatokkal.';
    }
    return null;
  };

  // Mozgat√°s v√©grehajt√°sa
  const handleMove = async () => {
    if (!targetPenId || !movementReason) return;
    if (isHistorical && !historicalDate) return;

    // H√°rem valid√°ci√≥
    if (functionType === 'h√°rem' && (selectedBulls.length === 0 || !paringStartDate)) {
      alert('‚ö†Ô∏è H√°rem funkci√≥ eset√©n k√∂telez≈ë legal√°bb 1 teny√©szbika √©s p√°rz√°si kezdet megad√°sa!');
      return;
    }

    setLoading(true);
    try {
      console.log('üîß AnimalMovementPanel handleMove h√≠v√°s:', {
        targetPenId,
        movementReason,
        notes,
        isHistorical,
        historicalDate,
        functionType,
        selectedBulls,
        paringStartDate,
        expectedVVDate,
        isHaremMode
      });

      // D√°tum form√°z√°s
      const moveDate = isHistorical ? historicalDate : new Date().toISOString().split('T')[0];

      // Metadata k√©sz√≠t√©se h√°rem eset√©n
      let metadata = null;
      if (functionType === 'h√°rem') {
        const bullsData = selectedBulls.map(enar => {
          const bullData = availableBulls.find(bull => bull.enar === enar);
          return {
            enar: enar,
            name: bullData?.name || '',
            kplsz: bullData?.kplsz || ''
          };
        });

        metadata = {
          bulls: bullsData,
          bull_count: selectedBulls.length,
          pairing_start_date: paringStartDate,
          expected_vv_date: expectedVVDate,
          pairing_method: 'natural'
        };
      }

      await onMove(targetPenId, movementReason, notes, isHistorical, moveDate, functionType, metadata);

      // ‚úÖ √öJ: AUTOMATIKUS ESEM√âNY R√ñGZ√çT√âS
      if (!isHistorical && functionType) {
        try {
          let eventType: string | null = null;

          // Esem√©ny t√≠pus meghat√°roz√°sa
          if (functionType === '√≥vi') {
            eventType = ALERT_EVENT_TYPES.MOVED_TO_OVI_PEN;
          } else if (functionType === 'h√°rem') {
            eventType = ALERT_EVENT_TYPES.MOVED_TO_HAREM_PEN;
          } else if (functionType === 'ellet≈ë') {
            eventType = ALERT_EVENT_TYPES.MOVED_TO_BIRTHING_PEN;
          }

          // Ha van relev√°ns esem√©ny t√≠pus, r√∂gz√≠tj√ºk minden √°llathoz
          if (eventType) {
            for (const animalId of selectedAnimals) {
              await recordAnimalEvent(
                supabase,
                animalId,
                eventType,
                `Kar√°m mozgat√°s: ${movementReason}. ${notes || ''}`
              );
            }
            console.log(`‚úÖ ${selectedAnimals.length} √°llat ${functionType} esem√©nye r√∂gz√≠tve`);
          }
        } catch (eventError) {
          console.error('‚ùå Esem√©ny r√∂gz√≠t√©s hiba:', eventError);
        }
      }

      // ‚úÖ √öJ: Automatikus snapshot √°llat mozgat√°s ut√°n
      if (!isHistorical) {
        try {
          console.log('üì∏ Automatikus snapshot gener√°l√°s √°llat mozgat√°s ut√°n...');
          await createAutomaticPeriodSnapshot(targetPenId, 'animals_moved', '√°llat_mozgat√°s');

          // Ha m√°s kar√°mb√≥l √©rkeztek √°llatok, ott is snapshot
          if (currentPenId !== targetPenId) {
            await createAutomaticPeriodSnapshot(currentPenId, 'animals_moved', '√°llat_mozgat√°s');
          }

          console.log('‚úÖ √Ållat mozgat√°s snapshot elk√©sz√≠tve');
        } catch (snapshotError) {
          console.error('‚ùå √Ållat mozgat√°s snapshot hiba:', snapshotError);
        }
      } else {
        console.log('üìö T√∂rt√©neti mozgat√°s - snapshot kihagyva');
      }

      // ‚úÖ √öJ: AUTOMATIKUS PERI√ìDUS LEZ√ÅR√ÅS √âS √öJ IND√çT√ÅS
      if (!isHistorical && !isHaremMode) {
        try {
          console.log('üîÑ Automatikus peri√≥dus kezel√©s ind√≠t√°sa...');

          // 1. FORR√ÅSKARAM: √Ållatok elt√°vol√≠t√°sa miatti peri√≥dus lez√°r√°s
          if (currentPenId !== targetPenId) {
            await closeCurrentPeriodAndStartNew(currentPenId, 'animals_removed', selectedAnimals, moveDate);
          }

          // 2. C√âLKARAM: √Ållatok hozz√°ad√°sa miatti peri√≥dus kezel√©s
          await closeCurrentPeriodAndStartNew(targetPenId, 'animals_added', selectedAnimals, moveDate, functionType, metadata);

          console.log('‚úÖ Automatikus peri√≥dus kezel√©s befejezve');
        } catch (periodError) {
          console.error('‚ùå Automatikus peri√≥dus kezel√©s hiba:', periodError);
          // Ne √°ll√≠tsuk le a mozgat√°st emiatt, csak logolunk
        }
      }

      // Reset form
      setTargetPenId('');
      setMovementReason('');
      setNotes('');
      setIsHistorical(false);
      setHistoricalDate('');
      setFunctionType('');
      setSelectedBulls([]);
      setPairingStartDate('');
      setExpectedVVDate('');
      setIsHaremMode(false);

      onClose();
    } catch (error) {
      console.error('Hiba a mozgat√°skor:', error);
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
      <div className="relative top-10 mx-auto p-0 border max-w-2xl shadow-lg rounded-lg bg-white">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center">
            <span className="text-2xl mr-3">{isHaremMode ? 'üíï' : 'üîÑ'}</span>
            <h3 className="text-lg font-medium text-gray-900">
              {isHaremMode ? 'H√°rem Be√°ll√≠t√°sa' : '√Ållatok Mozgat√°sa'} ({selectedAnimals.length} √°llat)
            </h3>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <span className="text-xl">‚ùå</span>
          </button>
        </div>

        {/* Content */}
        <div className="p-6">
          {/* Kiv√°lasztott √°llatok √∂sszes√≠t√©se */}
          {isAddMode ? (
            /* AnimalSelector hozz√°ad√°s m√≥dban */
            <div className="mb-6">
              <AnimalSelector
                selected={selectedAnimalsForAdd}
                onChange={setSelectedAnimalsForAdd}
                multiSelect={true}
                currentOnly={false}
                includeSoldAnimals={false}
                label="üêÑ V√°lassz √°llatokat a kar√°mhoz:"
                placeholder="Keres√©s ENAR, kateg√≥ria alapj√°n..."
                maxHeight="max-h-60"
              />
            </div>
          ) : (
            /* Eredeti z√∂ld s√°v norm√°l m√≥dban */
            <div className="mb-6 p-4 bg-green-50 rounded-lg border border-green-200">
              <h4 className="font-medium text-green-900 mb-3 flex items-center">
                <span className="text-lg mr-2">üêÑ</span>
                {isHaremMode ? 'H√°rembe √°ll√≠tand√≥ √°llatok:' : 'Mozgatand√≥ √°llatok:'}
              </h4>
              <div className="flex flex-wrap gap-2">
                {selectedAnimalData.slice(0, 10).map(animal => (
                  <span key={animal.id} className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 border border-green-200">
                    {displayEnar(animal.enar)}
                  </span>
                ))}
                {selectedAnimalData.length > 10 && (
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                    +{selectedAnimalData.length - 10} tov√°bbi
                  </span>
                )}
              </div>
            </div>
          )}
          <div className="space-y-6">
            {/* Kar√°m funkci√≥ - EL≈êRE HELYEZVE! */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                <span className="text-lg mr-2">üè†</span>
                Kar√°m funkci√≥: *
              </label>
              <select
                value={functionType}
                onChange={(e) => setFunctionType(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors bg-white"
                required
              >
                <option value="">V√°lassz funkci√≥t...</option>
                <option value="b√∂lcsi">üêÆ B√∂lcsi (0-12 h√≥napos borjak)</option>
                <option value="√≥vi">üêÑ √ìvi (12-24 h√≥napos √ºsz≈ëk)</option>
                <option value="h√°rem">üíï H√°rem (teny√©szt√©sben l√©v≈ë √°llatok)</option>
                <option value="vemhes">ü§∞ Vemhes (vemhes √°llatok)</option>
                <option value="ellet≈ë">üçº Ellet≈ë (ell√©s k√∂r√ºli √°llatok)</option>
                <option value="teh√©n">üêÑüçº Teh√©n (borjas tehenek)</option>
                <option value="h√≠z√≥bika">üêÇ H√≠z√≥bika (h√∫stermel√©s)</option>
                <option value="√ºres">‚≠ï √úres kar√°m</option>
                <option value="k√≥rh√°z">üè• K√≥rh√°z (beteg √°llatok)</option>
                <option value="karant√©n">üîí Karant√©n (megfigyel√©s)</option>
              </select>
              <p className="mt-1 text-xs text-gray-500">
                ‚ÑπÔ∏è {isHaremMode ? 'H√°rem funkci√≥ kiv√°lasztva - jelenlegi kar√°m funkci√≥ja m√≥dosul' : 'Milyen funkci√≥ban lesz az √°llat a c√©lkar√°mban'}
              </p>
            </div>

            {/* C√©lkar√°m v√°laszt√°s */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                <span className="text-lg mr-2">üéØ</span>
                {isHaremMode ? 'Kar√°m (jelenlegi funkci√≥ m√≥dos√≠t√°sa):' : 'C√©lkar√°m:'} *
              </label>
              <select
                value={targetPenId}
                onChange={(e) => setTargetPenId(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors bg-white"
                required
              >
                <option value="">V√°lassz karamot...</option>
                {filteredPens.map(pen => (
                  <option key={pen.id} value={pen.id}>
                    {getFunctionEmoji(pen.current_function?.function_type || '√ºres')}
                    {pen.pen_number} - {pen.location}
                    {pen.id === currentPenId ? ' (JELENLEGI)' : ''}
                    ({pen.animal_count}/{pen.capacity})
                    {pen.current_function?.function_type && ` - ${pen.current_function.function_type}`}
                  </option>
                ))}
              </select>

              <p className="mt-1 text-xs text-gray-500">
                üìä {filteredPens.length} kar√°m el√©rhet≈ë
                {isHaremMode ? ' (jelenlegi kar√°m is v√°laszthat√≥ h√°rem be√°ll√≠t√°shoz)' : ' (jelenlegi kar√°m kiz√°rva)'}
              </p>

              {/* Kapacit√°s figyelmeztet√©s */}
              {targetPenId && (() => {
                const selectedPen = filteredPens.find(p => p.id === targetPenId);
                if (selectedPen) {
                  const warning = getCapacityWarning(selectedPen);
                  if (warning) {
                    return (
                      <div className={`mt-2 p-3 rounded-lg flex items-start ${warning.includes('t√∫ll√©pi') ? 'bg-red-50 border border-red-200' : 'bg-orange-50 border border-orange-200'
                        }`}>
                        <span className="text-lg mt-0.5 mr-2">
                          {warning.includes('t√∫ll√©pi') ? 'üö®' : '‚ö†Ô∏è'}
                        </span>
                        <span className={`text-sm ${warning.includes('t√∫ll√©pi') ? 'text-red-800' : 'text-orange-800'
                          }`}>
                          {warning}
                        </span>
                      </div>
                    );
                  } else if (!isHaremMode || selectedPen.id !== currentPenId) {
                    return (
                      <div className="mt-2 p-3 bg-green-50 border border-green-200 rounded-lg flex items-start">
                        <span className="text-lg mt-0.5 mr-2">‚úÖ</span>
                        <span className="text-sm text-green-800">
                          Elegend≈ë hely van a karamban ({selectedPen.capacity - selectedPen.animal_count} szabad hely).
                        </span>
                      </div>
                    );
                  }
                }
                return null;
              })()}
            </div>

            {/* Mozgat√°s oka */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                <span className="text-lg mr-2">‚ùì</span>
                {isHaremMode ? 'H√°rem be√°ll√≠t√°s oka:' : 'Mozgat√°s oka:'} *
              </label>
              <select
                value={movementReason}
                onChange={(e) => setMovementReason(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors bg-white"
                required
              >
                <option value="">V√°lassz okot...</option>
                <option value="age_separation">üéÇ √âletkor alap√∫ v√°logat√°s</option>
                <option value="breeding">üíï Teny√©szt√©sbe √°ll√≠t√°s</option>
                <option value="pregnancy">üêÑüíñ Vemhess√©g</option>
                <option value="birthing">üçº Ell√©s el≈ëk√©sz√≠t√©s</option>
                <option value="health">üè• Eg√©szs√©g√ºgyi ok</option>
                <option value="capacity">üìä Kapacit√°s optimaliz√°l√°s</option>
                <option value="function_change">üîÑ Kar√°m funkci√≥ v√°lt√°s</option>
                <option value="other">‚ùì Egy√©b</option>
              </select>
            </div>

            {/* H√°rem specifikus mez≈ëk */}
            {functionType === 'h√°rem' && (
              <div className="bg-pink-50 p-4 rounded-lg border border-pink-200">
                <h4 className="text-lg font-medium text-pink-900 mb-4 flex items-center">
                  üíï H√°rem Specifikus Adatok
                </h4>

                <div className="space-y-4">
                  {/* Teny√©szbika multi-select */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      üêÇ Teny√©szbika(k) kiv√°laszt√°sa: *
                    </label>

                    {/* Kiv√°lasztott bik√°k megjelen√≠t√©se */}
                    {selectedBulls.length > 0 && (
                      <div className="mb-3 p-3 bg-white rounded border border-pink-300">
                        <p className="text-sm font-medium text-pink-800 mb-2">
                          Kiv√°lasztott bik√°k ({selectedBulls.length}):
                        </p>
                        <div className="space-y-1">
                          {selectedBulls.map((enar) => {
                            const bullData = availableBulls.find(bull => bull.enar === enar);
                            return (
                              <div key={enar} className="flex items-center justify-between bg-pink-50 p-2 rounded">
                                <span className="text-sm">
                                  üêÇ {bullData?.name || 'Ismeretlen'} - {enar}
                                </span>
                                <button
                                  type="button"
                                  onClick={() => setSelectedBulls(prev => prev.filter(e => e !== enar))}
                                  className="text-red-500 hover:text-red-700 text-sm px-2 py-1"
                                >
                                  ‚ùå
                                </button>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    )}

                    {/* √öj bika hozz√°ad√°sa */}
                    <select
                      value=""
                      onChange={(e) => {
                        if (e.target.value && !selectedBulls.includes(e.target.value)) {
                          setSelectedBulls(prev => [...prev, e.target.value]);
                        }
                      }}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-pink-500 transition-colors bg-white"
                    >
                      <option value="">+ V√°lassz teny√©szbik√°t hozz√°ad√°shoz...</option>
                      {availableBulls
                        .filter(bull => !selectedBulls.includes(bull.enar))
                        .map((bull) => (
                          <option key={bull.enar} value={bull.enar}>
                            üêÇ {bull.name} - {bull.enar} (KPLSZ: {bull.kplsz})
                          </option>
                        ))}
                    </select>
                  </div>

                  {/* P√°rz√°si id≈ëszak kezdete */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      üíï P√°rz√°si id≈ëszak kezdete: *
                    </label>
                    <input
                      type="date"
                      value={paringStartDate}
                      onChange={(e) => setPairingStartDate(e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-pink-500 transition-colors bg-white"
                      max={new Date().toISOString().split('T')[0]}
                      required
                    />
                  </div>

                  {/* VV tervezett (automatikus) */}
                  {expectedVVDate && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        üîç VV vizsg√°lat tervezett id≈ëpontja:
                      </label>
                      <input
                        type="date"
                        value={expectedVVDate}
                        disabled
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-500"
                      />
                      <p className="mt-1 text-xs text-blue-600">
                        ‚ú® Automatikusan sz√°m√≠tva: p√°rz√°si kezdet + 75 nap
                      </p>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* D√°tum √©s t√∂rt√©neti mez≈ëk - csak ha NEM h√°rem m√≥d */}
            {!isHaremMode && (
              <>
                {/* Mozgat√°s d√°tuma */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                    <span className="text-lg mr-2">üìÖ</span>
                    Mozgat√°s d√°tuma:
                  </label>
                  <input
                    type="date"
                    value={historicalDate}
                    onChange={(e) => setHistoricalDate(e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors bg-white"
                    max={new Date().toISOString().split('T')[0]}
                  />
                  <p className="mt-1 text-xs text-gray-500">
                    Hagyd √ºresen a mai d√°tumhoz, vagy adj meg kor√°bbi d√°tumot
                  </p>
                </div>

                {/* T√∂rt√©neti mozgat√°s */}
                <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                  <label className="flex items-center space-x-3 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={isHistorical}
                      onChange={(e) => setIsHistorical(e.target.checked)}
                      className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
                    />
                    <span className="text-sm font-medium text-blue-900 flex items-center">
                      <span className="text-lg mr-2">üìö</span>
                      T√∂rt√©neti √°llat mozgat√°s
                    </span>
                  </label>

                  <div className="mt-3 ml-7 text-xs text-blue-700 bg-blue-100 p-3 rounded border-l-4 border-blue-400">
                    <div className="font-medium mb-1">‚ÑπÔ∏è Mit jelent ez?</div>
                    <div className="space-y-1">
                      <div>‚Ä¢ <strong>Fizikai mozgat√°s:</strong> Az √°llatok t√©nylegesen √°tker√ºlnek a m√°sik kar√°mba</div>
                      <div>‚Ä¢ <strong>M√∫ltb√©li d√°tum:</strong> A mozgat√°s a megadott kor√°bbi d√°tummal lesz r√∂gz√≠tve</div>
                      <div>‚Ä¢ <strong>Jelenlegi √°llapot:</strong> Az √°llatok jelenleg a c√©lkar√°mban lesznek</div>
                    </div>
                    <div className="mt-2 pt-2 border-t border-blue-300 text-blue-600">
                      <strong>P√©lda:</strong> "M√∫lt h√©ten elfelejtettem r√∂gz√≠teni, hogy 3 √°llatot √°ttettem a 2-es kar√°mba"
                    </div>
                  </div>

                  <div className="mt-2 ml-7 text-xs text-gray-600">
                    üí° <strong>Tipp:</strong> Ha csak dokument√°lni szeretn√©l (fizikai mozgat√°s n√©lk√ºl), haszn√°ld a <strong>Kar√°m T√∂rt√©net</strong> funkci√≥t
                  </div>
                </div>
              </>
            )}

            {/* Megjegyz√©s */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                <span className="text-lg mr-2">üìù</span>
                Megjegyz√©s:
              </label>
              <textarea
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors"
                rows={3}
                placeholder="Opcion√°lis megjegyz√©s..."
              />
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="flex items-center justify-end space-x-4 p-6 border-t border-gray-200">
          <button
            onClick={onClose}
            disabled={loading}
            className="bg-white hover:bg-gray-50 text-gray-700 font-medium px-6 py-3 rounded-lg border border-gray-300 transition-colors disabled:opacity-50 inline-flex items-center"
          >
            <span className="mr-2">‚ùå</span>
            M√©gse
          </button>
          <button
            onClick={handleMove}
            disabled={!targetPenId || !movementReason || loading || (functionType === 'h√°rem' && (selectedBulls.length === 0 || !paringStartDate))}
            className="bg-green-600 hover:bg-green-700 text-white font-medium px-6 py-3 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed inline-flex items-center"
          >
            {loading ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                {isHaremMode ? 'H√°rem be√°ll√≠t√°s...' : 'Mozgat√°s...'}
              </>
            ) : (
              <>
                <span className="mr-2">{isHaremMode ? 'üíï' : 'üîÑ'}</span>
                {isHaremMode ? 'H√°rem Be√°ll√≠t√°sa' : (isHistorical ? 'üìö T√∂rt√©neti Mozgat√°s' : ' Mozgat√°s V√©grehajt√°sa')}
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
}
// ‚úÖ √öJ F√úGGV√âNY: Automatikus peri√≥dus lez√°r√°s √©s √∫j ind√≠t√°s
const closeCurrentPeriodAndStartNew = async (
  penId: string,
  changeType: 'animals_added' | 'animals_removed',
  affectedAnimals: number[],
  eventDate: string,
  newFunctionType?: string,
  newMetadata?: any
) => {
  try {
    // 1. Jelenlegi akt√≠v peri√≥dus lek√©rdez√©se
    const { data: currentPeriod, error: periodError } = await supabase
      .from('pen_history_periods')
      .select('*')
      .eq('pen_id', penId)
      .is('end_date', null)
      .order('start_date', { ascending: false })
      .limit(1)
      .single();

    if (periodError && periodError.code !== 'PGRST116') {
      throw periodError;
    }

    // 2. Ha van akt√≠v peri√≥dus, lez√°rjuk
    if (currentPeriod) {
      const endDate = new Date(eventDate);
      endDate.setHours(23, 59, 59); // Nap v√©ge

      const { error: closeError } = await supabase
        .from('pen_history_periods')
        .update({
          end_date: endDate.toISOString().split('T')[0],
          metadata: {
            ...currentPeriod.metadata,
            closed_reason: changeType,
            closed_automatically: true,
            affected_animals: affectedAnimals.length,
            closure_date: new Date().toISOString()
          }
        })
        .eq('id', currentPeriod.id);

      if (closeError) throw closeError;

      console.log(`‚úÖ Peri√≥dus lez√°rva: ${currentPeriod.function_type} (${currentPeriod.id})`);
    }

    // 3. √öj peri√≥dus ind√≠t√°sa (ha van √∫j funkci√≥ vagy maradnak √°llatok)
    if (changeType === 'animals_added' || (changeType === 'animals_removed' && await hasRemainingAnimals(penId, affectedAnimals))) {
      const startDate = new Date(eventDate);
      startDate.setHours(0, 0, 0); // Nap eleje

      // Jelenlegi √°llatok lek√©rdez√©se a kar√°mban (a mozgat√°s ut√°n)
      const { data: currentAnimals, error: animalsError } = await supabase
        .from('animal_pen_assignments')
        .select(`
          animal_id,
          animals:animal_id (
            id, enar, kategoria, ivar, statusz, szuletesi_datum
          )
        `)
        .eq('pen_id', penId)
        .is('removed_at', null);

      if (animalsError) throw animalsError;

      const animalsSnapshot = currentAnimals?.map(assignment => assignment.animals).filter(Boolean) || [];

      // Funkci√≥ t√≠pus meghat√°roz√°sa
      const functionType = newFunctionType || determineFunctionType(animalsSnapshot);

      // Metadata √∂ssze√°ll√≠t√°sa
      const periodMetadata = {
        auto_created: true,
        created_reason: changeType,
        animal_count: animalsSnapshot.length,
        creation_date: new Date().toISOString(),
        ...(newMetadata || {})
      };

      // √öj peri√≥dus l√©trehoz√°sa
      const { error: createError } = await supabase
        .from('pen_history_periods')
        .insert({
          pen_id: penId,
          function_type: functionType,
          start_date: startDate.toISOString().split('T')[0],
          end_date: null, // Folyamatban
          animals_snapshot: animalsSnapshot,
          metadata: periodMetadata,
          historical: false,
          notes: `Automatikusan l√©trehozva √°llat mozgat√°s miatt (${changeType})`
        });

      if (createError) throw createError;

      console.log(`‚úÖ √öj peri√≥dus ind√≠tva: ${functionType} (${animalsSnapshot.length} √°llat)`);
    }

  } catch (error) {
    console.error(`‚ùå Peri√≥dus kezel√©s hiba (${penId}):`, error);
    throw error;
  }
};

// ‚úÖ SEG√âD F√úGGV√âNY: Vannak-e m√©g √°llatok a kar√°mban
const hasRemainingAnimals = async (penId: string, removedAnimals: number[]): Promise<boolean> => {
  const { data, error } = await supabase
    .from('animal_pen_assignments')
    .select('animal_id')
    .eq('pen_id', penId)
    .is('removed_at', null)
    .not('animal_id', 'in', `(${removedAnimals.join(',')})`);

  if (error) {
    console.error('Marad√≥ √°llatok ellen≈ërz√©s hiba:', error);
    return false;
  }

  return (data?.length || 0) > 0;
};

// ‚úÖ SEG√âD F√úGGV√âNY: Funkci√≥ t√≠pus automatikus meghat√°roz√°sa
const determineFunctionType = (animals: any[]): string => {
  if (animals.length === 0) return '√ºres';

  const categories = animals.map(a => a.kategoria);
  const hasBulls = categories.includes('teny√©szbika');
  const hasFemales = categories.some(cat => cat !== 'teny√©szbika');

  // Logika a kateg√≥ri√°k alapj√°n
  if (hasBulls && hasFemales) {
    return 'h√°rem'; // Bik√°k + n≈ëivarok = h√°rem
  }

  const avgAge = animals.reduce((sum, animal) => {
    const birthDate = new Date(animal.szuletesi_datum);
    const ageMonths = (Date.now() - birthDate.getTime()) / (1000 * 60 * 60 * 24 * 30.44);
    return sum + ageMonths;
  }, 0) / animals.length;

  if (avgAge < 12) return 'b√∂lcsi';     // 0-12 h√≥nap
  if (avgAge < 24) return '√≥vi';        // 12-24 h√≥nap
  if (hasBulls) return 'h√≠z√≥bika';      // Csak bik√°k

  return 'teh√©n'; // Default feln≈ëtt n≈ëivarok
};