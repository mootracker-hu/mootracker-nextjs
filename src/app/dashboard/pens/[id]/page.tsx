// src/app/dashboard/pens/[id]/page.tsx - ‚úÖ JAV√çTOTT getFunctionColor
'use client';

import { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { supabase } from '@/lib/supabase';
import Link from 'next/link';
import AnimalMovementPanel from '../components/animal-movement-panel';
import PenFunctionManager from '../components/pen-function-manager';
import PenSpecificAnimalTable from '../components/pen-specific-animal-table';
import {
    AlertTriangle
} from 'lucide-react';
import { useAlertsNew } from '@/hooks/useAlertsNew';
import { PenAlertsWidget } from '../components/pen-alerts-widget';
import * as XLSX from 'xlsx';
// A t√∂bbi import ut√°n, k√∂r√ºlbel√ºl a 12. sor k√∂rny√©k√©n:
//import TeljesKaramTortenelem from '@/components/TeljesKaramTortenelem';
// Add hozz√° ezt a t√∂bbi import ut√°n:
import HaremDashboard from '@/components/HaremDashboard';
import PenEventsTab from '@/components/PenEventsTab';
import PenHistoryTab from '@/components/PenHistoryTab';
// Ez a helyes import:
import { QuickDuplicateFixButton } from '@/components/QuickDuplicateFixButton';
import { AdminEszkozok } from '@/components/AdminEszkozok';
import { ColorHelpers } from '@/constants/colors';
import { VV_CONSTANTS } from '@/constants/business';
import AnimalSelector from '@/components/AnimalSelector';

// TypeScript interfaces - egy√©rtelm≈±en defini√°lva
interface Animal {
    id: number;
    enar: string;
    szuletesi_datum: string;
    ivar: string;
    kategoria: string;
    jelenlegi_karam?: string;
    statusz: string;
    anya_enar?: string;
    apa_enar?: string;
    created_at: string;
    birth_location?: 'n√°lunk' | 'v√°s√°rolt' | 'ismeretlen';
    assigned_at?: string;
    assignment_reason?: string;
}

interface PenDetailsType {
    id: string;
    pen_number: string;
    pen_type: 'outdoor' | 'barn' | 'birthing';
    capacity: number;
    location?: string;
    current_function?: PenFunctionType;
    animal_count: number;
}

interface PenFunctionType {
    id: string;
    function_type: 'b√∂lcsi' | '√≥vi' | 'h√°rem' | 'vemhes' | 'h√≠z√≥bika' | 'ellet≈ë' | '√ºres' | 'teh√©n' | '√°tmeneti' | 'k√≥rh√°z' | 'karant√©n' | 'selejt';
    start_date: string;
    metadata: any;
    notes?: string;
}

export default function PenDetailsPage() {
    const router = useRouter();
    const params = useParams();
    const penId = params.id as string;

    // State management
    const [pen, setPen] = useState<PenDetailsType | null>(null);
    const [animals, setAnimals] = useState<Animal[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [selectedAnimals, setSelectedAnimals] = useState<number[]>([]);
    const [showMovementPanel, setShowMovementPanel] = useState(false);
    const [showFunctionManager, setShowFunctionManager] = useState(false);
    const [showAddAnimalsPanel, setShowAddAnimalsPanel] = useState(false);
    const [searchTerm, setSearchTerm] = useState('');
    const [showHaremHistory, setShowHaremHistory] = useState(false);
    const [haremHistory, setHaremHistory] = useState<any[]>([]);
    const [showPenHistory, setShowPenHistory] = useState(false);
    const [penHistory, setPenHistory] = useState<any[]>([]);
    // Szerkeszt√©si state-ek
    const [showEditModal, setShowEditModal] = useState(false);
    const [editingPeriod, setEditingPeriod] = useState<any>(null);
    const [allPens, setAllPens] = useState<any[]>([]);
    // Ha van dashboard default, akkor events-re v√°ltoztatni:
    // A useState t√≠pus jav√≠t√°sa:
    const [activeTab, setActiveTab] = useState<'animals' | 'events' | 'harem' | 'timeline'>('animals');
    const [selectedAnimalsForAdd, setSelectedAnimalsForAdd] = useState<number[]>([]);

    // Riaszt√°sok hook hozz√°ad√°sa
    const { alerts, animalPenMap } = useAlertsNew();

    // √Ållat alertek hozz√°rendel√©se ehhez a kar√°mhoz (ugyanaz mint pen-card.tsx-ben)
    const penSpecificAlerts = alerts.filter(alert => {
        if (!pen?.id) return false;

        console.log('üîç Checking alert:', alert.id, 'animal_id:', alert.animal_id, 'pen_id:', alert.pen_id);

        // 1. Kar√°m-specifikus alertek
        if (alert.pen_id === pen.id) {
            console.log('‚úÖ Pen alert match!');
            return true;
        }

        // 2. √Ållat alertek - JAV√çTOTT: kar√°m sz√°m alap√∫ mapping
        if (alert.animal_id && animalPenMap) {
            const animalPenId = animalPenMap[alert.animal_id];
            console.log('üó∫Ô∏è Animal', alert.animal_id, 'is in pen:', animalPenId, 'current pen:', pen.pen_number); // ‚Üê pen.pen_number a log-ban is
            return animalPenId === pen.pen_number; // ‚Üê JAV√çTVA!
        }

        return false;
    });

    console.log('FILTERED ALERTS for pen detail', penId, ':', penSpecificAlerts);

    console.log('üîç PEN DETAILS RENDER:', {
        pen: pen?.pen_number,
        loading,
        hasData: !!pen
    });

    // √âs a komponens haszn√°lata el≈ëtt inicializ√°ld:

    // Data loading effects
    useEffect(() => {
        fetchPenDetails();
    }, [penId]);

    // CSER√âLD LE ERRE:
    useEffect(() => {
        if (pen?.id) {
            fetchAnimalsInPen();
        }
    }, [pen?.id, pen?.current_function?.metadata, pen?.current_function?.id]);

    // √ñsszes kar√°m bet√∂lt√©se
    useEffect(() => {
        const fetchAllPens = async () => {
            try {
                const { data: pens, error } = await supabase
                    .from('pens')
                    .select('id, pen_number, pen_type, capacity, location')
                    .order('pen_number');

                if (error) {
                    console.error('‚ùå Karamok bet√∂lt√©si hiba:', error);
                } else {
                    const formattedPens = pens?.map(pen => ({
                        id: pen.id,
                        pen_number: pen.pen_number,
                        pen_type: pen.pen_type || 'outdoor',
                        capacity: pen.capacity || 30,
                        location: pen.location || 'Ismeretlen',
                        animal_count: 0
                    })) || [];

                    setAllPens(formattedPens);
                    console.log('‚úÖ √ñsszes kar√°m bet√∂ltve:', formattedPens.length);
                }
            } catch (error) {
                console.error('‚ùå Karamok fetch hiba:', error);
            }
        };

        fetchAllPens();
    }, []);

    // Animals count update
    useEffect(() => {
        if (pen) {
            setPen(prev => prev ? { ...prev, animal_count: animals.length } : null);
        }
    }, [animals.length]);

    // H√°rem t√∂rt√©net modal kezel√©se
    useEffect(() => {
        if (showHaremHistory) {
            fetchHaremHistory();
        }
    }, [showHaremHistory]);

    // Fetch pen details
    const fetchPenDetails = async () => {
        try {
            console.log('üè† Fetching pen with ID:', penId);
            setLoading(true);
            setError(null);

            // Egyszer≈± lek√©rdez√©s el≈ësz√∂r - n√©zz√ºk meg l√©tezik-e a kar√°m
            const { data: simplePen, error: simpleError } = await supabase
                .from('pens')
                .select('*')
                .eq('id', penId)
                .single();

            console.log('üìä Simple pen query result:', { simplePen, simpleError });

            if (simpleError) {
                console.error('‚ùå Simple pen fetch error:', simpleError);
                setError(`Kar√°m nem tal√°lhat√≥: ${simpleError.message}`);
                setLoading(false);
                return;
            }

            if (!simplePen) {
                console.error('‚ùå No pen found with ID:', penId);
                setError('Kar√°m nem tal√°lhat√≥');
                setLoading(false);
                return;
            }

            // Ha a kar√°m l√©tezik, pr√≥b√°ljuk meg a funkci√≥kat is
            const { data: penFunctions, error: functionsError } = await supabase
                .from('pen_functions')
                .select('*')
                .eq('pen_id', penId);
            console.log('üìä Pen functions query result:', { penFunctions, functionsError });

            // ‚úÖ JAV√çTOTT AKT√çV FUNKCI√ì KERES√âS
            const activeFunction = penFunctions?.find((f: any) => {
                // 1. Nincs end_date (NULL)
                if (f.end_date === null) return true;
                // 2. end_date √ºres string
                if (f.end_date === '') return true;
                // 3. end_date j√∂v≈ëbeli d√°tum
                if (f.end_date && new Date(f.end_date) > new Date()) return true;
                return false;
            }) || penFunctions?.[penFunctions.length - 1]; // Fallback: legut√≥bbi funkci√≥

            console.log('üéØ Active function found:', activeFunction);
            console.log('üîç All functions:', penFunctions);

            const penWithFunction: PenDetailsType = {
                ...simplePen,
                current_function: activeFunction ? {
                    id: activeFunction.id,
                    function_type: (activeFunction.function_type || '√ºres') as PenFunctionType,
                    start_date: activeFunction.start_date,
                    end_date: activeFunction.end_date || null,
                    metadata: activeFunction.metadata || {},
                    notes: activeFunction.notes || ''
                } : {
                    // DEFAULT FUNKCI√ì HA NINCS AKT√çV
                    id: 'default',
                    function_type: '√ºres',
                    start_date: new Date().toISOString(),
                    end_date: null,
                    metadata: {},
                    notes: ''
                },
                animal_count: 0 // Will be updated when animals load
            };

            console.log('‚úÖ Final pen object:', penWithFunction);
            setPen(penWithFunction);
            setLoading(false);

        } catch (err) {
            console.error('üí• fetchPenDetails catch error:', err);
            setError(`Hiba t√∂rt√©nt a kar√°m bet√∂lt√©sekor: ${err}`);
            setLoading(false);
        }
    };

    // Fetch animals in pen
    const fetchAnimalsInPen = async () => {
        if (!pen?.id) return;

        try {
            console.log(`üêÑ √Ållatok √©s borjak bet√∂lt√©se ${pen.pen_number} karamhoz...`);

            // 1. ‚úÖ VAL√ìDI √ÅLLATOK LEK√âRDEZ√âSE (eredeti)
            const { data: assignments, error: assignError } = await supabase
                .from('animal_pen_assignments')
                .select(`
    animal_id,
    assigned_at,
    assignment_reason,
    animals!inner(
        id,
        enar,
        szuletesi_datum,
        ivar,
        kategoria,
        statusz,
        anya_enar,
        apa_enar,
        birth_location,
        pairing_date,
        current_weight,
        last_weight_measured_at,
        vv_date,
        pregnancy_status,
        expected_birth_date,
        name
    )
`)
                .eq('pen_id', pen.id)
                .is('removed_at', null);

            if (assignError) {
                console.error('‚ùå √Ållatok bet√∂lt√©si hiba:', assignError);
                setError('Nem siker√ºlt bet√∂lteni az √°llatok list√°j√°t');
                return;
            }

            // 2. ‚úÖ TEMP ID-S BORJAK LEK√âRDEZ√âSE (√∫j)
            const { data: calves, error: calvesError } = await supabase
                .from('calves')
                .select('*')
                .eq('current_pen_id', pen.id)
                .is('enar', null); // Csak ENAR n√©lk√ºli borjak

            if (calvesError) {
                console.warn('‚ö†Ô∏è Borjak bet√∂lt√©si hiba:', calvesError);
            }

            console.log(`‚úÖ ${assignments?.length || 0} √°llat + ${calves?.length || 0} borj√∫ bet√∂ltve`);

            // 3. ‚úÖ √ÅLLATOK FORM√ÅZ√ÅSA
            const animalsData: Animal[] = assignments?.map((assignment: any) => ({
                ...assignment.animals,
                assigned_at: assignment.assigned_at,
                assignment_reason: assignment.assignment_reason
            })) || [];

            // 4. ‚úÖ BORJAK FORM√ÅZ√ÅSA (Animal interface-re alak√≠tva)
            const calvesData: Animal[] = calves?.map((calf: any) => ({
                id: parseInt(`9${calf.id}`) || Math.floor(Math.random() * 999999), // Egyedi number ID
                enar: calf.temp_id || `temp-${calf.id}`, // temp_id lesz az "ENAR"
                szuletesi_datum: calf.created_at || new Date().toISOString().split('T')[0],
                ivar: calf.gender || 'ismeretlen',
                kategoria: calf.gender === 'h√≠mivar' ? 'h√≠mivar√∫_borj√∫' : 'n≈ëivar√∫_borj√∫',
                statusz: 'akt√≠v',
                anya_enar: '', // √úres string a t√≠pus miatt
                apa_enar: '', // √úres string a t√≠pus miatt
                birth_location: 'n√°lunk' as const,
                created_at: calf.created_at || new Date().toISOString(),
                assigned_at: calf.created_at || new Date().toISOString(),
                assignment_reason: 'sz√ºlet√©s'
            })) || [];

            // 5. ‚úÖ √ñSSZEF≈∞Z√âS √âS BE√ÅLL√çT√ÅS
            const allAnimals = [...animalsData, ...calvesData];
            setAnimals(allAnimals);

        } catch (err) {
            console.error('üí• fetchAnimalsInPen error:', err);
            setError('Hiba t√∂rt√©nt az √°llatok bet√∂lt√©sekor');
        }
    };

    // Teljes kar√°m t√∂rt√©net bet√∂lt√©se - √öJ FUNKCI√ì
    const fetchFullPenHistory = async () => {
        try {
            console.log('üìö Teljes kar√°m t√∂rt√©net bet√∂lt√©se...', pen?.id);

            const { data, error } = await supabase
                .from('pen_functions')
                .select('*')
                .eq('pen_id', pen?.id)
                .order('start_date', { ascending: false });

            if (error) {
                console.error('‚ùå T√∂rt√©net bet√∂lt√©si hiba:', error);
                return;
            }

            console.log('‚úÖ Kar√°m t√∂rt√©net bet√∂ltve:', data?.length || 0, 'peri√≥dus');
            setPenHistory(data || []);

        } catch (error) {
            console.error('üí• fetchFullPenHistory hiba:', error);
        }
    };

    // JAV√çTOTT deletePeriod funkci√≥ - page.tsx-ben cser√©ld le

    const deletePeriod = async (periodId: string, functionType: string, isActive: boolean) => {
        const confirmMessage = isActive
            ? `üö® AKT√çV ${functionType.toUpperCase()} peri√≥dus t√∂rl√©se?\n\nEz vissza√°ll√≠tja a karamot √úRES √°llapotba!\n\n‚ö†Ô∏è FIGYELEM: Az √°llatokat is el fogja t√°vol√≠tani a kar√°mb√≥l!\n\nBiztosan folytatod?`
            : `üóëÔ∏è ${functionType.toUpperCase()} peri√≥dus t√∂rl√©se?\n\nEz a m≈±velet nem vonhat√≥ vissza!\n\n‚ö†Ô∏è Ha vannak hozz√°rendelt √°llatok, azokat is elt√°vol√≠tja!\n\nBiztosan t√∂rl√∂d?`;

        if (!confirm(confirmMessage)) return;

        try {
            console.log('üóëÔ∏è Peri√≥dus t√∂rl√©se √©s assignments szinkroniz√°l√°s...', periodId);

            // 1. ‚úÖ ASSIGNMENTS LEZ√ÅR√ÅSA EL≈êBB
            if (isActive) {
                console.log('üîí Akt√≠v peri√≥dus assignments lez√°r√°sa...');

                const { error: assignmentsError } = await supabase
                    .from('animal_pen_assignments')
                    .update({ removed_at: new Date().toISOString() })
                    .eq('pen_id', pen?.id)
                    .is('removed_at', null);

                if (assignmentsError) {
                    console.error('‚ùå Assignments lez√°r√°si hiba:', assignmentsError);
                    alert('‚ùå Hiba az √°llatok elt√°vol√≠t√°sakor: ' + assignmentsError.message);
                    return;
                }

                console.log('‚úÖ Assignments lez√°rva');
            }

            // 2. ‚úÖ PERI√ìDUS T√ñRL√âSE
            const { error } = await supabase
                .from('pen_functions')
                .delete()
                .eq('id', periodId);

            if (error) throw error;

            console.log('‚úÖ Peri√≥dus sikeresen t√∂r√∂lve');

            // 3. ‚úÖ KONZISZTENCIA ELLEN≈êRZ√âS - √°rva assignments keres√©se
            console.log('üîç √Årva assignments ellen≈ërz√©se...');
            const { data: orphanedAssignments, error: orphanError } = await supabase
                .from('animal_pen_assignments')
                .select('id, animal_id, assigned_at')
                .eq('pen_id', pen?.id)
                .is('removed_at', null);

            if (!orphanError && orphanedAssignments && orphanedAssignments.length > 0) {
                console.log('üö® √Årva assignments tal√°lva:', orphanedAssignments.length);

                // Automatikus jav√≠t√°s
                const { error: cleanupError } = await supabase
                    .from('animal_pen_assignments')
                    .update({ removed_at: new Date().toISOString() })
                    .in('id', orphanedAssignments.map(a => a.id));

                if (cleanupError) {
                    console.error('‚ùå √Årva assignments cleanup hiba:', cleanupError);
                } else {
                    console.log('‚úÖ √Årva assignments megtiszt√≠tva:', orphanedAssignments.length);
                }
            }

            // 4. ‚úÖ SIKER√úZENET
            const resultMessage = isActive
                ? '‚úÖ Akt√≠v peri√≥dus t√∂r√∂lve!\n\nüîÑ A kar√°m most √úRES √°llapotba ker√ºlt\nüêÑ Az √°llatok elt√°vol√≠tva'
                : '‚úÖ Peri√≥dus sikeresen t√∂r√∂lve!';

            alert(resultMessage);

            if (isActive) {
                // Teljes oldal √∫jrat√∂lt√©s akt√≠v peri√≥dus t√∂rl√©sekor
                setTimeout(() => window.location.reload(), 1000);
            } else {
                // Lista friss√≠t√©se r√©gi peri√≥dus t√∂rl√©sekor
                fetchFullPenHistory();
            }

        } catch (error) {
            console.error('‚ùå T√∂rl√©si hiba:', error);
            alert('‚ùå Hiba a t√∂rl√©s sor√°n: ' + (error instanceof Error ? error.message : 'Ismeretlen hiba'));
        }
    };

    // Peri√≥dus szerkeszt√©se - √öJ FUNKCI√ì  
    const editPeriod = async (period: any) => {
        console.log('‚úèÔ∏è Peri√≥dus szerkeszt√©se...', period);

        // Edit m√≥dban megnyitjuk a Function Manager-t
        setEditingPeriod(period);
        setShowFunctionManager(true);
    };

    // T√∂meges r√©gi peri√≥dusok t√∂rl√©se - √öJ FUNKCI√ì  
    // T√∂meges h√°rem t√∂rl√©s - csak r√©gi h√°rem peri√≥dusok
    const deleteAllOldHaremPeriods = async () => {
        if (!confirm('üóëÔ∏è T√ñMEGES T√ñRL√âS\n\nT√∂r√∂lni szeretn√©d az √ñSSZES r√©gi (lez√°rt) peri√≥dust?\n\n‚úÖ Az akt√≠v peri√≥dus megmarad\n‚ùå A r√©gi peri√≥dusok v√©glegesen t√∂rl≈ëdnek\n\nBiztosan folytatod?')) return;

        try {
            console.log('üóëÔ∏è T√∂meges t√∂rl√©s kezd√©se...');

            const { error } = await supabase
                .from('pen_functions')
                .delete()
                .eq('pen_id', pen?.id)
                .not('end_date', 'is', null);

            if (error) throw error;

            console.log('‚úÖ R√©gi peri√≥dusok t√∂r√∂lve');
            alert('‚úÖ R√©gi peri√≥dusok sikeresen t√∂r√∂lve!');
            fetchFullPenHistory();
        } catch (error) {
            console.error('‚ùå T√∂meges t√∂rl√©si hiba:', error);
            alert('‚ùå Hiba a t√∂meges t√∂rl√©s sor√°n: ' + (error instanceof Error ? error.message : 'Ismeretlen hiba'));
        }
    };

    // H√°rem t√∂rt√©net bet√∂lt√©se
    const fetchHaremHistory = async () => {
        try {
            console.log('üìö H√°rem t√∂rt√©net bet√∂lt√©se...', pen?.id);

            const { data, error } = await supabase
                .from('pen_functions')
                .select('*')
                .eq('pen_id', pen?.id)
                .eq('function_type', 'h√°rem')  // ‚Üê JAV√çTVA: function_name ‚Üí function_type
                .order('start_date', { ascending: false });

            if (error) {
                console.error('‚ùå H√°rem t√∂rt√©net hiba:', error);
                return;
            }

            console.log('‚úÖ H√°rem t√∂rt√©net bet√∂ltve:', data?.length || 0, 'peri√≥dus');
            setHaremHistory(data || []);

        } catch (error) {
            console.error('üí• fetchHaremHistory hiba:', error);
        }
    };

    // H√°rem peri√≥dus t√∂rl√©se
    const deleteHaremPeriod = async (periodId: string, isActive: boolean) => {
        try {
            // Biztons√°gi ellen≈ërz√©s
            if (isActive) {
                const confirmActive = confirm(
                    'üö® FIGYELEM!\n\nAz AKT√çV h√°rem peri√≥dust szeretn√©d t√∂r√∂lni?\n\n' +
                    '‚ö†Ô∏è Ez a funkci√≥ vissza√°ll√≠tja a karamot √úRES √°llapotba!\n\n' +
                    'Biztosan folytatod?'
                );
                if (!confirmActive) return;
            } else {
                const confirmOld = confirm(
                    'üóëÔ∏è H√°rem peri√≥dus t√∂rl√©se\n\n' +
                    'Biztosan t√∂r√∂lni szeretn√©d ezt a h√°rem peri√≥dust?\n\n' +
                    '‚ö†Ô∏è Ez a m≈±velet nem vonhat√≥ vissza!'
                );
                if (!confirmOld) return;
            }

            console.log('üóëÔ∏è H√°rem peri√≥dus t√∂rl√©se...', periodId);

            const { error } = await supabase
                .from('pen_functions')
                .delete()
                .eq('id', periodId);

            if (error) {
                console.error('‚ùå T√∂rl√©si hiba:', error);
                alert('‚ùå Hiba t√∂rt√©nt a t√∂rl√©s sor√°n: ' + error.message);
                return;
            }

            console.log('‚úÖ H√°rem peri√≥dus sikeresen t√∂r√∂lve:', periodId);
            alert('‚úÖ H√°rem peri√≥dus sikeresen t√∂r√∂lve!');

            if (isActive) {
                alert('üìù Info: A kar√°m most √úRES funkci√≥ra v√°lt.');
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            } else {
                fetchHaremHistory();
            }

        } catch (error) {
            console.error('üí• deleteHaremPeriod hiba:', error);
            alert('‚ùå V√°ratlan hiba a t√∂rl√©s sor√°n!');
        }
    };

    // T√∂meges t√∂rl√©s - csak r√©gi peri√≥dusok
    const deleteAllOldPeriods = async () => {
        try {
            const confirmBulk = confirm(
                'üóëÔ∏è T√ñMEGES T√ñRL√âS\n\n' +
                'T√∂r√∂lni szeretn√©d az √ñSSZES r√©gi (lez√°rt) h√°rem peri√≥dust?\n\n' +
                '‚úÖ Az akt√≠v peri√≥dus megmarad\n' +
                '‚ùå A r√©gi peri√≥dusok v√©glegesen t√∂rl≈ëdnek\n\n' +
                'Biztosan folytatod?'
            );

            if (!confirmBulk) return;

            console.log('üóëÔ∏è T√∂meges t√∂rl√©s kezd√©se...');

            const { error } = await supabase
                .from('pen_functions')
                .delete()
                .eq('pen_id', pen?.id)
                .eq('function_type', 'h√°rem')
                .not('end_date', 'is', null);

            if (error) {
                console.error('‚ùå T√∂meges t√∂rl√©si hiba:', error);
                alert('‚ùå Hiba t√∂rt√©nt a t√∂meges t√∂rl√©s sor√°n: ' + error.message);
                return;
            }

            console.log('‚úÖ R√©gi h√°rem peri√≥dusok sikeresen t√∂r√∂lve');
            alert('‚úÖ R√©gi h√°rem peri√≥dusok sikeresen t√∂r√∂lve!');
            fetchHaremHistory();

        } catch (error) {
            console.error('üí• deleteAllOldPeriods hiba:', error);
            alert('‚ùå V√°ratlan hiba a t√∂meges t√∂rl√©s sor√°n!');
        }
    };

    // Helper functions
    const getCategoryEmoji = (kategoria: string): string => {
        const emojiMap: { [key: string]: string } = {
            'n≈ëivar√∫_borj√∫': 'üêÆ',
            'sz≈±z_√ºsz≈ë': 'üêÑ',
            'h√°remben_l√©v≈ë_√ºsz≈ë': 'üêÑüíï',
            'vemhes_√ºsz≈ë': 'üêÑüíñ',
            '√ºres_√ºsz≈ë': 'üêÑüö´',
            'cs√≠ra': 'üêÑ‚ö†Ô∏è',
            'teh√©n': 'üêÑüçº',
            'h√≠mivar√∫_borj√∫': 'üêÇ',
            'h√≠z√≥bika': 'üêÇ',
            'teny√©szbika': 'üêÇ'
        };
        return emojiMap[kategoria] || '‚ùì';
    };

    const getFunctionEmoji = (functionType: string): string => {
        const emojiMap: { [key: string]: string } = {
            'b√∂lcsi': 'üêÆ',
            '√≥vi': 'üêÑ',
            'h√°rem': 'üêÑüíï',
            'vemhes': 'üêÑüíñ',
            'h√≠z√≥bika': 'üêÇ',
            'ellet≈ë': 'üêÑüçº',
            'teh√©n': 'üêÑüçº',
            '√ºres': '‚≠ï',
            '√°tmeneti': 'üîÑ',
            'k√≥rh√°z': 'üè•',
            'karant√©n': 'üîí',
            'selejt': 'üì¶'
        };
        return emojiMap[functionType] || '‚ùì';
    };

    // ‚úÖ JAV√çTOTT SZ√çNPALETTA - MINDEN FUNKCI√ì EGYS√âGESEN MINT A T√ñBBI F√ÅJLBAN!
    const getFunctionColor = (functionType: string): string => {
        return ColorHelpers.getPenFunctionColor(functionType as any);
    };

    const getCapacityColor = (current: number, capacity: number): string => {
        const percentage = (current / capacity) * 100;
        if (percentage < 60) return 'text-green-600';
        if (percentage < 80) return 'text-orange-500';
        if (percentage < 100) return 'text-orange-600';
        return 'text-red-500';
    };

    const calculateAge = (birthDate: string): string => {
        const birth = new Date(birthDate);
        const now = new Date();
        const diffTime = Math.abs(now.getTime() - birth.getTime());
        const diffMonths = Math.floor(diffTime / (1000 * 60 * 60 * 24 * 30.44));
        if (diffMonths < 12) {
            return `${diffMonths} h√≥`;
        } else {
            const years = Math.floor(diffMonths / 12);
            const months = diffMonths % 12;
            return `${years} √©v ${months > 0 ? months + ' h√≥' : ''}`;
        }
    };

    // Excel Export funkci√≥ - INTELLIGENS H√ÅREM D√ÅTUM LOGIKA
    const exportToExcel = async () => {
        try {
            console.log('üìä Excel export kezd√©se...', {
                penNumber: pen?.pen_number,
                functionType: pen?.current_function?.function_type,
                animalCount: filteredAnimals.length
            });

            // ‚≠ê √öJ: Supabase import intelligens h√°rem d√°tum lek√©rdez√©shez
            const { createClient } = await import('@supabase/supabase-js');
            const supabase = createClient(
                process.env.NEXT_PUBLIC_SUPABASE_URL!,
                process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
            );

            // Funkci√≥-specifikus oszlopok meghat√°roz√°sa
            const functionType = pen?.current_function?.function_type || '√ºres';
            let data: any[] = [];

            if (functionType === 'h√°rem') {
                // ‚≠ê INTELLIGENS H√ÅREM EXPORT - √ÅLLAT-SPECIFIKUS D√ÅTUMOK
                console.log('üêÑüíï H√°rem export - intelligens d√°tum lek√©rdez√©s...');

                // Minden √°llathoz lek√©rdezz√ºk a mozgat√°si t√∂rt√©netet
                const animalsWithHaremData = await Promise.all(
                    filteredAnimals.map(async (animal) => {
                        try {
                            // ‚≠ê √ÅLLAT-SPECIFIKUS H√ÅREM KEZDET KERES√âSE
                            const { data: movements, error } = await supabase
                                .from('animal_movements')
                                .select('moved_at, function_type, movement_reason')
                                .eq('animal_id', animal.id)
                                .eq('function_type', 'h√°rem')
                                .order('moved_at', { ascending: true }); // Legkor√°bbi h√°rem mozgat√°s

                            let animalHaremStart = null;

                            if (!error && movements && movements.length > 0) {
                                // Legkor√°bbi h√°rem mozgat√°s d√°tuma
                                animalHaremStart = movements[0].moved_at;
                                console.log(`üîç ${animal.enar} h√°rem kezdete mozgat√°sb√≥l:`, animalHaremStart);
                            } else {
                                // Fallback: kar√°m funkci√≥ kezdete vagy assignment d√°tum
                                const assignment = animal.assigned_at;
                                const penFunctionStart = pen?.current_function?.metadata?.parozas_kezdete;

                                animalHaremStart = assignment || penFunctionStart;
                                console.log(`üîÑ ${animal.enar} h√°rem kezdete fallback:`, animalHaremStart);
                            }

                            // VV esed√©kess√©g sz√°m√≠t√°sa (h√°rem kezdet + 75 nap)
                            let vvEsedekesseg = '-';
                            if (animalHaremStart) {
                                const haremDate = new Date(animalHaremStart);
                                const vvDate = new Date(haremDate);
                                vvDate.setDate(vvDate.getDate() + VV_CONSTANTS.DAYS_AFTER_PAIRING);
                                vvEsedekesseg = vvDate.toLocaleDateString('hu-HU');
                            }

                            return {
                                ...animal,
                                calculatedHaremStart: animalHaremStart,
                                calculatedVVDate: vvEsedekesseg
                            };

                        } catch (error) {
                            console.error(`‚ùå Hiba ${animal.enar} adatain√°l:`, error);
                            return {
                                ...animal,
                                calculatedHaremStart: null,
                                calculatedVVDate: '-'
                            };
                        }
                    })
                );

                // Excel adatok gener√°l√°sa √°llat-specifikus d√°tumokkal
                data = animalsWithHaremData.map(animal => ({
                    'ENAR': animal.enar,
                    'N√âV': (() => {
                        // Teny√©szbika n√©v logika (v√°ltozatlan)
                        if (animal.kategoria === 'teny√©szbika') {
                            const bulls = pen?.current_function?.metadata?.bulls;
                            if (bulls && Array.isArray(bulls)) {
                                const bull = bulls.find((b: any) => b.enar === animal.enar);
                                return bull?.name || '-';
                            }
                            if (pen?.current_function?.metadata?.tenyeszbika_enar === animal.enar) {
                                return pen?.current_function?.metadata?.tenyeszbika_name || '-';
                            }
                        }
                        return '-';
                    })(),
                    // ‚≠ê INTELLIGENS H√ÅREM KEZDETE - √ÅLLAT-SPECIFIKUS!
                    'H√ÅREM KEZDETE': animal.calculatedHaremStart ?
                        new Date(animal.calculatedHaremStart).toLocaleDateString('hu-HU') : '-',
                    // ‚≠ê INTELLIGENS VV TERVEZETT - √ÅLLAT-SPECIFIKUS SZ√ÅM√çT√ÅS!
                    'VV TERVEZETT': (() => {
                        const ageMonths = calculateAgeInMonths(animal.szuletesi_datum);
                        if (ageMonths < 24) return 'M√©g fiatal';
                        return animal.calculatedVVDate;
                    })(),
                    'VV EREDM√âNY': '-', // TODO: VV eredm√©nyek t√°bl√°b√≥l
                    'V√ÅRHAT√ì ELL√âS': '-', // TODO: VV eredm√©nyek alapj√°n sz√°molva
                    'FELJEGYZ√âS': animal.assignment_reason || '-'
                }));

                console.log('‚úÖ Intelligens h√°rem export adatok gener√°lva:', data.length, '√°llat');

            } else if (functionType === 'b√∂lcsi') {
                // B√ñLCSI EXPORT (v√°ltozatlan)
                data = filteredAnimals.map(animal => ({
                    'ENAR': animal.enar,
                    'SZ√úLET√âSI D√ÅTUM': new Date(animal.szuletesi_datum).toLocaleDateString('hu-HU'),
                    '12 H√ìNAPOS EKKOR': calculateTargetDate(animal.szuletesi_datum, 12),
                    'FELJEGYZ√âS': animal.assignment_reason || '-'
                }));
            } else if (functionType === '√≥vi') {
                // √ìVI EXPORT (v√°ltozatlan)
                data = filteredAnimals.map(animal => ({
                    'ENAR': animal.enar,
                    'SZ√úLET√âSI D√ÅTUM': new Date(animal.szuletesi_datum).toLocaleDateString('hu-HU'),
                    '18 H√ìNAPOS EKKOR': calculateTargetDate(animal.szuletesi_datum, 18),
                    '24 H√ìNAPOS EKKOR': calculateTargetDate(animal.szuletesi_datum, 24),
                    'FELJEGYZ√âS': animal.assignment_reason || '-'
                }));
            } else {
                // √ÅLTAL√ÅNOS EXPORT (v√°ltozatlan)
                data = filteredAnimals.map(animal => ({
                    'ENAR': animal.enar,
                    'KATEG√ìRIA': animal.kategoria.replace('_', ' '),
                    'SZ√úLET√âSI D√ÅTUM': new Date(animal.szuletesi_datum).toLocaleDateString('hu-HU'),
                    '√âLETKOR': calculateAge(animal.szuletesi_datum),
                    'SZ√ÅRMAZ√ÅS': animal.birth_location === 'n√°lunk' ? 'N√°lunk' :
                        animal.birth_location === 'v√°s√°rolt' ? 'V√°s√°rolt' : 'Ismeretlen',
                    'FELJEGYZ√âS': animal.assignment_reason || '-'
                }));
            }

            // Excel f√°jl l√©trehoz√°sa (v√°ltozatlan)
            const ws = XLSX.utils.json_to_sheet(data);
            const wb = XLSX.utils.book_new();

            // F√°jln√©v gener√°l√°sa
            const today = new Date().toISOString().split('T')[0];
            const sheetName = `Kar√°m_${pen?.pen_number}_${functionType}`;
            const fileName = `${sheetName}_${today}.xlsx`;

            XLSX.utils.book_append_sheet(wb, ws, sheetName);
            XLSX.writeFile(wb, fileName);

            console.log('‚úÖ Excel export sikeres:', fileName);

            // ‚≠ê SIKERES √úZENET INTELLIGENS INFORM√ÅCI√ìKKAL
            const successMessage = functionType === 'h√°rem'
                ? `‚úÖ Intelligens H√°rem Excel export sikeres!\n\nF√°jl: ${fileName}\n√Ållatok: ${data.length}\n\nüéØ Funkci√≥: √Ållat-specifikus h√°rem kezdetek haszn√°lva\nüìÖ VV d√°tumok: Egyedi sz√°m√≠t√°sok alapj√°n`
                : `‚úÖ Excel export sikeres!\n\nF√°jl: ${fileName}\n√Ållatok: ${data.length}`;

            alert(successMessage);

        } catch (error) {
            console.error('‚ùå Excel export hiba:', error);
            alert('‚ùå Hiba t√∂rt√©nt az export sor√°n: ' + (error instanceof Error ? error.message : 'Ismeretlen hiba'));
        }
    };

    const exportPenHistory = async () => {
        try {
            console.log('üìä Kar√°mt√∂rt√©net export kezd√©se...', {
                penId: pen?.id,
                penNumber: pen?.pen_number
            });

            // 1. T√∂rt√©neti peri√≥dusok lek√©rdez√©se
            const { data: periodsData, error: periodsError } = await supabase
                .from('pen_history_periods')
                .select('*')
                .eq('pen_id', pen?.id)
                .order('start_date', { ascending: false });

            if (periodsError) {
                console.error('‚ùå Peri√≥dusok lek√©rdez√©si hiba:', periodsError);
            }

            // 2. √Ållat esem√©nyek lek√©rdez√©se
            const { data: eventsData, error: eventsError } = await supabase
                .from('animal_events')
                .select(`
                event_date,
                event_type,
                reason,
                notes,
                created_at,
                animals (
                    enar,
                    kategoria,
                    ivar
                )
            `)
                .order('event_date', { ascending: false })
                .limit(1000);

            if (eventsError) {
                console.error('‚ùå Esem√©nyek lek√©rdez√©si hiba:', eventsError);
            }

            // 3. Mozgat√°si adatok lek√©rdez√©se
            const { data: movementsData, error: movementsError } = await supabase
                .from('animal_pen_assignments')
                .select(`
                assigned_at,
                removed_at,
                assignment_reason,
                animals (
                    enar,
                    kategoria,
                    ivar
                ),
                pens (
                    pen_number
                )
            `)
                .eq('pen_id', pen?.id)
                .order('assigned_at', { ascending: false })
                .limit(1000);

            if (movementsError) {
                console.error('‚ùå Mozgat√°sok lek√©rdez√©si hiba:', movementsError);
            }

            // EXCEL ADATOK FORM√ÅZ√ÅSA

            // 1. T√∂rt√©neti peri√≥dusok worksheet
            const periodsExportData = periodsData?.map((period: any) => {
                const startDate = new Date(period.start_date).toLocaleDateString('hu-HU');
                const endDate = period.end_date ? new Date(period.end_date).toLocaleDateString('hu-HU') : 'Folyamatban';
                const duration = period.end_date
                    ? Math.ceil((new Date(period.end_date).getTime() - new Date(period.start_date).getTime()) / (1000 * 60 * 60 * 24))
                    : Math.ceil((new Date().getTime() - new Date(period.start_date).getTime()) / (1000 * 60 * 60 * 24));

                return {
                    'Kezdet': startDate,
                    'V√©g': endDate,
                    'Id≈ëtartam (nap)': duration,
                    'Funkci√≥': period.function_type,
                    '√Ållatok sz√°ma': period.animals_snapshot?.length || 0,
                    'Teny√©szbik√°k': period.metadata?.bulls?.map((b: any) => b.name).join(', ') || '-',
                    'R√∂gz√≠t√©s': period.historical ? 'K√©zi' : 'Automatikus',
                    'Megjegyz√©sek': period.notes || '-'
                };
            }) || [];

            // 2. Esem√©nyek worksheet
            const eventsExportData = eventsData?.map((event: any) => {
                return {
                    'D√°tum': new Date(event.event_date).toLocaleDateString('hu-HU'),
                    'Esem√©ny': event.event_type === 'function_change' ? 'Funkci√≥ v√°lt√°s' :
                        event.event_type === 'pen_movement' ? 'Mozgat√°s' :
                            event.event_type === 'pen_assignment' ? 'Beker√ºl√©s' :
                                event.event_type === 'health_event' ? 'Eg√©szs√©g√ºgyi esem√©ny' :
                                    event.event_type,
                    'ENAR': event.animals?.enar || '-',
                    'Kateg√≥ria': event.animals?.kategoria || '-',
                    'Indokl√°s': event.reason || '-',
                    'R√©szletek': event.notes || '-'
                };
            }) || [];

            // 3. Mozgat√°sok worksheet
            const movementsExportData = movementsData?.map((movement: any) => {
                const assignedDate = new Date(movement.assigned_at).toLocaleDateString('hu-HU');
                const removedDate = movement.removed_at ? new Date(movement.removed_at).toLocaleDateString('hu-HU') : 'Jelenleg itt';
                const daysInPen = movement.removed_at
                    ? Math.ceil((new Date(movement.removed_at).getTime() - new Date(movement.assigned_at).getTime()) / (1000 * 60 * 60 * 24))
                    : Math.ceil((new Date().getTime() - new Date(movement.assigned_at).getTime()) / (1000 * 60 * 60 * 24));

                return {
                    'ENAR': movement.animals?.enar || '-',
                    'Kateg√≥ria': movement.animals?.kategoria || '-',
                    'Beker√ºl√©s': assignedDate,
                    'T√°voz√°s': removedDate,
                    'Napok kar√°mban': daysInPen,
                    'Indokl√°s': movement.assignment_reason || '-'
                };
            }) || [];

            // EXCEL F√ÅJL L√âTREHOZ√ÅSA
            const wb = XLSX.utils.book_new();

            // Worksheets hozz√°ad√°sa
            if (periodsExportData.length > 0) {
                const periodsWS = XLSX.utils.json_to_sheet(periodsExportData);
                XLSX.utils.book_append_sheet(wb, periodsWS, 'T√∂rt√©neti Peri√≥dusok');
            }

            if (eventsExportData.length > 0) {
                const eventsWS = XLSX.utils.json_to_sheet(eventsExportData);
                XLSX.utils.book_append_sheet(wb, eventsWS, 'Esem√©nyek');
            }

            if (movementsExportData.length > 0) {
                const movementsWS = XLSX.utils.json_to_sheet(movementsExportData);
                XLSX.utils.book_append_sheet(wb, movementsWS, 'Mozgat√°sok');
            }

            // √ñsszefoglal√≥ worksheet
            const summaryData = [
                { 'Adat t√≠pus': 'T√∂rt√©neti peri√≥dusok', 'Rekordok sz√°ma': periodsExportData.length },
                { 'Adat t√≠pus': 'Esem√©nyek', 'Rekordok sz√°ma': eventsExportData.length },
                { 'Adat t√≠pus': 'Mozgat√°sok', 'Rekordok sz√°ma': movementsExportData.length },
                { 'Adat t√≠pus': 'Export d√°tuma', 'Rekordok sz√°ma': new Date().toLocaleDateString('hu-HU') },
                { 'Adat t√≠pus': 'Kar√°m', 'Rekordok sz√°ma': `Kar√°m ${pen?.pen_number}` }
            ];
            const summaryWS = XLSX.utils.json_to_sheet(summaryData);
            XLSX.utils.book_append_sheet(wb, summaryWS, '√ñsszefoglal√≥');

            // F√°jl ment√©se
            const timestamp = new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-');
            const fileName = `Karam_${pen?.pen_number}_tortenet_${timestamp}.xlsx`;

            XLSX.writeFile(wb, fileName);

            console.log('‚úÖ Kar√°mt√∂rt√©net export sikeres:', fileName);

            // Sikeres √ºzenet
            alert(`‚úÖ Kar√°mt√∂rt√©net export sikeres!

üìä Adatok:
‚Ä¢ T√∂rt√©neti peri√≥dusok: ${periodsExportData.length} db
‚Ä¢ Esem√©nyek: ${eventsExportData.length} db  
‚Ä¢ Mozgat√°sok: ${movementsExportData.length} db

üìÅ F√°jl: ${fileName}`);

        } catch (error) {
            console.error('‚ùå Kar√°mt√∂rt√©net export hiba:', error);
            alert('‚ùå Hiba t√∂rt√©nt a kar√°mt√∂rt√©net export sor√°n: ' + (error instanceof Error ? error.message : 'Ismeretlen hiba'));
        }
    };

    // Seg√©dfunkci√≥k (v√°ltozatlanok)
    const calculateTargetDate = (birthDate: string, targetMonths: number): string => {
        const birth = new Date(birthDate);
        const target = new Date(birth);
        target.setMonth(target.getMonth() + targetMonths);
        return target.toLocaleDateString('hu-HU');
    };

    const calculateAgeInMonths = (birthDate: string): number => {
        const birth = new Date(birthDate);
        const now = new Date();
        return Math.floor((now.getTime() - birth.getTime()) / (1000 * 60 * 60 * 24 * 30.44));
    };

    // Animal selection handlers
    const toggleAnimalSelection = (animalId: number) => {
        setSelectedAnimals(prev =>
            prev.includes(animalId)
                ? prev.filter(id => id !== animalId)
                : [...prev, animalId]
        );
    };

    const selectAllAnimals = () => {
        setSelectedAnimals(filteredAnimals.map(animal => animal.id));
    };

    const clearSelection = () => {
        setSelectedAnimals([]);
    };

    // Filtered animals
    const filteredAnimals = animals.filter((animal: Animal) =>
        animal.enar?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        animal.kategoria?.toLowerCase().includes(searchTerm.toLowerCase())
    );

    // Loading state
    if (loading) {
        console.log('üîÑ LOADING STATE = true, loading screen megjelen√≠t√©se');
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto"></div>
                    <p className="mt-4 text-gray-600">Kar√°m bet√∂lt√©se...</p>
                </div>
            </div>
        );
    }

    // Error state
    if (error) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <div className="text-center">
                    <AlertTriangle className="h-12 w-12 text-red-600 mx-auto" />
                    <p className="mt-4 text-red-600">{error}</p>
                    <Link
                        href="/dashboard/pens"
                        className="mt-4 inline-flex items-center text-blue-600 hover:text-blue-800"
                    >
                        <span className="mr-1">‚¨ÖÔ∏è</span>
                        Vissza a karamokhoz
                    </Link>
                </div>
            </div>
        );
    }

    // No pen data
    if (!pen) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <div className="text-center">
                    <AlertTriangle className="h-12 w-12 text-gray-600 mx-auto" />
                    <p className="mt-4 text-gray-600">Kar√°m nem tal√°lhat√≥</p>
                    <Link
                        href="/dashboard/pens"
                        className="mt-4 inline-flex items-center text-blue-600 hover:text-blue-800"
                    >
                        <span className="mr-1">‚¨ÖÔ∏è</span>
                        Vissza a karamokhoz
                    </Link>
                </div>
            </div>
        );
    }

    console.log('‚úÖ LOADING FALSE, main content megjelen√≠t√©se');

    return (
        <div className="min-h-screen bg-gray-50">
            {/* Header */}
            <div className="bg-white shadow-sm border-b">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    <div className="flex items-center justify-between h-16">
                        <div className="flex items-center">
                            <Link
                                href="/dashboard/pens"
                                className="mr-4 p-2 text-gray-400 hover:text-gray-600 rounded-md hover:bg-gray-100 inline-flex items-center"
                            >
                                <span className="mr-1">‚¨ÖÔ∏è</span>
                            </Link>
                            <h1 className="text-2xl font-bold text-gray-900 flex items-center">
                                <span className="text-3xl mr-3">üè†</span>
                                Kar√°m {pen.pen_number}
                            </h1>
                        </div>
                        <div className="flex items-center space-x-4">
                            {selectedAnimals.length > 0 && (
                                <button
                                    onClick={() => setShowMovementPanel(true)}
                                    className="bg-green-600 hover:bg-green-700 text-white font-medium px-4 py-2 rounded-lg transition-colors inline-flex items-center"
                                >
                                    <span className="mr-2">üîÑ</span>
                                    Mozgat√°s ({selectedAnimals.length})
                                </button>
                            )}
                            <AdminEszkozok />  {/* ‚Üê √öJ: Diszkr√©t admin dropdown */}
                            <button
                                onClick={() => setShowFunctionManager(true)}
                                className="bg-teal-500 hover:bg-teal-600 text-white font-medium px-4 py-2 rounded-lg transition-colors inline-flex items-center"
                            >
                                <span className="mr-2">‚öôÔ∏è</span>
                                Funkci√≥ Kezel√©s
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            {/* Kar√°m inform√°ci√≥k */}
            <div className="bg-white border-b">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                        {/* Alapadatok */}
                        <div className="md:col-span-2">
                            <div className="bg-gray-50 rounded-lg p-6">
                                <h3 className="text-lg font-medium text-gray-900 mb-3">Kar√°m Adatok</h3>
                                <div className="space-y-2">
                                    <div className="flex items-center">
                                        <span className="text-lg mr-2">üìç</span>
                                        <span className="text-sm text-gray-600">Helye: {pen.location}</span>
                                    </div>
                                    <div className="flex items-center">
                                        <span className="text-lg mr-2">üêÑ</span>
                                        <span className={`text-sm font-medium ${getCapacityColor(pen.animal_count, pen.capacity)}`}>
                                            {pen.animal_count} / {pen.capacity} √°llat
                                        </span>
                                    </div>
                                    <div className="flex items-center">
                                        <span className="text-lg mr-2">üìÖ</span>
                                        <span className="text-sm text-gray-600">
                                            Funkci√≥ kezdete: {pen.current_function?.start_date ?
                                                new Date(pen.current_function.start_date).toLocaleDateString('hu-HU') :
                                                'Nincs megadva'
                                            }
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Jelenlegi funkci√≥ */}
                        <div>
                            <div className="bg-gray-50 rounded-lg p-6">
                                <h3 className="text-lg font-medium text-gray-900 mb-3">Jelenlegi Funkci√≥</h3>
                                <div className={`px-3 py-2 rounded-full text-sm font-medium border ${getFunctionColor(pen.current_function?.function_type || '√ºres')}`}>
                                    {getFunctionEmoji(pen.current_function?.function_type || '√ºres')}
                                    <span className="ml-2">
                                        {pen.current_function?.function_type ?
                                            pen.current_function.function_type.charAt(0).toUpperCase() + pen.current_function.function_type.slice(1)
                                            : '√ºres'}
                                    </span>
                                </div>
                            </div>
                        </div>

                        {/* Kapacit√°s kihaszn√°lts√°g */}
                        <div>
                            <div className="bg-gray-50 rounded-lg p-6">
                                <h3 className="text-lg font-medium text-gray-900 mb-3">Kihaszn√°lts√°g</h3>
                                <div className="w-full bg-gray-200 rounded-full h-3 mb-2">
                                    <div
                                        className={`h-3 rounded-full transition-all ${pen.animal_count / pen.capacity > 0.8 ? 'bg-red-500' :
                                            pen.animal_count / pen.capacity > 0.6 ? 'bg-orange-500' : 'bg-green-500'
                                            }`}
                                        style={{ width: `${Math.min((pen.animal_count / pen.capacity) * 100, 100)}%` }}
                                    />
                                </div>
                                <p className="text-sm text-gray-600">
                                    {pen.capacity > 0 ? ((pen.animal_count / pen.capacity) * 100).toFixed(1) : 0}%
                                </p>
                            </div>
                        </div>
                    </div>

                    {/* H√°rem extra inform√°ci√≥k */}
                    {(pen.current_function?.function_type === 'h√°rem' || pen.current_function?.function_type === 'vemhes') && (
                        <div className="mt-6 bg-green-50 border border-green-200 rounded-lg p-6">
                            <h4 className="font-medium text-green-800 mb-3 flex items-center">
                                <span className="text-xl mr-2">üêÑüíï</span>
                                H√°rem Inform√°ci√≥k
                            </h4>

                            {/* T√ñBBBIK√ÅS MEGJELEN√çT√âS */}
                            {pen.current_function.metadata.bulls && Array.isArray(pen.current_function.metadata.bulls) ? (
                                <div className="space-y-4">
                                    {/* Teny√©szbik√°k list√°ja */}
                                    <div>
                                        <span className="text-green-600 flex items-center mb-2">
                                            <span className="mr-1">üêÇ</span>
                                            Teny√©szbika/√°k ({pen.current_function.metadata.bulls.length}):
                                        </span>
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                                            {pen.current_function.metadata.bulls.map((bull: any, index: number) => (
                                                <div key={bull.id || index} className="bg-white border border-green-200 rounded-lg p-3">
                                                    <div className="flex items-center">
                                                        <span className="text-lg mr-2">üêÇ</span>
                                                        <div>
                                                            <p className="font-medium text-green-900">{bull.name}</p>
                                                            <p className="text-xs text-green-600">{bull.enar}</p>
                                                            <p className="text-xs text-green-500">KPLSZ: {bull.kplsz}</p>
                                                        </div>
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </div>

                                    {/* P√°rz√°s √©s VV adatok */}
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                                        {pen.current_function.metadata.parozas_kezdete && (
                                            <div>
                                                <span className="text-green-600 flex items-center">
                                                    <span className="mr-1">üíï</span>
                                                    H√°rem kezdete:
                                                </span>
                                                <p className="font-medium">{new Date(pen.current_function.metadata.parozas_kezdete).toLocaleDateString('hu-HU')}</p>
                                            </div>
                                        )}
                                        {pen.current_function.metadata.vv_esedekssege && (
                                            <div>
                                                <span className="text-green-600 flex items-center">
                                                    <span className="mr-1">üî¨</span>
                                                    VV esed√©kess√©ge:
                                                </span>
                                                <p className="font-medium">{new Date(pen.current_function.metadata.vv_esedekssege).toLocaleDateString('hu-HU')}</p>
                                            </div>
                                        )}
                                    </div>
                                </div>
                            ) : (
                                /* LEGACY SINGLE BULL SUPPORT */
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                                    {pen.current_function.metadata.tenyeszbika_name && (
                                        <div>
                                            <span className="text-green-600 flex items-center">
                                                <span className="mr-1">üêÇ</span>
                                                Teny√©szbika:
                                            </span>
                                            <p className="font-medium">{pen.current_function.metadata.tenyeszbika_name}</p>
                                            {pen.current_function.metadata.tenyeszbika_enar && (
                                                <p className="text-xs text-green-600">{pen.current_function.metadata.tenyeszbika_enar}</p>
                                            )}
                                        </div>
                                    )}
                                    {pen.current_function.metadata.parozas_kezdete && (
                                        <div>
                                            <span className="text-green-600 flex items-center">
                                                <span className="mr-1">üíï</span>
                                                H√°rem kezdete:
                                            </span>
                                            <p className="font-medium">{new Date(pen.current_function.metadata.parozas_kezdete).toLocaleDateString('hu-HU')}</p>
                                        </div>
                                    )}
                                    {pen.current_function.metadata.vv_esedekssege && (
                                        <div>
                                            <span className="text-green-600 flex items-center">
                                                <span className="mr-1">üî¨</span>
                                                VV esed√©kess√©ge:
                                            </span>
                                            <p className="font-medium">{new Date(pen.current_function.metadata.vv_esedekssege).toLocaleDateString('hu-HU')}</p>
                                        </div>
                                    )}
                                </div>
                            )}
                        </div>
                    )}
                    <PenAlertsWidget
                        penId={pen.id}
                        penNumber={pen.pen_number}
                        alerts={penSpecificAlerts as any}
                        animalPenMap={animalPenMap}
                        showAnimalAlerts={true}
                        maxDisplayed={5}
                        className="mt-6"
                    />
                    {/* Univerz√°lis Kar√°m T√∂rt√©net Gomb */}
                    <div className="mt-6">
                        <button
                            style={{ display: 'none' }}
                            onClick={() => {
                                setShowPenHistory(true);
                                fetchFullPenHistory();
                            }}
                            className="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg font-medium transition-colors inline-flex items-center"
                        >
                            <span className="mr-2">üìö</span>
                            Kar√°m T√∂rt√©net
                        </button>
                    </div>
                </div>
            </div>

            {/* √öJ Tab Navigation - H√ÅREM TAB-BAL */}
            <div className="flex border-b mb-6">
                <button
                    onClick={() => setActiveTab('animals')}
                    className={`px-4 py-2 font-medium ${activeTab === 'animals' ? 'border-b-2 border-green-500 text-green-600' : 'text-gray-500'}`}
                >
                    üêÑ √Ållatok ({filteredAnimals.length})
                </button>

                <button
                    onClick={() => setActiveTab('events')}
                    className={`px-4 py-2 font-medium ${activeTab === 'events' ? 'border-b-2 border-green-500 text-green-600' : 'text-gray-500'}`}
                >
                    üéØ Kar√°m Esem√©nyek
                </button>

                {/* CONDITIONAL H√ÅREM TAB - csak h√°rem kar√°mokn√°l */}
                {(pen.current_function?.function_type === 'h√°rem' || pen.current_function?.function_type === 'vemhes') && (
                    <button
                        onClick={() => setActiveTab('harem')}
                        className={`px-4 py-2 font-medium ${activeTab === 'harem' ? 'border-b-2 border-pink-500 text-pink-600' : 'text-gray-500'}`}
                    >
                        {pen.current_function?.function_type === 'h√°rem' ? 'üíï H√°rem Dashboard' : 'üêÑüíï Vemhes Dashboard'}
                    </button>
                )}

                <button
                    onClick={() => setActiveTab('timeline')}
                    className={`px-4 py-2 font-medium ${activeTab === 'timeline' ? 'border-b-2 border-green-500 text-green-600' : 'text-gray-500'}`}
                >
                    üìÖ Kar√°m T√∂rt√©net
                </button>
            </div>

            {/* Tab Content */}
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">

                {/* √Ållatok Tab */}
                {activeTab === 'animals' && (
                    <>
                        {/* Vez√©rl≈ëk */}
                        <div className="flex flex-col sm:flex-row justify-between items-center mb-6">
                            <div className="flex items-center space-x-4 mb-4 sm:mb-0">
                                <h2 className="text-xl font-semibold text-gray-900 flex items-center">
                                    <span className="text-2xl mr-2">üêÑ</span>
                                    √Ållatok ({filteredAnimals.length})
                                </h2>
                                {selectedAnimals.length > 0 && (
                                    <div className="flex items-center space-x-2">
                                        <span className="text-sm text-gray-600">
                                            {selectedAnimals.length} kiv√°lasztva
                                        </span>
                                        <button
                                            onClick={clearSelection}
                                            className="text-xs text-blue-600 hover:text-blue-800"
                                        >
                                            T√∂rl√©s
                                        </button>
                                    </div>
                                )}
                            </div>
                            <div className="flex items-center space-x-4">
                                {/* Keres√©s */}
                                <div className="relative">
                                    <input
                                        type="text"
                                        placeholder="üîé ENAR vagy kateg√≥ria keres√©se..."
                                        value={searchTerm}
                                        onChange={(e) => setSearchTerm(e.target.value)}
                                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors"
                                    />
                                </div>
                                {/* Kiv√°laszt√°s vez√©rl≈ëk */}
                                <button
                                    onClick={selectAllAnimals}
                                    className="text-sm text-blue-600 hover:text-blue-800"
                                >
                                    Mind kiv√°laszt
                                </button>
                                <button
                                    onClick={() => setShowAddAnimalsPanel(true)}
                                    className="bg-green-600 hover:bg-green-700 text-white font-medium px-3 py-2 rounded-lg transition-colors inline-flex items-center text-sm ml-3"
                                >
                                    <span className="mr-1">‚ûï</span>
                                    Hozz√°ad√°s
                                </button>
                                {selectedAnimals.length > 0 && (
                                    <button
                                        onClick={() => setShowMovementPanel(true)}
                                        className="bg-blue-600 hover:bg-blue-700 text-white font-medium px-3 py-2 rounded-lg transition-colors inline-flex items-center text-sm ml-2"
                                    >
                                        <span className="mr-1">üîÑ</span>
                                        Mozgat√°s ({selectedAnimals.length})
                                    </button>
                                )}
                                <button
                                    onClick={exportToExcel}
                                    className="bg-white hover:bg-gray-50 text-gray-700 font-medium px-4 py-2 rounded-lg border border-gray-300 transition-colors inline-flex items-center"
                                >
                                    <span className="mr-2">üì•</span>
                                    Export
                                </button>
                                <button
                                    onClick={exportPenHistory}
                                    className="bg-white hover:bg-gray-50 text-gray-700 font-medium px-4 py-2 rounded-lg border border-gray-300 transition-colors inline-flex items-center"
                                >
                                    <span className="mr-2">üì•</span>
                                    T√∂rt√©net Export
                                </button>
                            </div>
                        </div>

                        {/* Kar√°m-specifikus √°llatok t√°bl√°zat */}
                        <PenSpecificAnimalTable
                            penFunction={pen.current_function?.function_type || '√ºres'}
                            animals={filteredAnimals.map(animal => ({
                                ...animal,
                                id: animal.id.toString()
                            }))}
                            selectedAnimals={selectedAnimals.map(id => id.toString())}
                            onToggleAnimal={(id) => toggleAnimalSelection(parseInt(id))}
                            onSelectAll={selectAllAnimals}
                            onClearSelection={clearSelection}
                        />

                        {filteredAnimals.length === 0 && (
                            <div className="text-center py-12">
                                <span className="text-6xl mb-4 block">üêÑ</span>
                                <h3 className="mt-2 text-sm font-medium text-gray-900">Nincsenek √°llatok</h3>
                                <p className="mt-1 text-sm text-gray-500">
                                    {searchTerm ? 'Nincs tal√°lat a keres√©si felt√©telre.' : 'Ez a kar√°m jelenleg √ºres.'}
                                </p>
                            </div>
                        )}
                    </>
                )}

 // ‚úÖ √öJ - dinamikus komponens:
                {activeTab === 'events' && (
                    <PenEventsTab
                        penId={pen.id}
                        penNumber={pen.pen_number}
                        penFunction={pen.current_function?.function_type}
                        animals={filteredAnimals}
                    // onDataChange prop elhagyva
                    />
                )}

                {/* √öJ H√ÅREM TAB CONTENT */}
                {activeTab === 'harem' && (pen.current_function?.function_type === 'h√°rem' || pen.current_function?.function_type === 'vemhes') && (
                    <HaremDashboard
                        penId={pen.id}
                        penNumber={pen.pen_number}
                        penFunction={pen.current_function.function_type}
                    />
                )}

                {/* Timeline Tab - √öJ KAR√ÅMT√ñRT√âNET K√ÅRTYA RENDSZER */}
                {activeTab === 'timeline' && (
                    <PenHistoryTab
                        penId={pen.id}
                        penNumber={pen.pen_number}
                        onDataChange={() => {
                            console.log('üîÑ Kar√°mt√∂rt√©net adatok v√°ltoztak');
                            fetchPenDetails();
                            fetchAnimalsInPen();
                        }}
                    />
                )}
            </div>

            {/* Movement Panel Modal */}
            <AnimalMovementPanel
                isOpen={showMovementPanel}
                onClose={() => setShowMovementPanel(false)}
                selectedAnimals={selectedAnimals}
                animals={filteredAnimals}
                availablePens={allPens}
                currentPenId={penId}

                // ‚≠ê CSAK AZ onMove FUNKCI√ì FRISS√çT√âSE - METADATA T√ÅMOGAT√ÅSSAL
                // Keresd meg ezt a r√©szt a f√°jlban (787. sor k√∂rny√©k√©n) √©s cser√©ld le:

                onMove={async (targetPenId, reason, notes, isHistorical, moveDate, functionType, metadata) => {
                    try {
                        console.log('üîÑ JAV√çTOTT √°llatok mozgat√°sa:', {
                            from: penId,
                            to: targetPenId,
                            animals: selectedAnimals,
                            reason
                        });

                        // D√°tum kezel√©s
                        const actualMoveDate = isHistorical && moveDate ? moveDate : new Date().toISOString();

                        // üî• KRITIKUS JAV√çT√ÅS: BATCH MOZGAT√ÅS TRANSACTION-nel

                        // 1. ‚úÖ EL≈êTTE: Duplik√°ci√≥ ellen≈ërz√©se
                        console.log('üîç Duplik√°ci√≥ ellen≈ërz√©se...');
                        const { data: existingAssignments, error: checkError } = await supabase
                            .from('animal_pen_assignments')
                            .select('animal_id, pen_id')
                            .in('animal_id', selectedAnimals)
                            .eq('pen_id', targetPenId)
                            .is('removed_at', null);

                        if (checkError) {
                            console.error('‚ùå Duplik√°ci√≥ ellen≈ërz√©si hiba:', checkError);
                            throw new Error('Duplik√°ci√≥ ellen≈ërz√©si hiba: ' + checkError.message);
                        }

                        const alreadyInTarget = existingAssignments?.map(a => a.animal_id) || [];
                        const animalsToMove = selectedAnimals.filter(id => !alreadyInTarget.includes(id));

                        if (alreadyInTarget.length > 0) {
                            console.log('‚ÑπÔ∏è M√°r a c√©lkar√°mban l√©v≈ë √°llatok:', alreadyInTarget);
                        }

                        if (animalsToMove.length === 0) {
                            alert('‚ÑπÔ∏è Minden kiv√°lasztott √°llat m√°r a c√©lkar√°mban van!');
                            setShowMovementPanel(false);
                            return;
                        }

                        // 2. ‚úÖ R√âGI HOZZ√ÅRENDEL√âSEK LEZ√ÅR√ÅSA - csak a mozgatand√≥ √°llatokra
                        if (!isHistorical && animalsToMove.length > 0) {
                            console.log('üîí R√©gi hozz√°rendel√©sek lez√°r√°sa...', animalsToMove);

                            const { error: removeError } = await supabase
                                .from('animal_pen_assignments')
                                .update({ removed_at: actualMoveDate })
                                .in('animal_id', animalsToMove)
                                .is('removed_at', null);

                            if (removeError) {
                                console.error('‚ùå R√©gi hozz√°rendel√©sek lez√°r√°si hiba:', removeError);
                                throw new Error('R√©gi hozz√°rendel√©sek lez√°r√°sa sikertelen: ' + removeError.message);
                            }

                            console.log('‚úÖ R√©gi hozz√°rendel√©sek lez√°rva:', animalsToMove.length);
                        }

                        // 3. ‚úÖ V√ÅRAKOZ√ÅS hogy a lez√°r√°s √©rv√©nyes√ºlj√∂n
                        await new Promise(resolve => setTimeout(resolve, 200));

                        // 4. ‚úÖ √öJ HOZZ√ÅRENDEL√âSEK L√âTREHOZ√ÅSA - csak a mozgatand√≥ √°llatokra
                        if (!isHistorical && animalsToMove.length > 0) {
                            console.log('‚ûï √öj hozz√°rendel√©sek l√©trehoz√°sa...', animalsToMove);

                            const newAssignments = animalsToMove.map(animalId => ({
                                animal_id: animalId,
                                pen_id: targetPenId,
                                assigned_at: actualMoveDate,
                                assignment_reason: reason,
                                notes: notes || null
                            }));

                            const { error: assignError } = await supabase
                                .from('animal_pen_assignments')
                                .insert(newAssignments);

                            if (assignError) {
                                console.error('‚ùå √öj hozz√°rendel√©sek l√©trehoz√°si hiba:', assignError);
                                throw new Error('√öj hozz√°rendel√©sek l√©trehoz√°sa sikertelen: ' + assignError.message);
                            }

                            console.log('‚úÖ √öj hozz√°rendel√©sek l√©trehozva:', animalsToMove.length);
                        }

                        // 5. ‚úÖ V√âGS≈ê DUPLIK√ÅCI√ì ELLEN≈êRZ√âS
                        console.log('üîç V√©gs≈ë duplik√°ci√≥ ellen≈ërz√©se...');
                        for (const animalId of animalsToMove) {
                            const { data: finalCheck, error: finalError } = await supabase
                                .from('animal_pen_assignments')
                                .select('id, pen_id')
                                .eq('animal_id', animalId)
                                .is('removed_at', null);

                            if (finalError) {
                                console.warn('‚ö†Ô∏è V√©gs≈ë ellen≈ërz√©si hiba:', animalId, finalError);
                                continue;
                            }

                            if (finalCheck && finalCheck.length > 1) {
                                console.error('üö® DUPLIK√ÅCI√ì DETEKT√ÅLVA az √°llatn√°l:', animalId, finalCheck);

                                // Csak a c√©lkar√°mban l√©v≈ët hagyjuk meg, a t√∂bbit lez√°rjuk
                                const duplicateIds = finalCheck
                                    .filter(a => a.pen_id !== targetPenId)
                                    .map(a => a.id);

                                if (duplicateIds.length > 0) {
                                    await supabase
                                        .from('animal_pen_assignments')
                                        .update({ removed_at: actualMoveDate })
                                        .in('id', duplicateIds);

                                    console.log('üßπ Duplik√°tumok elt√°vol√≠tva az √°llatn√°l:', animalId, duplicateIds);
                                }
                            }
                        }

                        // 6. ‚úÖ EGYS√âGES ESEM√âNY R√ñGZ√çT√âS
                        const events = selectedAnimals.map(animalId => ({
                            animal_id: animalId,
                            event_type: 'pen_movement',
                            event_date: actualMoveDate.split('T')[0],
                            event_time: actualMoveDate.split('T')[1]?.substring(0, 8) || '12:00:00',
                            pen_id: targetPenId,
                            previous_pen_id: penId,
                            pen_function: functionType || null,
                            function_metadata: metadata || null,
                            reason: reason,
                            notes: notes || null,
                            is_historical: isHistorical || false
                        }));

                        const { error: eventError } = await supabase
                            .from('animal_events')
                            .insert(events);

                        if (eventError) {
                            console.warn('‚ö†Ô∏è Esem√©ny ment√©se sikertelen:', eventError.message);
                        } else {
                            console.log('‚úÖ Esem√©nyek mentve animal_events t√°bl√°ba:', events.length);
                        }

                        // 7. ‚úÖ SIKER√úZENET
                        const movedCount = animalsToMove.length;
                        const alreadyThereCount = alreadyInTarget.length;

                        let successMessage = `‚úÖ Mozgat√°s befejezve!\n\n`;
                        if (movedCount > 0) {
                            successMessage += `üîÑ √Åthelyezve: ${movedCount} √°llat\n`;
                        }
                        if (alreadyThereCount > 0) {
                            successMessage += `‚ÑπÔ∏è M√°r ott volt: ${alreadyThereCount} √°llat\n`;
                        }
                        successMessage += `üìç C√©lkar√°m: ${targetPenId}\n`;
                        successMessage += `üìù Indokl√°s: ${reason}`;

                        if (functionType === 'h√°rem' && metadata) {
                            successMessage += `\n\nüêÑüíï H√ÅREM ADATOK:`;
                            if (metadata.tenyeszbika_name) {
                                successMessage += `\nüêÇ Teny√©szbika: ${metadata.tenyeszbika_name}`;
                            }
                            if (metadata.pairing_start_date) {
                                successMessage += `\nüíï P√°rz√°si kezdet: ${new Date(metadata.pairing_start_date).toLocaleDateString('hu-HU')}`;
                            }
                        }

                        if (isHistorical) {
                            successMessage += `\n\nüìö T√∂rt√©neti mozgat√°s - √°llatok jelenlegi kar√°mja nem v√°ltozott`;
                        }

                        alert(successMessage);

                        setShowMovementPanel(false);
                        setSelectedAnimals([]);

                        // Csak nem t√∂rt√©neti mozgat√°s eset√©n friss√≠tj√ºk az oldalt
                        if (!isHistorical) {
                            setTimeout(() => {
                                window.location.reload();
                            }, 1000);
                        }

                    } catch (error) {
                        console.error('‚ùå JAV√çTOTT mozgat√°si hiba:', error);
                        const errorMessage = error instanceof Error ? error.message : 'Ismeretlen hiba';
                        alert(`‚ùå Mozgat√°si hiba: ${errorMessage}`);
                    }
                }}
            />

            {/* √öJ: Add Animals Panel */}
            <AnimalMovementPanel
                isOpen={showAddAnimalsPanel}
                onClose={() => setShowAddAnimalsPanel(false)}
                selectedAnimals={[]}
                animals={[]}
                availablePens={allPens}
                currentPenId={penId}
                isAddMode={true}
                selectedAnimalsForAdd={selectedAnimalsForAdd}
                setSelectedAnimalsForAdd={setSelectedAnimalsForAdd}
                onMove={(targetPenId, reason, notes) => {
                    alert(`√Ållatok hozz√°ad√°sa a kar√°mhoz!`);
                    setShowAddAnimalsPanel(false);
                }}
            />

            <PenFunctionManager
                isOpen={showFunctionManager}
                onClose={() => {
                    setShowFunctionManager(false);
                    setEditingPeriod(null); // Reset edit state
                }}
                pen={pen}
                editMode={!!editingPeriod}        // √öJ - edit m√≥d ha van editingPeriod
                editPeriod={editingPeriod}        // √öJ - szerkesztend≈ë peri√≥dus
                onPeriodUpdate={(periodId: any, newData: any) => {  // √öJ - update callback
                    console.log('‚úÖ Peri√≥dus friss√≠tve:', periodId, newData);
                    fetchFullPenHistory(); // Lista friss√≠t√©se
                }}
                onFunctionChange={async (newFunction: any, metadata: any, notes: any) => {
                    // ... eredeti k√≥d v√°ltozatlan marad ...
                    try {
                        // Close old function
                        await supabase
                            .from('pen_functions')
                            .update({ end_date: new Date().toISOString() })
                            .eq('pen_id', pen?.id)
                            .is('end_date', null);

                        // Add new function
                        await supabase
                            .from('pen_functions')
                            .insert({
                                pen_id: pen?.id,
                                function_type: newFunction,
                                start_date: new Date().toISOString(),
                                metadata: metadata,
                                notes: notes
                            });

                        setShowFunctionManager(false);
                        setEditingPeriod(null); // Reset edit state
                        alert('Funkci√≥ sikeresen megv√°ltoztatva!');

                        window.location.reload();
                    } catch (error) {
                        console.error('Hiba:', error);
                        alert('Hiba t√∂rt√©nt a funkci√≥ v√°lt√°skor!');
                    }
                }}
            />
            {/* H√°rem T√∂rt√©net Modal */}
            {showHaremHistory && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white rounded-lg w-full max-w-4xl max-h-[80vh] overflow-hidden">
                        <div className="flex items-center justify-between p-6 border-b">
                            <h3 className="text-lg font-medium text-gray-900 flex items-center">
                                <span className="text-2xl mr-3">üìö</span>
                                Kar√°m {pen.pen_number} - H√°rem T√∂rt√©net
                            </h3>

                            {/* T√∂rl√©s gombok */}
                            <div className="flex items-center space-x-3">
                                {haremHistory.length > 1 && (
                                    <button
                                        onClick={deleteAllOldHaremPeriods}
                                        className="bg-orange-600 hover:bg-orange-700 text-white px-3 py-1 rounded text-sm font-medium transition-colors inline-flex items-center"
                                        title="R√©gi peri√≥dusok t√∂rl√©se"
                                    >
                                        <span className="mr-1">üóëÔ∏è</span>
                                        R√©gi t√∂rl√©se
                                    </button>
                                )}

                                <button
                                    style={{ display: 'none' }}
                                    onClick={() => setShowHaremHistory(true)}
                                >
                                    <span className="text-xl">‚ùå</span>
                                </button>
                            </div>
                        </div>
                        <div className="p-6 overflow-y-auto max-h-[60vh]">
                            {haremHistory.length === 0 ? (
                                <div className="text-center py-8">
                                    <span className="text-4xl mb-4 block">üìö</span>
                                    <p className="text-gray-500">M√©g nincs h√°rem t√∂rt√©net</p>
                                </div>
                            ) : (
                                <div className="space-y-4">
                                    {haremHistory.map((period, index) => (
                                        <div key={period.id} className="border border-green-200 rounded-lg p-4 bg-green-50">
                                            <div className="flex items-center justify-between mb-3">
                                                <div className="flex items-center">
                                                    <span className="text-xl mr-2">üêÑüíï</span>
                                                    <span className="font-medium text-green-800">
                                                        {index === 0 ? 'AKT√çV PERI√ìDUS' : `Peri√≥dus ${haremHistory.length - index}`}
                                                    </span>
                                                </div>

                                                <div className="flex items-center space-x-3">
                                                    <div className="text-sm text-green-600">
                                                        {new Date(period.start_date).toLocaleDateString('hu-HU')} -
                                                        {period.end_date ? new Date(period.end_date).toLocaleDateString('hu-HU') : 'Folyamatban'}
                                                    </div>

                                                    {/* Egyedi t√∂rl√©s gomb */}
                                                    <button
                                                        onClick={() => deleteHaremPeriod(period.id, index === 0)}
                                                        className={`px-2 py-1 rounded text-xs font-medium transition-colors inline-flex items-center ${index === 0
                                                            ? 'bg-red-100 hover:bg-red-200 text-red-700 border border-red-300'
                                                            : 'bg-gray-100 hover:bg-gray-200 text-gray-700 border border-gray-300'
                                                            }`}
                                                        title={index === 0 ? 'Akt√≠v peri√≥dus t√∂rl√©se' : 'Peri√≥dus t√∂rl√©se'}
                                                    >
                                                        <span className="mr-1">üóëÔ∏è</span>
                                                        {index === 0 ? 'Akt√≠v t√∂rl√©s' : 'T√∂rl√©s'}
                                                    </button>
                                                </div>
                                            </div>

                                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                {/* Teny√©szbik√°k */}
                                                <div>
                                                    <span className="text-sm font-medium text-green-700 flex items-center mb-2">
                                                        <span className="mr-1">üêÇ</span>
                                                        Teny√©szbik√°k ({period.metadata?.bull_count || 0}):
                                                    </span>
                                                    {period.metadata?.bulls ? (
                                                        <div className="space-y-1">
                                                            {period.metadata.bulls.map((bull: any, i: number) => (
                                                                <div key={i} className="text-sm text-green-600">
                                                                    ‚Ä¢ {bull.name} ({bull.enar})
                                                                </div>
                                                            ))}
                                                        </div>
                                                    ) : (
                                                        <div className="text-sm text-gray-500">Nincs adat</div>
                                                    )}
                                                </div>

                                                {/* N≈ëivarok */}
                                                <div>
                                                    <span className="text-sm font-medium text-green-700 flex items-center mb-2">
                                                        <span className="mr-1">üêÑ</span>
                                                        N≈ëivarok ({period.metadata?.female_count || 0}):
                                                    </span>
                                                    {period.metadata?.females ? (
                                                        <div className="max-h-32 overflow-y-auto">
                                                            <div className="text-sm text-green-600">
                                                                {period.metadata.females.map((f: any, i: number) => f.enar).join(', ')}
                                                            </div>
                                                        </div>
                                                    ) : (
                                                        <div className="text-sm text-gray-500">Nincs pillanatk√©p</div>
                                                    )}
                                                </div>
                                            </div>

                                            {/* Timeline adatok */}
                                            <div className="mt-4 pt-3 border-t border-green-200">
                                                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                                                    {period.metadata?.parozas_kezdete && (
                                                        <div>
                                                            <span className="text-green-600">üíï P√°rz√°s kezdete:</span>
                                                            <p className="font-medium">{new Date(period.metadata.parozas_kezdete).toLocaleDateString('hu-HU')}</p>
                                                        </div>
                                                    )}
                                                    {period.metadata?.vv_esedekssege && (
                                                        <div>
                                                            <span className="text-green-600">üî¨ VV esed√©kess√©ge:</span>
                                                            <p className="font-medium">{new Date(period.metadata.vv_esedekssege).toLocaleDateString('hu-HU')}</p>
                                                        </div>
                                                    )}
                                                    {period.metadata?.snapshot_created_at && (
                                                        <div>
                                                            <span className="text-green-600">üì∏ Pillanatk√©p:</span>
                                                            <p className="font-medium">{new Date(period.metadata.snapshot_created_at).toLocaleDateString('hu-HU')}</p>
                                                        </div>
                                                    )}
                                                </div>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            )}
            {/* Teljes Kar√°m T√∂rt√©net Modal - √öJ */}
            {showPenHistory && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white rounded-lg w-full max-w-5xl max-h-[85vh] overflow-hidden">
                        <div className="flex items-center justify-between p-6 border-b">
                            <h3 className="text-lg font-medium text-gray-900 flex items-center">
                                <span className="text-2xl mr-3">üìö</span>
                                Kar√°m {pen.pen_number} - Teljes T√∂rt√©net
                            </h3>

                            {/* Sz≈±r≈ë gombok */}
                            <div className="flex items-center space-x-2">
                                <button className="px-3 py-1 bg-green-100 text-green-800 rounded-lg text-sm font-medium">
                                    üè† Minden ({penHistory.length})
                                </button>
                                <button className="px-3 py-1 bg-pink-100 text-pink-800 rounded-lg text-sm">
                                    üíï H√°rem ({penHistory.filter(p => p.function_type === 'h√°rem').length})
                                </button>

                                {/* T√ñMEGES T√ñRL√âS GOMB */}
                                {penHistory.length > 1 && (
                                    <button
                                        onClick={deleteAllOldHaremPeriods}
                                        className="bg-orange-600 hover:bg-orange-700 text-white px-3 py-1 rounded text-sm font-medium transition-colors"
                                        title="R√©gi peri√≥dusok t√∂rl√©se"
                                    >
                                        üóëÔ∏è R√©gi t√∂rl√©se
                                    </button>
                                )}

                                <button
                                    onClick={() => setShowPenHistory(false)}
                                    className="text-gray-400 hover:text-gray-600"
                                >
                                    <span className="text-xl">‚ùå</span>
                                </button>
                            </div>
                        </div>

                        <div className="p-6 overflow-y-auto max-h-[70vh]">
                            {penHistory.length === 0 ? (
                                <div className="text-center py-8">
                                    <span className="text-4xl mb-4 block">üìö</span>
                                    <p className="text-gray-500">M√©g nincs kar√°m t√∂rt√©net</p>
                                </div>
                            ) : (
                                <div className="space-y-6">
                                    {/* H√ÅREM PERI√ìDUSOK - KIEMELVE */}
                                    {penHistory.filter(p => p.function_type === 'h√°rem').length > 0 && (
                                        <div>
                                            <h4 className="text-lg font-semibold text-pink-800 mb-4 flex items-center">
                                                <span className="mr-2">üíï</span>
                                                H√°rem Peri√≥dusok ({penHistory.filter(p => p.function_type === 'h√°rem').length})
                                            </h4>

                                            <div className="space-y-4">
                                                {penHistory
                                                    .filter(p => p.function_type === 'h√°rem')
                                                    .map((period, index) => (
                                                        <div key={period.id} className="border-2 border-pink-200 rounded-lg p-6 bg-pink-50">
                                                            <div className="flex items-center justify-between mb-3">
                                                                <div className="flex items-center">
                                                                    <span className="text-xl mr-2">üêÑüíï</span>
                                                                    <span className="font-medium text-pink-800">
                                                                        {(!period.end_date || period.end_date === null || period.end_date === '')
                                                                            ? 'AKT√çV H√ÅREM'
                                                                            : `H√°rem Peri√≥dus ${penHistory.filter(p => p.function_type === 'h√°rem').length - index}`}
                                                                    </span>
                                                                </div>

                                                                <div className="flex items-center space-x-3">
                                                                    <div className="text-sm text-pink-600">
                                                                        {new Date(period.start_date).toLocaleDateString('hu-HU')} -
                                                                        {period.end_date ? new Date(period.end_date).toLocaleDateString('hu-HU') : 'Folyamatban'}
                                                                    </div>

                                                                    {/* SZERKESZT√âS GOMB */}
                                                                    <button
                                                                        onClick={() => editPeriod(period)}
                                                                        className="px-2 py-1 rounded text-xs font-medium transition-colors bg-blue-100 hover:bg-blue-200 text-blue-700 border border-blue-300 mr-2"
                                                                        title="H√°rem peri√≥dus szerkeszt√©se"
                                                                    >
                                                                        ‚úèÔ∏è Szerkeszt√©s
                                                                    </button>

                                                                    {/* T√ñRL√âS GOMB */}
                                                                    <button
                                                                        onClick={() => deletePeriod(
                                                                            period.id,
                                                                            'h√°rem',
                                                                            !period.end_date || period.end_date === null || period.end_date === ''
                                                                        )}
                                                                        className={`px-2 py-1 rounded text-xs font-medium transition-colors ${(!period.end_date || period.end_date === null || period.end_date === '')
                                                                            ? 'bg-red-100 hover:bg-red-200 text-red-700 border border-red-300'
                                                                            : 'bg-gray-100 hover:bg-gray-200 text-gray-700 border border-gray-300'
                                                                            }`}
                                                                        title={(!period.end_date || period.end_date === null || period.end_date === '') ? 'Akt√≠v h√°rem t√∂rl√©se' : 'H√°rem peri√≥dus t√∂rl√©se'}
                                                                    >
                                                                        üóëÔ∏è T√∂rl√©s
                                                                    </button>
                                                                </div>
                                                            </div>

                                                            {/* H√°rem snapshot adatok */}
                                                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                                {/* Teny√©szbik√°k */}
                                                                <div>
                                                                    <span className="text-sm font-medium text-pink-700 flex items-center mb-2">
                                                                        <span className="mr-1">üêÇ</span>
                                                                        Teny√©szbik√°k ({period.metadata?.bull_count || 0}):
                                                                    </span>
                                                                    {period.metadata?.bulls ? (
                                                                        <div className="space-y-1">
                                                                            {period.metadata.bulls.map((bull: any, i: number) => (
                                                                                <div key={i} className="text-sm text-pink-600 bg-white px-2 py-1 rounded border">
                                                                                    üêÇ {bull.name} ({bull.enar})
                                                                                </div>
                                                                            ))}
                                                                        </div>
                                                                    ) : (
                                                                        <div className="text-sm text-gray-500">Nincs snapshot adat</div>
                                                                    )}
                                                                </div>

                                                                {/* N≈ëivarok */}
                                                                <div>
                                                                    <span className="text-sm font-medium text-pink-700 flex items-center mb-2">
                                                                        <span className="mr-1">üêÑ</span>
                                                                        N≈ëivarok ({period.metadata?.female_count || 0}):
                                                                    </span>
                                                                    {period.metadata?.females ? (
                                                                        <div className="max-h-24 overflow-y-auto bg-white p-2 rounded border">
                                                                            <div className="text-xs text-pink-600">
                                                                                {period.metadata.females.map((f: any, i: number) => f.enar).join(', ')}
                                                                            </div>
                                                                        </div>
                                                                    ) : (
                                                                        <div className="text-sm text-gray-500">Nincs snapshot</div>
                                                                    )}
                                                                </div>
                                                            </div>

                                                            {/* H√°rem timeline */}
                                                            {(period.metadata?.parozas_kezdete || period.metadata?.vv_esedekssege) && (
                                                                <div className="mt-4 pt-3 border-t border-pink-200">
                                                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                                                                        {period.metadata?.parozas_kezdete && (
                                                                            <div>
                                                                                <span className="text-pink-600">üíï P√°rz√°s kezdete:</span>
                                                                                <p className="font-medium">{new Date(period.metadata.parozas_kezdete).toLocaleDateString('hu-HU')}</p>
                                                                            </div>
                                                                        )}
                                                                        {period.metadata?.vv_esedekssege && (
                                                                            <div>
                                                                                <span className="text-pink-600">üî¨ VV esed√©kess√©ge:</span>
                                                                                <p className="font-medium">{new Date(period.metadata.vv_esedekssege).toLocaleDateString('hu-HU')}</p>
                                                                            </div>
                                                                        )}
                                                                    </div>
                                                                </div>
                                                            )}
                                                        </div>
                                                    ))}
                                            </div>
                                        </div>
                                    )}

                                    {/* EGY√âB FUNKCI√ìK - KOMPAKT */}
                                    {penHistory.filter(p => p.function_type !== 'h√°rem').length > 0 && (
                                        <div>
                                            <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                                                <span className="mr-2">üîÑ</span>
                                                Egy√©b Funkci√≥k ({penHistory.filter(p => p.function_type !== 'h√°rem').length})
                                            </h4>

                                            <div className="space-y-3">
                                                {penHistory
                                                    .filter(p => p.function_type !== 'h√°rem')
                                                    .map((period) => (
                                                        <div key={period.id} className="border border-gray-200 rounded-lg p-4 bg-gray-50">
                                                            <div className="flex items-center justify-between">
                                                                <div className="flex items-center">
                                                                    <span className="text-xl mr-2">{getFunctionEmoji(period.function_type)}</span>
                                                                    <div>
                                                                        <span className="font-medium text-gray-800">{period.function_type?.toUpperCase()}</span>
                                                                        <div className="text-sm text-gray-600">
                                                                            {new Date(period.start_date).toLocaleDateString('hu-HU')} -
                                                                            {period.end_date ? new Date(period.end_date).toLocaleDateString('hu-HU') : 'Folyamatban'}
                                                                            {period.end_date && (
                                                                                <span className="ml-2 text-gray-500">
                                                                                    ({Math.ceil((new Date(period.end_date).getTime() - new Date(period.start_date).getTime()) / (1000 * 60 * 60 * 24))} nap)
                                                                                </span>
                                                                            )}
                                                                        </div>
                                                                    </div>
                                                                </div>

                                                                <div className="flex items-center space-x-3">
                                                                    {/* Funkci√≥-specifikus √∂sszefoglal√≥ */}
                                                                    <div className="text-sm text-gray-600">
                                                                        {period.function_type === 'b√∂lcsi' && 'üêÆ Borj√∫ nevel√©s'}
                                                                        {period.function_type === '√≥vi' && 'üêÑ √úsz≈ë fejleszt√©s'}
                                                                        {period.function_type === 'ellet≈ë' && 'üçº Ell√©s k√∂r√ºl'}
                                                                        {period.function_type === 'vemhes' && 'ü§∞ Vemhess√©g'}
                                                                        {period.function_type === 'h√≠z√≥bika' && 'üêÇ Hizlal√°s'}
                                                                        {period.function_type === 'teh√©n' && 'üêÑüçº Anyas√°g'}
                                                                        {period.function_type === '√ºres' && '‚≠ï Haszn√°laton k√≠v√ºl'}
                                                                        {period.function_type === '√°tmeneti' && 'üîÑ √Åtmeneti'}
                                                                        {period.function_type === 'k√≥rh√°z' && 'üè• Kezel√©s'}
                                                                        {period.function_type === 'karant√©n' && 'üîí Elk√ºl√∂n√≠t√©s'}
                                                                        {period.function_type === 'selejt' && 'üì¶ √ârt√©kes√≠t√©sre v√°r'}
                                                                    </div>

                                                                    {/* T√ñRL√âS GOMB */}
                                                                    <button
                                                                        onClick={() => deletePeriod(
                                                                            period.id,
                                                                            period.function_type,
                                                                            !period.end_date || period.end_date === null || period.end_date === ''
                                                                        )}
                                                                        className={`px-2 py-1 rounded text-xs font-medium transition-colors ${(!period.end_date || period.end_date === null || period.end_date === '')
                                                                            ? 'bg-red-100 hover:bg-red-200 text-red-700 border border-red-300'
                                                                            : 'bg-gray-100 hover:bg-gray-200 text-gray-700 border border-gray-300'
                                                                            }`}
                                                                        title={(!period.end_date || period.end_date === null || period.end_date === '') ? 'Akt√≠v peri√≥dus t√∂rl√©se' : 'Peri√≥dus t√∂rl√©se'}
                                                                    >
                                                                        üóëÔ∏è T√∂rl√©s
                                                                    </button>
                                                                </div>
                                                            </div>

                                                            {/* Ha van metadata, mutassunk bel≈ële valamit */}
                                                            {period.metadata && Object.keys(period.metadata).length > 0 && (
                                                                <div className="mt-2 pt-2 border-t border-gray-200 text-xs text-gray-500">
                                                                    üìã Metadata: {Object.keys(period.metadata).length} adat mentve
                                                                </div>
                                                            )}
                                                        </div>
                                                    ))}
                                            </div>
                                        </div>
                                    )}
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}