'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { mockStorage } from '@/lib/mockStorage';

interface Animal {
  enar: string;
  szuletesi_datum: string;
  ivar: 'h√≠mivar' | 'n≈ëivar';
  kategoria: string;
  jelenlegi_karam: string;
  statusz: string;
  anya_enar?: string;
  apa_enar?: string;
  kplsz?: string;
  bekerules_datum?: string;
  fotok?: string[];
  utolso_modositas: string;
  letrehozva: string;
}

export default function NewAnimalPage() {
  const router = useRouter();
  const [step, setStep] = useState(1);
  const [existingAnimals, setExistingAnimals] = useState<Animal[]>([]);

  // Form adatok
  const [formData, setFormData] = useState({
    // Alapadatok
    enar: '',
    szuletesi_datum: '',
    ivar: '' as '' | 'h√≠mivar' | 'n≈ëivar',
    eredet: '' as '' | 'nalunk_szuletett' | 'vasarolt',
    
    // Sz√ºl≈ëk (n√°lunk sz√ºletett)
    anya_enar: '',
    apa_enar: '',
    apa_tipus: '' as '' | 'termeszetes' | 'mesterseges' | 'ismeretlen',
    kplsz: '',
    
    // Sz√ºl≈ëk (v√°s√°rolt)
    anya_enar_manual: '',
    apa_enar_manual: '',
    
    // Elhelyez√©s
    jelenlegi_karam: '',
    bekerules_datum: '',
    statusz: 'eg√©szs√©ges'
  });

  const [errors, setErrors] = useState<{[key: string]: string}>({});

  useEffect(() => {
    const animals = mockStorage.getAllAnimals();
    setExistingAnimals(animals);
  }, []);

  // Kateg√≥ria automatikus kalkul√°ci√≥
  const calculateCategory = (birthDate: string, gender: 'h√≠mivar' | 'n≈ëivar'): string => {
    const birth = new Date(birthDate);
    const now = new Date();
    const ageInMonths = (now.getTime() - birth.getTime()) / (1000 * 60 * 60 * 24 * 30.44);

    if (ageInMonths < 6) return 'n√∂var√∫_borj√∫';
    
    if (gender === 'h√≠mivar') {
      if (ageInMonths >= 24) return 'teny√©szbika';
      return 'h√≠z√≥bika';
    } else {
      if (ageInMonths >= 36) return 'teh√©n';
      if (ageInMonths >= 24) return 'sz≈±z_√ºsz≈ë';
      return 'n√∂var√∫_borj√∫';
    }
  };

  // Kar√°m javaslatok kateg√≥ria alapj√°n
  const getKaramSuggestions = (category: string): string[] => {
    const suggestions: { [key: string]: string[] } = {
      'n√∂var√∫_borj√∫': ['B√∂lcsi #1', 'B√∂lcsi #2', 'Ellet≈ë ist√°ll√≥ - Fogad√≥ #1'],
      'h√≠z√≥bika': ['H√≠z√≥bika kar√°m #1', 'H√≠z√≥bika kar√°m #2', 'Kar√°m #3'],
      'sz≈±z_√ºsz≈ë': ['√ìvi #1', '√ìvi #2', '√ìvi #3'],
      'teh√©n': ['H√°rem #1', 'H√°rem #2', 'Vemhes kar√°m #1'],
      'teny√©szbika': ['H√°rem #1', 'H√°rem #2', 'Teny√©szbika kar√°m']
    };
    return suggestions[category] || [];
  };

  // Potenci√°lis any√°k (n≈ëivar + megfelel≈ë kateg√≥ria)
  const getPotentialMothers = (): Animal[] => {
    return existingAnimals.filter(animal => 
      animal.ivar === 'n≈ëivar' && 
      ['teh√©n', 'sz≈±z_√ºsz≈ë', 'vemhes_√ºsz≈ë'].includes(animal.kategoria)
    );
  };

  // Potenci√°lis ap√°k (h√≠mivar + teny√©szbika)
  const getPotentialFathers = (): Animal[] => {
    return existingAnimals.filter(animal => 
      animal.ivar === 'h√≠mivar' && 
      animal.kategoria === 'teny√©szbika'
    );
  };

  // Valid√°ci√≥s f√ºggv√©nyek
  const validateStep1 = (): boolean => {
    const newErrors: {[key: string]: string} = {};

    if (!formData.enar) {
      newErrors.enar = 'ENAR megad√°sa k√∂telez≈ë';
    } else if (!/^HU\d{10}$/.test(formData.enar)) {
      newErrors.enar = 'ENAR form√°tuma: HU + 10 sz√°mjegy';
    } else if (existingAnimals.some(a => a.enar === formData.enar)) {
      newErrors.enar = 'Ez az ENAR m√°r l√©tezik';
    }

    if (!formData.szuletesi_datum) {
      newErrors.szuletesi_datum = 'Sz√ºlet√©si d√°tum megad√°sa k√∂telez≈ë';
    }

    if (!formData.ivar) {
      newErrors.ivar = 'Ivar megad√°sa k√∂telez≈ë';
    }

    if (!formData.eredet) {
      newErrors.eredet = 'Eredet megad√°sa k√∂telez≈ë';
    }

    // Sz√ºl≈ëk valid√°ci√≥ n√°lunk sz√ºletett eset√©n
    if (formData.eredet === 'nalunk_szuletett') {
      if (!formData.anya_enar && formData.anya_enar !== 'ismeretlen') {
        newErrors.anya_enar = 'Anya megad√°sa k√∂telez≈ë';
      }
      
      if (!formData.apa_tipus) {
        newErrors.apa_tipus = 'Apa t√≠pus megad√°sa k√∂telez≈ë';
      }
      
      if (formData.apa_tipus === 'termeszetes' && !formData.apa_enar) {
        newErrors.apa_enar = 'Apa megad√°sa k√∂telez≈ë term√©szetes szapor√≠t√°sn√°l';
      }
      
      if (formData.apa_tipus === 'mesterseges' && !formData.kplsz) {
        newErrors.kplsz = 'Spermak√≥d megad√°sa k√∂telez≈ë mesters√©ges term√©keny√≠t√©sn√©l';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const validateStep2 = (): boolean => {
    const newErrors: {[key: string]: string} = {};

    if (!formData.jelenlegi_karam) {
      newErrors.jelenlegi_karam = 'Kar√°m megad√°sa k√∂telez≈ë';
    }

    if (!formData.bekerules_datum) {
      newErrors.bekerules_datum = 'Beker√ºl√©s d√°tuma k√∂telez≈ë';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // L√©p√©s kezel√©s
  const handleNextStep = () => {
    if (step === 1 && validateStep1()) {
      // Automatikus beker√ºl√©s d√°tum be√°ll√≠t√°sa n√°lunk sz√ºletett eset√©n
      if (formData.eredet === 'nalunk_szuletett' && !formData.bekerules_datum) {
        setFormData(prev => ({ ...prev, bekerules_datum: prev.szuletesi_datum }));
      }
      setStep(2);
    } else if (step === 2 && validateStep2()) {
      setStep(3);
    }
  };

  const handlePrevStep = () => {
    if (step > 1) {
      setStep(step - 1);
    }
  };

  // Ment√©s
  const handleSave = async () => {
    if (!validateStep2()) return;

    try {
      // TypeScript t√≠pus ellen≈ërz√©s
      if (!formData.ivar || !formData.szuletesi_datum) {
        setErrors({ general: 'Hi√°nyos adatok. K√©rj√ºk t√∂ltse ki az √∂sszes k√∂telez≈ë mez≈ët.' });
        return;
      }

      const category = calculateCategory(formData.szuletesi_datum, formData.ivar as 'h√≠mivar' | 'n≈ëivar');
      
      const newAnimal: Animal = {
        enar: formData.enar,
        szuletesi_datum: formData.szuletesi_datum,
        ivar: formData.ivar,
        kategoria: category,
        jelenlegi_karam: formData.jelenlegi_karam,
        statusz: formData.statusz,
        bekerules_datum: formData.bekerules_datum,
        fotok: [],
        utolso_modositas: new Date().toISOString(),
        letrehozva: new Date().toISOString()
      };

      // Sz√ºl≈ëk be√°ll√≠t√°sa eredet alapj√°n
      if (formData.eredet === 'nalunk_szuletett') {
        if (formData.anya_enar && formData.anya_enar !== 'ismeretlen') {
          newAnimal.anya_enar = formData.anya_enar;
        }
        
        if (formData.apa_tipus === 'termeszetes' && formData.apa_enar) {
          newAnimal.apa_enar = formData.apa_enar;
        } else if (formData.apa_tipus === 'mesterseges' && formData.kplsz) {
          newAnimal.kplsz = formData.kplsz;
        }
      } else if (formData.eredet === 'vasarolt') {
        if (formData.anya_enar_manual) {
          newAnimal.anya_enar = formData.anya_enar_manual;
        }
        if (formData.apa_enar_manual) {
          newAnimal.apa_enar = formData.apa_enar_manual;
        }
      }

      await mockStorage.addAnimal(newAnimal);
      router.push(`/dashboard/animals/${newAnimal.enar}`);
    } catch (error) {
      console.error('Ment√©si hiba:', error);
      setErrors({ general: 'Ment√©si hiba t√∂rt√©nt. K√©rj√ºk pr√≥b√°lja √∫jra.' });
    }
  };

  // Kateg√≥ria el≈ën√©zet
  const previewCategory = (formData.szuletesi_datum && formData.ivar && formData.ivar.length > 0)
  ? calculateCategory(formData.szuletesi_datum, formData.ivar)
  : '';

  // Kar√°m javaslatok
 const karamSuggestions = (previewCategory && typeof previewCategory === 'string') 
  ? getKaramSuggestions(previewCategory) 
  : [];

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-5xl mx-auto">
        
        {/* Header - DESIGN SYSTEM */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <span className="text-4xl mr-4">üêÑ</span>
              <div>
                <h1 className="text-3xl font-bold text-gray-900">√öj √°llat hozz√°ad√°sa</h1>
                <p className="mt-2 text-gray-600">3 l√©p√©ses wizard az √°llat adatainak r√∂gz√≠t√©s√©hez</p>
              </div>
            </div>
            <button
              onClick={() => router.back()}
              className="text-gray-400 hover:text-gray-600 p-2 transition-colors"
            >
              ‚¨ÖÔ∏è
            </button>
          </div>
        </div>

        {/* Progress Bar - DESIGN SYSTEM */}
        <div className="bg-white rounded-lg shadow-sm border p-6 mb-6">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-4 w-full">
              <div className={`flex items-center justify-center w-10 h-10 rounded-full text-sm font-medium ${
                step >= 1 ? 'bg-green-600 text-white' : 'bg-gray-200 text-gray-600'
              }`}>
                {step > 1 ? '‚úÖ' : '1'}
              </div>
              <div className={`h-2 flex-1 max-w-20 rounded-full ${step >= 2 ? 'bg-green-600' : 'bg-gray-200'}`}></div>
              <div className={`flex items-center justify-center w-10 h-10 rounded-full text-sm font-medium ${
                step >= 2 ? 'bg-green-600 text-white' : 'bg-gray-200 text-gray-600'
              }`}>
                {step > 2 ? '‚úÖ' : '2'}
              </div>
              <div className={`h-2 flex-1 max-w-20 rounded-full ${step >= 3 ? 'bg-green-600' : 'bg-gray-200'}`}></div>
              <div className={`flex items-center justify-center w-10 h-10 rounded-full text-sm font-medium ${
                step >= 3 ? 'bg-green-600 text-white' : 'bg-gray-200 text-gray-600'
              }`}>
                {step > 3 ? '‚úÖ' : '3'}
              </div>
            </div>
          </div>
          
          <div className="flex justify-between text-sm text-gray-600">
            <span className={step >= 1 ? 'text-green-600 font-medium' : ''}>
              üêÑ Alapadatok
            </span>
            <span className={step >= 2 ? 'text-green-600 font-medium' : ''}>
              üè† Elhelyez√©s
            </span>
            <span className={step >= 3 ? 'text-green-600 font-medium' : ''}>
              ‚úÖ Ellen≈ërz√©s
            </span>
          </div>
        </div>

        {/* Step Content */}
        <div className="bg-white rounded-lg shadow-sm border p-6 mb-6">
          {/* STEP 1: Alapadatok */}
          {step === 1 && (
            <div className="space-y-6">
              <div className="flex items-center mb-6">
                <span className="text-2xl mr-3">üêÑ</span>
                <h2 className="text-xl font-semibold text-gray-900">Alapadatok megad√°sa</h2>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* ENAR */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    üè∑Ô∏è ENAR *
                  </label>
                  <input
                    type="text"
                    value={formData.enar}
                    onChange={(e) => setFormData(prev => ({ ...prev, enar: e.target.value.toUpperCase() }))}
                    placeholder="HU1234567890"
                    className={`w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors ${
                      errors.enar ? 'border-red-500' : ''
                    }`}
                  />
                  {errors.enar && <p className="text-red-500 text-sm mt-1">{errors.enar}</p>}
                </div>

                {/* Sz√ºlet√©si d√°tum */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    üìÖ Sz√ºlet√©si d√°tum *
                  </label>
                  <input
                    type="date"
                    value={formData.szuletesi_datum}
                    onChange={(e) => setFormData(prev => ({ ...prev, szuletesi_datum: e.target.value }))}
                    className={`w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors ${
                      errors.szuletesi_datum ? 'border-red-500' : ''
                    }`}
                  />
                  {errors.szuletesi_datum && <p className="text-red-500 text-sm mt-1">{errors.szuletesi_datum}</p>}
                </div>

                {/* Ivar */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‚ö• Ivar *
                  </label>
                  <select
                    value={formData.ivar}
                    onChange={(e) => setFormData(prev => ({ ...prev, ivar: e.target.value as 'h√≠mivar' | 'n≈ëivar' }))}
                    className={`w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors bg-white ${
                      errors.ivar ? 'border-red-500' : ''
                    }`}
                  >
                    <option value="">V√°lasszon...</option>
                    <option value="h√≠mivar">‚ôÇÔ∏è H√≠mivar</option>
                    <option value="n≈ëivar">‚ôÄÔ∏è N≈ëivar</option>
                  </select>
                  {errors.ivar && <p className="text-red-500 text-sm mt-1">{errors.ivar}</p>}
                </div>

                {/* Kateg√≥ria el≈ën√©zet */}
                {previewCategory && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      üéØ Kateg√≥ria (automatikus)
                    </label>
                    <div className="px-4 py-3 bg-green-50 border border-green-200 rounded-lg text-green-800 font-medium">
                      {previewCategory}
                    </div>
                  </div>
                )}
              </div>

              {/* √Ållat eredete */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  üåç Az √°llat eredete *
                </label>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <label className={`cursor-pointer p-6 border-2 rounded-lg transition-colors ${
                    formData.eredet === 'nalunk_szuletett' 
                      ? 'border-green-500 bg-green-50' 
                      : 'border-gray-200 hover:border-gray-300'
                  }`}>
                    <input
                      type="radio"
                      name="eredet"
                      value="nalunk_szuletett"
                      checked={formData.eredet === 'nalunk_szuletett'}
                      onChange={(e) => setFormData(prev => ({ ...prev, eredet: e.target.value as 'nalunk_szuletett' }))}
                      className="sr-only"
                    />
                    <div className="text-center">
                      <div className="text-3xl mb-3">üè†</div>
                      <div className="font-medium text-lg">N√°lunk sz√ºletett</div>
                      <div className="text-sm text-gray-600 mt-2">
                        Sz√ºl≈ëk kiv√°laszt√°sa list√°b√≥l
                      </div>
                    </div>
                  </label>

                  <label className={`cursor-pointer p-6 border-2 rounded-lg transition-colors ${
                    formData.eredet === 'vasarolt' 
                      ? 'border-green-500 bg-green-50' 
                      : 'border-gray-200 hover:border-gray-300'
                  }`}>
                    <input
                      type="radio"
                      name="eredet"
                      value="vasarolt"
                      checked={formData.eredet === 'vasarolt'}
                      onChange={(e) => setFormData(prev => ({ ...prev, eredet: e.target.value as 'vasarolt' }))}
                      className="sr-only"
                    />
                    <div className="text-center">
                      <div className="text-3xl mb-3">üõí</div>
                      <div className="font-medium text-lg">V√°s√°rolt √°llat</div>
                      <div className="text-sm text-gray-600 mt-2">
                        Sz√ºl≈ëk k√©zi megad√°sa
                      </div>
                    </div>
                  </label>
                </div>
                {errors.eredet && <p className="text-red-500 text-sm mt-1">{errors.eredet}</p>}
              </div>

              {/* Sz√ºl≈ëk - N√°lunk sz√ºletett */}
              {formData.eredet === 'nalunk_szuletett' && (
                <div className="bg-green-50 rounded-lg border border-green-200 p-6 space-y-4">
                  <div className="flex items-center">
                    <span className="text-2xl mr-3">üêÆ‚ù§Ô∏èüêÇ</span>
                    <h3 className="font-medium text-green-800">Sz√ºl≈ëk kiv√°laszt√°sa</h3>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {/* Anya */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        üêÆ Anya
                      </label>
                      <select
                        value={formData.anya_enar}
                        onChange={(e) => setFormData(prev => ({ ...prev, anya_enar: e.target.value }))}
                        className={`w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors bg-white ${
                          errors.anya_enar ? 'border-red-500' : ''
                        }`}
                      >
                        <option value="">V√°lasszon any√°t...</option>
                        <option value="ismeretlen">‚ùì Ismeretlen</option>
                        {getPotentialMothers().map(animal => (
                          <option key={animal.enar} value={animal.enar}>
                            {animal.enar} ({animal.kategoria})
                          </option>
                        ))}
                      </select>
                      {errors.anya_enar && <p className="text-red-500 text-sm mt-1">{errors.anya_enar}</p>}
                    </div>

                    {/* Apa t√≠pus */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        üêÇ Apa t√≠pusa
                      </label>
                      <select
                        value={formData.apa_tipus}
                        onChange={(e) => setFormData(prev => ({ ...prev, apa_tipus: e.target.value as 'termeszetes' | 'mesterseges' | 'ismeretlen' }))}
                        className={`w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors bg-white ${
                          errors.apa_tipus ? 'border-red-500' : ''
                        }`}
                      >
                        <option value="">V√°lasszon...</option>
                        <option value="termeszetes">üêÇ Term√©szetes fedeztet√©s</option>
                        <option value="mesterseges">üß™ Mesters√©ges term√©keny√≠t√©s</option>
                        <option value="ismeretlen">‚ùì Ismeretlen</option>
                      </select>
                      {errors.apa_tipus && <p className="text-red-500 text-sm mt-1">{errors.apa_tipus}</p>}
                    </div>
                  </div>

                  {/* Term√©szetes apa */}
                  {formData.apa_tipus === 'termeszetes' && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        üêÇ Apa (teny√©szbika)
                      </label>
                      <select
                        value={formData.apa_enar}
                        onChange={(e) => setFormData(prev => ({ ...prev, apa_enar: e.target.value }))}
                        className={`w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors bg-white ${
                          errors.apa_enar ? 'border-red-500' : ''
                        }`}
                      >
                        <option value="">V√°lasszon ap√°t...</option>
                        {getPotentialFathers().map(animal => (
                          <option key={animal.enar} value={animal.enar}>
                            {animal.enar} (teny√©szbika)
                          </option>
                        ))}
                      </select>
                      {errors.apa_enar && <p className="text-red-500 text-sm mt-1">{errors.apa_enar}</p>}
                    </div>
                  )}

                  {/* Spermak√≥d */}
                  {formData.apa_tipus === 'mesterseges' && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        üß™ Spermak√≥d
                      </label>
                      <input
                        type="text"
                        value={formData.kplsz}
                        onChange={(e) => setFormData(prev => ({ ...prev, kplsz: e.target.value }))}
                        placeholder="pl. KPLSZ123456"
                        className={`w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors ${
                          errors.kplsz ? 'border-red-500' : ''
                        }`}
                      />
                      {errors.kplsz && <p className="text-red-500 text-sm mt-1">{errors.kplsz}</p>}
                    </div>
                  )}
                </div>
              )}

              {/* Sz√ºl≈ëk - V√°s√°rolt √°llat */}
              {formData.eredet === 'vasarolt' && (
                <div className="bg-blue-50 rounded-lg border border-blue-200 p-6 space-y-4">
                  <div className="flex items-center">
                    <span className="text-2xl mr-3">üêÆ‚ù§Ô∏èüêÇ</span>
                    <h3 className="font-medium text-blue-800">Sz√ºl≈ëk k√©zi megad√°sa (opcion√°lis)</h3>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        üêÆ Anya ENAR
                      </label>
                      <input
                        type="text"
                        value={formData.anya_enar_manual}
                        onChange={(e) => setFormData(prev => ({ ...prev, anya_enar_manual: e.target.value.toUpperCase() }))}
                        placeholder="HU1234567890 (ha ismert)"
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        üêÇ Apa ENAR
                      </label>
                      <input
                        type="text"
                        value={formData.apa_enar_manual}
                        onChange={(e) => setFormData(prev => ({ ...prev, apa_enar_manual: e.target.value.toUpperCase() }))}
                        placeholder="HU1234567890 (ha ismert)"
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors"
                      />
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}

          {/* STEP 2: Elhelyez√©s */}
          {step === 2 && (
            <div className="space-y-6">
              <div className="flex items-center mb-6">
                <span className="text-2xl mr-3">üè†</span>
                <h2 className="text-xl font-semibold text-gray-900">Elhelyez√©s √©s st√°tusz</h2>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Kar√°m */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    üè† Jelenlegi kar√°m *
                  </label>
                  <select
                    value={formData.jelenlegi_karam}
                    onChange={(e) => setFormData(prev => ({ ...prev, jelenlegi_karam: e.target.value }))}
                    className={`w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors bg-white ${
                      errors.jelenlegi_karam ? 'border-red-500' : ''
                    }`}
                  >
                    <option value="">V√°lasszon kar√°mot...</option>
                    {karamSuggestions.length > 0 && (
                      <optgroup label="üéØ Aj√°nlott kateg√≥ria alapj√°n">
                        {karamSuggestions.map(karam => (
                          <option key={karam} value={karam}>{karam}</option>
                        ))}
                      </optgroup>
                    )}
                    <optgroup label="üè† √ñsszes kar√°m">
                      <option value="Kar√°m #1">Kar√°m #1</option>
                      <option value="Kar√°m #2">Kar√°m #2</option>
                      <option value="Kar√°m #3">Kar√°m #3</option>
                      <option value="H√°rem #1">H√°rem #1</option>
                      <option value="H√°rem #2">H√°rem #2</option>
                      <option value="B√∂lcsi #1">B√∂lcsi #1</option>
                      <option value="B√∂lcsi #2">B√∂lcsi #2</option>
                      <option value="√ìvi #1">√ìvi #1</option>
                      <option value="√ìvi #2">√ìvi #2</option>
                      <option value="√ìvi #3">√ìvi #3</option>
                      <option value="H√≠z√≥bika kar√°m #1">H√≠z√≥bika kar√°m #1</option>
                      <option value="H√≠z√≥bika kar√°m #2">H√≠z√≥bika kar√°m #2</option>
                      <option value="Teny√©szbika kar√°m">Teny√©szbika kar√°m</option>
                      <option value="Vemhes kar√°m #1">Vemhes kar√°m #1</option>
                      <option value="Ellet≈ë ist√°ll√≥ - Fogad√≥ #1">Ellet≈ë ist√°ll√≥ - Fogad√≥ #1</option>
                      <option value="Ellet≈ë ist√°ll√≥ - Fogad√≥ #2">Ellet≈ë ist√°ll√≥ - Fogad√≥ #2</option>
                    </optgroup>
                  </select>
                  {errors.jelenlegi_karam && <p className="text-red-500 text-sm mt-1">{errors.jelenlegi_karam}</p>}
                </div>

                {/* Beker√ºl√©s d√°tuma */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    üìÖ Beker√ºl√©s d√°tuma *
                  </label>
                  <input
                    type="date"
                    value={formData.bekerules_datum}
                    onChange={(e) => setFormData(prev => ({ ...prev, bekerules_datum: e.target.value }))}
                    className={`w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors ${
                      errors.bekerules_datum ? 'border-red-500' : ''
                    }`}
                  />
                  {errors.bekerules_datum && <p className="text-red-500 text-sm mt-1">{errors.bekerules_datum}</p>}
                  {formData.eredet === 'nalunk_szuletett' && (
                    <p className="text-sm text-green-600 mt-1">
                      üí° N√°lunk sz√ºletettn√©l alap√©rtelmezett: sz√ºlet√©si d√°tum
                    </p>
                  )}
                </div>

                {/* St√°tusz */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    üìä Eg√©szs√©g√ºgyi st√°tusz
                  </label>
                  <select
                    value={formData.statusz}
                    onChange={(e) => setFormData(prev => ({ ...prev, statusz: e.target.value }))}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors bg-white"
                  >
                    <option value="eg√©szs√©ges">‚úÖ Eg√©szs√©ges</option>
                    <option value="megfigyel√©s_alatt">üîç Megfigyel√©s alatt</option>
                    <option value="kezel√©s_alatt">‚öïÔ∏è Kezel√©s alatt</option>
                    <option value="karant√©n">üö´ Karant√©n</option>
                  </select>
                </div>

                {/* Kateg√≥ria ism√©tl√©s */}
                {previewCategory && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      üéØ Kateg√≥ria
                    </label>
                    <div className="px-4 py-3 bg-green-50 border border-green-200 rounded-lg text-green-800 font-medium">
                      {previewCategory}
                    </div>
                  </div>
                )}
              </div>

              {/* Kar√°m javaslatok */}
              {karamSuggestions.length > 0 && (
                <div className="bg-green-50 rounded-lg border border-green-200 p-4">
                  <div className="flex items-center mb-3">
                    <span className="text-xl mr-2">üéØ</span>
                    <h4 className="font-medium text-green-800">Aj√°nlott kar√°mok a "{previewCategory}" kateg√≥ri√°hoz:</h4>
                  </div>
                  <div className="flex flex-wrap gap-2">
                    {karamSuggestions.map(karam => (
                      <button
                        key={karam}
                        onClick={() => setFormData(prev => ({ ...prev, jelenlegi_karam: karam }))}
                        className={`px-3 py-2 text-sm rounded-lg border transition-colors ${
                          formData.jelenlegi_karam === karam
                            ? 'bg-green-600 text-white border-green-600'
                            : 'bg-white text-green-700 border-green-300 hover:bg-green-100'
                        }`}
                      >
                        {karam}
                      </button>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}

          {/* STEP 3: Ellen≈ërz√©s */}
          {step === 3 && (
            <div className="space-y-6">
              <div className="flex items-center mb-6">
                <span className="text-2xl mr-3">‚úÖ</span>
                <h2 className="text-xl font-semibold text-gray-900">Adatok ellen≈ërz√©se</h2>
              </div>

              <div className="bg-gray-50 rounded-lg p-6 space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <div className="flex items-center mb-3">
                      <span className="text-xl mr-2">üêÑ</span>
                      <h3 className="font-medium text-gray-800">Alapadatok</h3>
                    </div>
                    <div className="space-y-2 text-sm">
                      <div><span className="text-gray-600">ENAR:</span> <span className="font-medium">{formData.enar}</span></div>
                      <div><span className="text-gray-600">Sz√ºlet√©s:</span> <span className="font-medium">{formData.szuletesi_datum}</span></div>
                      <div><span className="text-gray-600">Ivar:</span> <span className="font-medium">{formData.ivar === 'h√≠mivar' ? '‚ôÇÔ∏è H√≠mivar' : '‚ôÄÔ∏è N≈ëivar'}</span></div>
                      <div><span className="text-gray-600">Kateg√≥ria:</span> <span className="font-medium text-green-600">{previewCategory}</span></div>
                      <div><span className="text-gray-600">Eredet:</span> <span className="font-medium">{formData.eredet === 'nalunk_szuletett' ? 'üè† N√°lunk sz√ºletett' : 'üõí V√°s√°rolt'}</span></div>
                    </div>
                  </div>

                  <div>
                    <div className="flex items-center mb-3">
                      <span className="text-xl mr-2">üè†</span>
                      <h3 className="font-medium text-gray-800">Elhelyez√©s</h3>
                    </div>
                    <div className="space-y-2 text-sm">
                      <div><span className="text-gray-600">Kar√°m:</span> <span className="font-medium">{formData.jelenlegi_karam}</span></div>
                      <div><span className="text-gray-600">Beker√ºl√©s:</span> <span className="font-medium">{formData.bekerules_datum}</span></div>
                      <div><span className="text-gray-600">St√°tusz:</span> <span className="font-medium">{formData.statusz}</span></div>
                    </div>
                  </div>
                </div>

                <div>
                  <div className="flex items-center mb-3">
                    <span className="text-xl mr-2">üêÆ‚ù§Ô∏èüêÇ</span>
                    <h3 className="font-medium text-gray-800">Sz√ºl≈ëk</h3>
                  </div>
                  <div className="space-y-2 text-sm">
                    {formData.eredet === 'nalunk_szuletett' ? (
                      <>
                        <div>
                          <span className="text-gray-600">üêÆ Anya:</span> 
                          <span className="font-medium ml-2">
                            {formData.anya_enar === 'ismeretlen' ? 'Ismeretlen' : formData.anya_enar || 'Nincs megadva'}
                          </span>
                        </div>
                        <div>
                          <span className="text-gray-600">üêÇ Apa:</span> 
                          <span className="font-medium ml-2">
                            {formData.apa_tipus === 'termeszetes' ? formData.apa_enar || 'Nincs megadva' :
                             formData.apa_tipus === 'mesterseges' ? `üß™ ${formData.kplsz}` : 'Ismeretlen'}
                          </span>
                        </div>
                      </>
                    ) : (
                      <>
                        <div>
                          <span className="text-gray-600">üêÆ Anya:</span> 
                          <span className="font-medium ml-2">{formData.anya_enar_manual || 'Nincs megadva'}</span>
                        </div>
                        <div>
                          <span className="text-gray-600">üêÇ Apa:</span> 
                          <span className="font-medium ml-2">{formData.apa_enar_manual || 'Nincs megadva'}</span>
                        </div>
                      </>
                    )}
                  </div>
                </div>
              </div>

              {errors.general && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                  <p className="text-red-700">{errors.general}</p>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Navigation Buttons - DESIGN SYSTEM */}
        <div className="bg-white rounded-lg shadow-sm border p-6">
          <div className="flex items-center justify-between">
            <button
              onClick={handlePrevStep}
              disabled={step === 1}
              className="bg-white hover:bg-gray-50 text-gray-700 font-medium px-6 py-3 rounded-lg border border-gray-300 transition-colors disabled:opacity-50 disabled:cursor-not-allowed inline-flex items-center"
            >
              <span className="mr-2">‚¨ÖÔ∏è</span>
              Vissza
            </button>

            <div className="text-sm text-gray-500">
              {step}. l√©p√©s / 3
            </div>

            {step < 3 ? (
              <button
                onClick={handleNextStep}
                className="bg-green-600 hover:bg-green-700 text-white font-medium px-6 py-3 rounded-lg transition-colors inline-flex items-center"
              >
                <span className="mr-2">‚û°Ô∏è</span>
                K√∂vetkez≈ë
              </button>
            ) : (
              <button
                onClick={handleSave}
                className="bg-green-600 hover:bg-green-700 text-white font-medium px-6 py-3 rounded-lg transition-colors inline-flex items-center"
              >
                <span className="mr-2">üíæ</span>
                √Ållat ment√©se
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}