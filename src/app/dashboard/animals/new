'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';

export default function NewAnimalPage() {
  const router = useRouter();
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    enar: '',
    szuletesi_datum: '',
    ivar: '',
    anya_enar: '',
    apa_enar: '',
    kplsz: '',
    bekerules_datum: new Date().toISOString().split('T')[0],
    jelenlegi_karam: '',
    szuletesi_suly: '',
  });

  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  const validateStep1 = () => {
    const newErrors: { [key: string]: string } = {};
    
    if (!formData.enar) {
      newErrors.enar = 'ENAR k√∂telez≈ë';
    } else if (!/^HU\d{10}$/.test(formData.enar)) {
      newErrors.enar = 'ENAR form√°tuma: HU + 10 sz√°mjegy';
    }
    
    if (!formData.szuletesi_datum) {
      newErrors.szuletesi_datum = 'Sz√ºlet√©si d√°tum k√∂telez≈ë';
    }
    
    if (!formData.ivar) {
      newErrors.ivar = 'Ivar kiv√°laszt√°sa k√∂telez≈ë';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const validateStep2 = () => {
    const newErrors: { [key: string]: string } = {};
    
    if (!formData.jelenlegi_karam) {
      newErrors.jelenlegi_karam = 'Kar√°m kiv√°laszt√°sa k√∂telez≈ë';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleNext = () => {
    if (currentStep === 1 && validateStep1()) {
      setCurrentStep(2);
    } else if (currentStep === 2 && validateStep2()) {
      setCurrentStep(3);
    }
  };

  const handleSubmit = () => {
    // Mock ment√©s - k√©s≈ëbb API h√≠v√°s lesz
    console.log('√Ållat ment√©se:', formData);
    
    // Szimul√°ljunk egy sikeres ment√©st
    alert(`‚úÖ √Ållat sikeresen hozz√°adva!\nENAR: ${formData.enar}`);
    
    // Navig√°ljunk az √°llat r√©szleteihez
    router.push(`/dashboard/animals/${formData.enar}`);
  };

  const calculateAge = (birthDate: string) => {
    if (!birthDate) return '';
    const birth = new Date(birthDate);
    const now = new Date();
    const diffInMonths = (now.getFullYear() - birth.getFullYear()) * 12 + (now.getMonth() - birth.getMonth());
    
    if (diffInMonths < 12) {
      return `${diffInMonths} h√≥`;
    } else {
      const years = Math.floor(diffInMonths / 12);
      const months = diffInMonths % 12;
      return months > 0 ? `${years} √©v ${months} h√≥` : `${years} √©v`;
    }
  };

  const getAutoCategory = (birthDate: string, ivar: string) => {
    if (!birthDate || !ivar) return '';
    
    const birth = new Date(birthDate);
    const now = new Date();
    const diffInMonths = (now.getFullYear() - birth.getFullYear()) * 12 + (now.getMonth() - birth.getMonth());
    
    if (diffInMonths < 6) {
      return 'n√∂var√∫_borj√∫';
    } else if (diffInMonths < 12) {
      return ivar === 'n≈ëivar' ? 'n√∂var√∫_borj√∫' : 'n√∂var√∫_borj√∫';
    } else if (diffInMonths < 24) {
      return ivar === 'n≈ëivar' ? 'sz≈±z_√ºsz≈ë' : 'h√≠z√≥bika';
    } else {
      return ivar === 'n≈ëivar' ? 'sz≈±z_√ºsz≈ë' : 'teny√©szbika';
    }
  };

  const getCategoryDisplay = (category: string) => {
    const categoryMap: { [key: string]: string } = {
      'teny√©szbika': 'Teny√©szbika',
      'h√≠z√≥bika': 'H√≠z√≥bika', 
      'teh√©n': 'Teh√©n',
      'sz≈±z_√ºsz≈ë': 'Sz≈±z √ºsz≈ë',
      'vemhes_√ºsz≈ë': 'Vemhes √ºsz≈ë',
      'vemhes√ºl√©s_alatt': 'Vemhes√ºl√©s alatt',
      'n√∂var√∫_borj√∫': 'N√∂var√∫ borj√∫'
    };
    return categoryMap[category] || category;
  };

  // Mock kar√°m opci√≥k
  const karamOptions = [
    { id: 'elleto_fogado_1', name: 'Ellet≈ë ist√°ll√≥ - Fogad√≥ #1' },
    { id: 'elleto_fogado_2', name: 'Ellet≈ë ist√°ll√≥ - Fogad√≥ #2' },
    { id: 'elleto_belso_1', name: 'Ellet≈ë ist√°ll√≥ - Bels≈ë kar√°m #1' },
    { id: 'elleto_belso_2', name: 'Ellet≈ë ist√°ll√≥ - Bels≈ë kar√°m #2' },
    { id: 'bolcsi_1', name: 'B√∂lcsi #1' },
    { id: 'bolcsi_2', name: 'B√∂lcsi #2' },
    { id: 'ovi_1', name: '√ìvi #1' },
    { id: 'ovi_2', name: '√ìvi #2' },
    { id: 'karam_1', name: 'Kar√°m #1' },
    { id: 'karam_2', name: 'Kar√°m #2' },
    { id: 'karam_3', name: 'Kar√°m #3' },
    { id: 'harem_1', name: 'H√°rem #1' },
    { id: 'harem_2', name: 'H√°rem #2' },
    { id: 'harem_3', name: 'H√°rem #3' },
  ];

  return (
    <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center">
          <button
            onClick={() => router.back()}
            className="mr-4 text-gray-400 hover:text-gray-600"
          >
            ‚Üê Vissza
          </button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">√öj √°llat hozz√°ad√°sa</h1>
            <p className="mt-1 text-sm text-gray-500">
              L√©p√©sr≈ël l√©p√©sre adatlap kit√∂lt√©s
            </p>
          </div>
        </div>
      </div>

      {/* Progress Steps */}
      <div className="mb-8">
        <div className="flex items-center">
          {[1, 2, 3].map((step) => (
            <div key={step} className="flex items-center">
              <div className={`flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium ${
                currentStep >= step 
                  ? 'bg-green-600 text-white' 
                  : 'bg-gray-300 text-gray-600'
              }`}>
                {step}
              </div>
              <div className={`text-sm ml-2 ${
                currentStep >= step ? 'text-green-600 font-medium' : 'text-gray-500'
              }`}>
                {step === 1 && 'Alapadatok'}
                {step === 2 && 'Elhelyez√©s'}
                {step === 3 && 'Ellen≈ërz√©s'}
              </div>
              {step < 3 && (
                <div className={`w-16 h-1 mx-4 ${
                  currentStep > step ? 'bg-green-600' : 'bg-gray-300'
                }`} />
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Form Content */}
      <div className="bg-white shadow rounded-lg p-6">
        {currentStep === 1 && (
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-6">Alapadatok</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ENAR sz√°m *
                </label>
                <input
                  type="text"
                  placeholder="HU1234567890"
                  value={formData.enar}
                  onChange={(e) => setFormData({ ...formData, enar: e.target.value.toUpperCase() })}
                  className={`w-full px-3 py-2 border rounded-md text-sm ${
                    errors.enar ? 'border-red-300' : 'border-gray-300'
                  } focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500`}
                />
                {errors.enar && <p className="mt-1 text-sm text-red-600">{errors.enar}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Sz√ºlet√©si d√°tum *
                </label>
                <input
                  type="date"
                  value={formData.szuletesi_datum}
                  onChange={(e) => setFormData({ ...formData, szuletesi_datum: e.target.value })}
                  className={`w-full px-3 py-2 border rounded-md text-sm ${
                    errors.szuletesi_datum ? 'border-red-300' : 'border-gray-300'
                  } focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500`}
                />
                {errors.szuletesi_datum && <p className="mt-1 text-sm text-red-600">{errors.szuletesi_datum}</p>}
                {formData.szuletesi_datum && (
                  <p className="mt-1 text-sm text-gray-500">
                    √âletkor: {calculateAge(formData.szuletesi_datum)}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ivar *
                </label>
                <select
                  value={formData.ivar}
                  onChange={(e) => setFormData({ ...formData, ivar: e.target.value })}
                  className={`w-full px-3 py-2 border rounded-md text-sm ${
                    errors.ivar ? 'border-red-300' : 'border-gray-300'
                  } focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500`}
                >
                  <option value="">V√°lassz kar√°mot</option>
                  {karamOptions.map(karam => (
                    <option key={karam.id} value={karam.name}>{karam.name}</option>
                  ))}
                </select>
                {errors.jelenlegi_karam && <p className="mt-1 text-sm text-red-600">{errors.jelenlegi_karam}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Beker√ºl√©s d√°tuma
                </label>
                <input
                  type="date"
                  value={formData.bekerules_datum}
                  onChange={(e) => setFormData({ ...formData, bekerules_datum: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500"
                />
              </div>
            </div>

            <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-md">
              <h4 className="text-sm font-medium text-blue-900 mb-2">üìã Kar√°m kiv√°laszt√°si tippek</h4>
              <ul className="text-sm text-blue-800 space-y-1">
                <li>‚Ä¢ <strong>√öjsz√ºl√∂tt borjak:</strong> Ellet≈ë ist√°ll√≥ - Fogad√≥ bokszok</li>
                <li>‚Ä¢ <strong>0-6 h√≥:</strong> Ellet≈ë ist√°ll√≥ - Bels≈ë kar√°mok any√°val</li>
                <li>‚Ä¢ <strong>6-12 h√≥:</strong> B√∂lcsi kar√°mok</li>
                <li>‚Ä¢ <strong>12-24 h√≥:</strong> √ìvi kar√°mok</li>
                <li>‚Ä¢ <strong>24+ h√≥ √ºsz≈ëk:</strong> H√°rem kar√°mok</li>
                <li>‚Ä¢ <strong>H√≠z√≥bik√°k:</strong> K√ºl√∂n kar√°mok</li>
              </ul>
            </div>
          </div>
        )}

        {currentStep === 3 && (
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-6">Adatok ellen≈ërz√©se</h3>
            
            <div className="bg-gray-50 rounded-lg p-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <dt className="text-sm font-medium text-gray-500">ENAR:</dt>
                  <dd className="text-sm text-gray-900 font-mono">{formData.enar}</dd>
                </div>
                <div>
                  <dt className="text-sm font-medium text-gray-500">Sz√ºlet√©si d√°tum:</dt>
                  <dd className="text-sm text-gray-900">
                    {new Date(formData.szuletesi_datum).toLocaleDateString('hu-HU')} 
                    ({calculateAge(formData.szuletesi_datum)})
                  </dd>
                </div>
                <div>
                  <dt className="text-sm font-medium text-gray-500">Ivar:</dt>
                  <dd className="text-sm text-gray-900">
                    {formData.ivar === 'h√≠mivar' ? '‚ôÇÔ∏è H√≠mivar' : '‚ôÄÔ∏è N≈ëivar'}
                  </dd>
                </div>
                <div>
                  <dt className="text-sm font-medium text-gray-500">Kateg√≥ria:</dt>
                  <dd className="text-sm text-gray-900">
                    {getCategoryDisplay(getAutoCategory(formData.szuletesi_datum, formData.ivar))}
                  </dd>
                </div>
                <div>
                  <dt className="text-sm font-medium text-gray-500">Jelenlegi kar√°m:</dt>
                  <dd className="text-sm text-gray-900">üìç {formData.jelenlegi_karam}</dd>
                </div>
                <div>
                  <dt className="text-sm font-medium text-gray-500">Beker√ºl√©s:</dt>
                  <dd className="text-sm text-gray-900">
                    {new Date(formData.bekerules_datum).toLocaleDateString('hu-HU')}
                  </dd>
                </div>
                {formData.anya_enar && (
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Anya ENAR:</dt>
                    <dd className="text-sm text-gray-900 font-mono">ü§± {formData.anya_enar}</dd>
                  </div>
                )}
                {formData.apa_enar && (
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Apa ENAR:</dt>
                    <dd className="text-sm text-gray-900 font-mono">üë® {formData.apa_enar}</dd>
                  </div>
                )}
                {formData.kplsz && (
                  <div>
                    <dt className="text-sm font-medium text-gray-500">KPLSZ:</dt>
                    <dd className="text-sm text-gray-900 font-mono">{formData.kplsz}</dd>
                  </div>
                )}
                {formData.szuletesi_suly && (
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Sz√ºlet√©si s√∫ly:</dt>
                    <dd className="text-sm text-gray-900">{formData.szuletesi_suly} kg</dd>
                  </div>
                )}
              </div>
            </div>

            <div className="mt-6 p-4 bg-green-50 border border-green-200 rounded-md">
              <h4 className="text-sm font-medium text-green-900 mb-2">‚úÖ Automatikus feladatok</h4>
              <p className="text-sm text-green-800">
                A ment√©s ut√°n automatikusan l√©trej√∂nnek a k√∂vetkez≈ë feladatok:
              </p>
              <ul className="text-sm text-green-800 mt-2 space-y-1">
                <li>‚Ä¢ <strong>15 napos korban:</strong> F√ºlsz√°m + BoviPast + szarvtalan√≠t√°s</li>
                <li>‚Ä¢ <strong>6 h√≥napos korban:</strong> Lev√°laszt√°s anyj√°t√≥l</li>
                <li>‚Ä¢ <strong>12 h√≥napos korban:</strong> Kateg√≥ria √°t√©rt√©kel√©s</li>
                {formData.ivar === 'n≈ëivar' && (
                  <li>‚Ä¢ <strong>24 h√≥napos korban:</strong> H√°rembe ker√ºl√©s el≈ëk√©sz√≠t√©s</li>
                )}
              </ul>
            </div>
          </div>
        )}

        {/* Action Buttons */}
        <div className="mt-8 flex justify-between">
          <button
            onClick={() => {
              if (currentStep > 1) {
                setCurrentStep(currentStep - 1);
              } else {
                router.back();
              }
            }}
            className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
          >
            {currentStep === 1 ? 'M√©gse' : 'Vissza'}
          </button>

          {currentStep < 3 ? (
            <button
              onClick={handleNext}
              className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700"
            >
              K√∂vetkez≈ë ‚Üí
            </button>
          ) : (
            <button
              onClick={handleSubmit}
              className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700"
            >
              üêÑ √Ållat ment√©se
            </button>
          )}
        </div>
      </div>
    </div>
  );
} ivart</option>
                  <option value="h√≠mivar">‚ôÇÔ∏è H√≠mivar</option>
                  <option value="n≈ëivar">‚ôÄÔ∏è N≈ëivar</option>
                </select>
                {errors.ivar && <p className="mt-1 text-sm text-red-600">{errors.ivar}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Automatikus kateg√≥ria
                </label>
                <div className="px-3 py-2 bg-gray-50 border border-gray-300 rounded-md text-sm text-gray-600">
                  {formData.szuletesi_datum && formData.ivar 
                    ? getCategoryDisplay(getAutoCategory(formData.szuletesi_datum, formData.ivar))
                    : 'Sz√ºlet√©si d√°tum √©s ivar alapj√°n kalkul√°lva'
                  }
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Anya ENAR
                </label>
                <input
                  type="text"
                  placeholder="HU1234567890"
                  value={formData.anya_enar}
                  onChange={(e) => setFormData({ ...formData, anya_enar: e.target.value.toUpperCase() })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Apa ENAR
                </label>
                <input
                  type="text"
                  placeholder="HU1234567890"
                  value={formData.apa_enar}
                  onChange={(e) => setFormData({ ...formData, apa_enar: e.target.value.toUpperCase() })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  KPLSZ sz√°m
                </label>
                <input
                  type="text"
                  placeholder="KPLSZ123456"
                  value={formData.kplsz}
                  onChange={(e) => setFormData({ ...formData, kplsz: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Sz√ºlet√©si s√∫ly (kg)
                </label>
                <input
                  type="number"
                  placeholder="40"
                  value={formData.szuletesi_suly}
                  onChange={(e) => setFormData({ ...formData, szuletesi_suly: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500"
                />
              </div>
            </div>
          </div>
        )}

        {currentStep === 2 && (
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-6">Elhelyez√©s</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Jelenlegi kar√°m *
                </label>
                <select
                  value={formData.jelenlegi_karam}
                  onChange={(e) => setFormData({ ...formData, jelenlegi_karam: e.target.value })}
                  className={`w-full px-3 py-2 border rounded-md text-sm ${
                    errors.jelenlegi_karam ? 'border-red-300' : 'border-gray-300'
                  } focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500`}
                >
                  <option value="">V√°lassz
