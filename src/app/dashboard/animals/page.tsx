// src/app/dashboard/animals/page.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '@/lib/supabase';
import Link from 'next/link';
import {
  Search,
  Filter,
  Plus,
  Download,
  Upload,
  Users,
  Calendar,
  MapPin,
  AlertCircle
} from 'lucide-react';

interface Animal {
  id: number;
  enar: string;
  szuletesi_datum: string;
  ivar: string;
  kategoria: string;
  jelenlegi_karam?: string;
  statusz: string;
  anya_enar?: string;
  apa_enar?: string;
  kplsz?: string;
  bekerules_datum: string;
  created_at: string;
  birth_location?: 'n√°lunk' | 'v√°s√°rolt' | 'ismeretlen';
}

export default function AnimalsPage() {
  const router = useRouter();
  const [animals, setAnimals] = useState<Animal[]>([]);
  const [filteredAnimals, setFilteredAnimals] = useState<Animal[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(15); // 15 √°llat/oldal

  const getCategoryEmoji = (kategoria: string): string => {
    const emojiMap: { [key: string]: string } = {
      'n≈ëivar√∫_borj√∫': 'üêÆ',
      'sz≈±z_√ºsz≈ë': 'üêÑ',
      'h√°remben_l√©v≈ë_√ºsz≈ë': 'üêÑüíï',
      'vemhes_√ºsz≈ë': 'üêÑüíñ',
      '√ºres_√ºsz≈ë': 'üêÑüö´',
      'cs√≠ra': 'üêÑ‚ö†Ô∏è',
      'teh√©n': 'üêÑüçº',
      'h√≠mivar√∫_borj√∫': 'üêÇ',
      'h√≠z√≥bika': 'üêÇ',
      'teny√©szbika': 'üêÇ'
    };
    return emojiMap[kategoria] || '';
  };

  // Sz≈±r≈ë √©s keres√©s state-ek
  const [searchTerm, setSearchTerm] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('');
  const [penFilter, setPenFilter] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [selectedBirthLocation, setSelectedBirthLocation] = useState('');

  // Pagination logic
  const totalPages = Math.ceil(filteredAnimals.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentAnimals = filteredAnimals.slice(startIndex, endIndex);

  // Adatok bet√∂lt√©se Supabase-b≈ël
  useEffect(() => {
    const fetchAnimals = async () => {
      try {
        setLoading(true);
        console.log('√Ållatok bet√∂lt√©se Supabase-b≈ël...');

        const { data, error } = await supabase
          .from('animals')
          .select('*')
          .order('enar', { ascending: true });

        if (error) {
          console.error('Supabase hiba:', error);
          setError('Nem siker√ºlt bet√∂lteni az √°llatok list√°j√°t');
          return;
        }

        console.log(`${data?.length || 0} √°llat bet√∂ltve:`, data);
        setAnimals(data || []);
        setFilteredAnimals(data || []);

      } catch (err) {
        console.error('Fetch hiba:', err);
        setError('Hiba t√∂rt√©nt az adatok bet√∂lt√©se sor√°n');
      } finally {
        setLoading(false);
      }
    };

    fetchAnimals();
  }, []);

  // Keres√©s √©s sz≈±r√©s
  useEffect(() => {
    let filtered = animals;

    // Keres√©s (ENAR, r√∂vid azonos√≠t√≥)
    if (searchTerm) {
      const term = searchTerm.toLowerCase();
      filtered = filtered.filter(animal =>
        animal.enar.toLowerCase().includes(term) ||
        getShortId(animal.enar).includes(term)
      );
    }

    // Kateg√≥ria sz≈±r√©s
    if (categoryFilter) {
      filtered = filtered.filter(animal => animal.kategoria === categoryFilter);
    }

    // Kar√°m sz≈±r√©s
    if (penFilter) {
      filtered = filtered.filter(animal => animal.jelenlegi_karam === penFilter);
    }

    // St√°tusz sz≈±r√©s
    if (statusFilter) {
      filtered = filtered.filter(animal => animal.statusz === statusFilter);
    }

    // Sz√°rmaz√°s sz≈±r√©s
    if (selectedBirthLocation) {
      console.log('üîç DEBUG - Filtering by:', selectedBirthLocation);
      filtered = filtered.filter((animal, index) => {
        const birthLocation = (animal as any).birth_location;
        if (index < 3) { // Els≈ë 3 √°llat debug
          console.log(`Animal ${index}:`, animal.enar, 'birth_location:', birthLocation);
        }
        return birthLocation === selectedBirthLocation;
      });
      console.log('üîç DEBUG - Filtered results:', filtered.length);
    }

    setFilteredAnimals(filtered);
  }, [animals, searchTerm, categoryFilter, penFilter, statusFilter, selectedBirthLocation]); //

  // R√∂vid ENAR azonos√≠t√≥ (utols√≥ 5 sz√°m)
  const getShortId = (enar: string): string => {
    const numbers = enar.replace(/\D/g, '');
    return numbers.slice(-5);
  };

  // √âletkor kalkul√°ci√≥
  const calculateAge = (birthDate: string): string => {
    const birth = new Date(birthDate);
    const now = new Date();
    const diffMs = now.getTime() - birth.getTime();
    const years = Math.floor(diffMs / (1000 * 60 * 60 * 24 * 365.25));
    const months = Math.floor((diffMs % (1000 * 60 * 60 * 24 * 365.25)) / (1000 * 60 * 60 * 24 * 30.44));

    if (years > 0) {
      return `${years} √©v ${months > 0 ? months + ' h√≥' : ''}`;
    }
    return `${months} h√≥nap`;
  };

  // Kateg√≥ria sz√≠nek
  const getCategoryColor = (category: string): string => {
    const colors = {
      'teh√©n': 'bg-green-100 text-green-800',
      'sz≈±z_√ºsz≈ë': 'bg-blue-100 text-blue-800',
      'vemhes_√ºsz≈ë': 'bg-purple-100 text-purple-800',
      'n≈ëivar√∫_borj√∫': 'bg-pink-100 text-pink-800',
      'n√∂var√∫_borj√∫': 'bg-pink-100 text-pink-800',
      'h√≠mivar√∫_borj√∫': 'bg-orange-100 text-orange-800',
      'h√≠z√≥bika': 'bg-red-100 text-red-800',
      'teny√©szbika': 'bg-gray-100 text-gray-800'
    };
    return colors[category as keyof typeof colors] || 'bg-gray-100 text-gray-800';
  };

  // Egyedi √©rt√©kek lek√©r√©se sz≈±r√©shez
  const uniqueCategories = [...new Set(animals.map(a => a.kategoria))].filter(Boolean);
  console.log('üêÇ Unique categories:', uniqueCategories); // ‚Üê √öJ DEBUG SOR!
  const uniquePens = [...new Set(animals.map(a => a.jelenlegi_karam))].filter(Boolean);
  const uniqueStatuses = [...new Set(animals.map(a => a.statusz))].filter(Boolean);

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"></div>
          <p className="text-gray-600">√Ållatok bet√∂lt√©se...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <AlertCircle className="h-16 w-16 text-red-500 mx-auto mb-4" />
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Hiba t√∂rt√©nt</h1>
          <p className="text-gray-600 mb-4">{error}</p>
          <button
            onClick={() => window.location.reload()}
            className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
          >
            √öjrat√∂lt√©s
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div>
              <h1 className="text-2xl font-bold text-gray-900 flex items-center">
                <Users className="h-6 w-6 mr-2 text-green-600" />
                √Ållom√°ny
              </h1>
              <p className="text-sm text-gray-500">
                √ñsszesen {animals.length} √°llat ({filteredAnimals.length} megjelen√≠tve)
              </p>
            </div>

            <div className="flex items-center space-x-3">
              <Link
                href="/dashboard/import-export"
                className="flex items-center px-3 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <Upload className="h-4 w-4 mr-1" />
                Import√°l√°s
              </Link>

              <Link
                href="/dashboard/animals/new"
                className="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                <Plus className="h-4 w-4 mr-2" />
                √öj √°llat
              </Link>
            </div>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            {/* Keres√©s */}
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <input
                type="text"
                placeholder="ENAR, anya vagy apa ENAR keres√©se..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-green-500 focus:border-transparent"
              />
            </div>

            {/* Kateg√≥ria sz≈±r√©s */}
            <select
              value={categoryFilter}
              onChange={(e) => setCategoryFilter(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-green-500 focus:border-transparent"
            >
              <option value="">√ñsszes kateg√≥ria</option>
              {uniqueCategories.map(category => (
                <option key={category} value={category}>{category}</option>
              ))}
            </select>

            {/* Kar√°m sz≈±r√©s */}
            <select
              value={penFilter}
              onChange={(e) => setPenFilter(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-green-500 focus:border-transparent"
            >
              <option value="">√ñsszes kar√°m</option>
              {uniquePens.map(pen => (
                <option key={pen} value={pen}>{pen}</option>
              ))}
            </select>

            {/* St√°tusz sz≈±r√©s */}
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-green-500 focus:border-transparent"
            >
              <option value="">√ñsszes st√°tusz</option>
              {uniqueStatuses.map(status => (
                <option key={status} value={status}>{status}</option>
              ))}
            </select>

            {/* Sz√°rmaz√°s sz≈±r√©s */}
            <select
              value={selectedBirthLocation}
              onChange={(e) => {
                console.log('üîç DROPDOWN CHANGE - new value:', e.target.value);
                const newValue = e.target.value;
                setSelectedBirthLocation(newValue);
                console.log('üîç STATE SET TO:', newValue);
              }}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-green-500 focus:border-transparent"
            >
              <option value="">√ñsszes sz√°rmaz√°s</option>
              <option value="n√°lunk">üè† N√°lunk sz√ºletett</option>
              <option value="v√°s√°rolt">üõí V√°s√°rolt</option>
              <option value="ismeretlen">‚ùì Ismeretlen</option>
            </select>
          </div>
        </div>
      </div>

      {/* Animals List */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {filteredAnimals.length === 0 ? (
          <div className="text-center py-12">
            <Users className="h-16 w-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              {animals.length === 0 ? 'Nincsenek √°llatok' : 'Nincs tal√°lat'}
            </h3>
            <p className="text-gray-500 mb-6">
              {animals.length === 0
                ? 'Kezdj egy Excel import√°l√°ssal!'
                : 'Pr√≥b√°ld meg m√≥dos√≠tani a keres√©si felt√©teleket.'
              }
            </p>
            {animals.length === 0 && (
              <Link
                href="/dashboard/import-export"
                className="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                <Upload className="h-4 w-4 mr-2" />
                Excel Import√°l√°s
              </Link>
            )}
          </div>
        ) : (
          <div className="bg-white rounded-lg shadow-sm overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      <div className="flex items-center space-x-1">
                        <span>ENAR</span>
                      </div>
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      <div className="flex items-center space-x-1">
                        <Calendar className="h-4 w-4" />
                        <span>Sz√ºlet√©s / √âletkor</span>
                      </div>
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Ivar
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      <div className="flex items-center space-x-1">
                        <span>Kateg√≥ria</span>
                      </div>
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      <div className="flex items-center space-x-1">
                        <span>Sz√°rmaz√°s</span>
                      </div>
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      <div className="flex items-center space-x-1">
                        <MapPin className="h-4 w-4" />
                        <span>Jelenlegi Kar√°m</span>
                      </div>
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      St√°tusz
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Sz√ºl≈ëk
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      M≈±veletek
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {currentAnimals.map((animal) => (
                    <tr key={animal.id} className="hover:bg-gray-50 transition-colors">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center space-x-2">
                          <Link
                            href={`/dashboard/animals/${encodeURIComponent(animal.enar)}`}
                            className="text-sm font-medium text-green-600 hover:text-green-800 transition-colors"
                          >
                            {animal.enar}
                          </Link>
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            #{getShortId(animal.enar)}
                          </span>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        <div>
                          <div>{animal.szuletesi_datum}</div>
                          <div className="text-gray-500 text-xs">
                            {calculateAge(animal.szuletesi_datum)}
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-center">
                        <span className="text-xl">
                          {animal.ivar === 'n≈ë' ? '‚ôÄÔ∏è' : '‚ôÇÔ∏è'}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getCategoryColor(animal.kategoria)}`}>
                          <span className="mr-1">{getCategoryEmoji(animal.kategoria)}</span>
                          {animal.kategoria}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                        <div className="flex items-center space-x-1">
                          <span className="text-base">
                            {animal.birth_location === 'n√°lunk' ? 'üè†' : 'üõí'}
                          </span>
                          <span>
                            {animal.birth_location === 'n√°lunk' ? 'N√°lunk' : 'V√°s√°rolt'}
                          </span>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {animal.jelenlegi_karam || '-'}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${animal.statusz === 'akt√≠v' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                          }`}>
                          {animal.statusz}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <div className="space-y-1">
                          {animal.anya_enar && (
                            <div className="flex items-center text-xs">
                              <span className="text-pink-600 mr-1">‚ôÄ</span>
                              <Link
                                href={`/dashboard/animals/${encodeURIComponent(animal.anya_enar)}`}
                                className="text-green-600 hover:text-green-800 transition-colors"
                              >
                                #{getShortId(animal.anya_enar)}
                              </Link>
                            </div>
                          )}
                          {animal.apa_enar && (
                            <div className="flex items-center text-xs">
                              <span className="text-blue-600 mr-1">‚ôÇ</span>
                              <Link
                                href={`/dashboard/animals/${encodeURIComponent(animal.apa_enar)}`}
                                className="text-green-600 hover:text-green-800 transition-colors"
                              >
                                #{getShortId(animal.apa_enar)}
                              </Link>
                            </div>
                          )}
                          {animal.kplsz && (
                            <div className="text-xs text-gray-400">
                              KPLSZ: {animal.kplsz}
                            </div>
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <Link
                          href={`/dashboard/animals/${encodeURIComponent(animal.enar)}`}
                          className="text-green-600 hover:text-green-900 transition-colors"
                        >
                          üîç Megtekint√©s
                        </Link>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            
            {/* Pagination Controls */}
            {!loading && filteredAnimals.length > 0 && (
              <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
                <div className="flex-1 flex justify-between sm:hidden">
                  <button
                    onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                    disabled={currentPage === 1}
                    className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    El≈ëz≈ë
                  </button>
                  <button
                    onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                    disabled={currentPage === totalPages}
                    className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    K√∂vetkez≈ë
                  </button>
                </div>
                <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                  <div>
                    <p className="text-sm text-gray-700">
                      <span className="font-medium">{startIndex + 1}</span>
                      {' - '}
                      <span className="font-medium">{Math.min(endIndex, filteredAnimals.length)}</span>
                      {' / '}
                      <span className="font-medium">{filteredAnimals.length}</span>
                      {' √°llat megjelen√≠tve'}
                    </p>
                  </div>
                  <div>
                    <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                      <button
                        onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                        disabled={currentPage === 1}
                        className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        ¬´
                      </button>
                      {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                        const pageNum = i + 1;
                        return (
                          <button
                            key={pageNum}
                            onClick={() => setCurrentPage(pageNum)}
                            className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
                              currentPage === pageNum
                                ? 'z-10 bg-green-50 border-green-500 text-green-600'
                                : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                            }`}
                          >
                            {pageNum}
                          </button>
                        );
                      })}
                      <button
                        onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                        disabled={currentPage === totalPages}
                        className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        ¬ª
                      </button>
                    </nav>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}
          