'use client';

import React, { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabase';
import BirthForm from '@/components/birth-form';
import type { Animal } from '@/types/animal-types';
import type { Birth } from '@/types/birth-types';

export default function EllesTab({ animal }: { animal: Animal }) {
  const [showBirthForm, setShowBirthForm] = useState(false);
  const [birthHistory, setBirthHistory] = useState<any[]>([]);
  const [loadingBirths, setLoadingBirths] = useState(true);
  const [selectedBirth, setSelectedBirth] = useState<any>(null);
  const [editingBirth, setEditingBirth] = useState<any>(null);
  const [deletingBirth, setDeletingBirth] = useState<any>(null);
  const [assigningEarTag, setAssigningEarTag] = useState<any>(null);
  const [possibleAnimals, setPossibleAnimals] = useState<any[]>([]);
  const [selectedAnimalEnar, setSelectedAnimalEnar] = useState<string>('');
  // üÜï VV adatok state v√°ltoz√≥i az ell√©s form sz√°m√°ra
  const [vvResults, setVvResults] = useState<any[]>([]);
  const [loadingVV, setLoadingVV] = useState(true);
  const [selectedVVForBirth, setSelectedVVForBirth] = useState<any>(null);

  // üÜï K√âS≈êBB ELPUSZTULT √ÅLLAPOT V√ÅLTOZ√ìK
  const [dyingCalf, setDyingCalf] = useState<any>(null);
  const [deathDate, setDeathDate] = useState('');
  const [deathReason, setDeathReason] = useState('');
  const [deathNotes, setDeathNotes] = useState('');

  // üî• EREDETI DATA LOADING LOGIKA
  const refreshBirthHistory = async () => {
    if (!animal?.enar) return;

    const { data } = await supabase
      .from('births')
      .select(`
        *,
        calves (*)
      `)
      .eq('mother_enar', animal?.enar)
      .order('birth_date', { ascending: false });

    if (data && data.length > 0) {
      // üî• MANU√ÅLIS CALVES HOZZ√ÅAD√ÅS - EREDETI LOGIKA!
      for (let i = 0; i < data.length; i++) {
        const { data: calvesForBirth } = await supabase
          .from('calves')
          .select('*, planned_enar')  // ‚Üê PLANNED_ENAR IS!
          .eq('birth_id', data[i].id);

        data[i].calves = calvesForBirth || [];
        console.log(`‚úÖ Birth ${i}: ${calvesForBirth?.length || 0} borj√∫ hozz√°adva`);
      }
    }

    setBirthHistory(data || []);
  };

  const refreshData = async () => {
    if (!animal?.enar) return;
    setLoadingBirths(true);
    try {
      // VV eredm√©nyek p√°rhuzamos bet√∂lt√©se
      const vvResult = await supabase
        .from('vv_results')
        .select('*')
        .eq('animal_enar', animal.enar)
        .eq('pregnancy_status', 'vemhes')
        .order('vv_date', { ascending: false });

      if (vvResult.error) throw vvResult.error;
      setVvResults(vvResult.data || []);
      if (vvResult.data && vvResult.data.length > 0) {
        setSelectedVVForBirth(vvResult.data[0]);
      }

      // Birth history bet√∂lt√©se komplex logik√°val
      await refreshBirthHistory();

    } catch (err) {
      console.error('‚ùå Hiba az ell√©si adatok bet√∂lt√©sekor:', err);
    } finally {
      setLoadingBirths(false);
    }
  };

  useEffect(() => {
    refreshData();
  }, [animal.enar]);

  // üî• EREDETI F√úLSZ√ÅM KERES√âSI LOGIKA - PASTE-2.TXT-B≈êL
  useEffect(() => {
    const fetchPossibleAnimals = async () => {
      if (!assigningEarTag || !animal?.enar) {
        console.log('üö´ Nincs assigningEarTag vagy animal.enar');
        return;
      }

      console.log('üîç FEJLETT √ÅLLAT KERES√âS DEBUG:');
      console.log('üêÑ Anya ENAR:', animal.enar);
      console.log('üêÆ Borj√∫ temp_id:', assigningEarTag.temp_id);
      console.log('üìö T√∂rt√©neti ell√©s?', selectedBirth?.historical);

      if (!selectedBirth?.historical) {
        console.log('üÜï √öj ell√©s - nincs keres√©s sz√ºks√©ges');
        setPossibleAnimals([]);
        return;
      }

      try {
        const motherEnar = animal.enar;
        const cleanEnar = motherEnar.replace(/\s/g, ''); // Sz√≥k√∂z√∂k n√©lk√ºl

        // üéØ K√ñZVETLEN KERES√âS minden form√°tummal
        const searchFormats = [motherEnar, cleanEnar];

        for (const format of searchFormats) {
          console.log(`üîç Pr√≥b√°lkoz√°s form√°tummal: "${format}"`);

          // El≈ësz√∂r birth_id = null sz≈±r√©ssel
          let { data: directResult, error: directError } = await supabase
            .from('animals')
            .select('enar, name, kategoria, anya_enar, birth_id, statusz, szuletesi_datum')
            .eq('anya_enar', format)
            .eq('statusz', 'akt√≠v')
            .is('birth_id', null);

          console.log(`‚úÖ "${format}" eredm√©ny (birth_id=null):`, directResult);

          if (directResult && directResult.length > 0) {
            console.log(`üéâ TAL√ÅLAT "${format}" form√°tummal!`, directResult);
            setPossibleAnimals(directResult);
            return;
          }

          // Ha nincs tal√°lat birth_id=null sz≈±r√©ssel, pr√≥b√°ljuk an√©lk√ºl
          const { data: allResult } = await supabase
            .from('animals')
            .select('enar, name, kategoria, anya_enar, birth_id, statusz, szuletesi_datum')
            .eq('anya_enar', format)
            .eq('statusz', 'akt√≠v');

          // üéØ T√ñRT√âNETI ELL√âSHEZ: birth_id sz≈±r√©s ELT√ÅVOL√çT√ÅSA
          if (allResult && allResult.length > 0) {
            if (selectedBirth?.historical) {
              console.log(`üéâ T√ñRT√âNETI ELL√âS - √ñSSZES TAL√ÅLAT "${format}" form√°tummal!`, allResult);
              setPossibleAnimals(allResult);
              return;
            }
          }
        }

        console.log('‚ùå NINCS TAL√ÅLAT - √ºres lista be√°ll√≠t√°sa');
        setPossibleAnimals([]);

      } catch (err) {
        console.error('‚ùå Fejlett keres√©si hiba:', err);
        setPossibleAnimals([]);
      }
    };

    fetchPossibleAnimals();
  }, [assigningEarTag, selectedBirth?.historical, animal?.enar]);

  const handleEditBirth = (birth: any) => {
    setEditingBirth(birth);
    setShowBirthForm(true);
  };

  const handleDeleteBirth = (birth: any) => {
    setDeletingBirth(birth);
  };

  const confirmDeleteBirth = async () => {
    if (!deletingBirth) return;
    try {
      await supabase.from('calves').delete().eq('birth_id', deletingBirth.id);
      await supabase.from('births').delete().eq('id', deletingBirth.id);
      setDeletingBirth(null);
      refreshData();
      alert('‚úÖ Ell√©s sikeresen t√∂r√∂lve!');
    } catch (error: any) {
      console.error('T√∂rl√©si hiba:', error);
      alert('‚ùå Hiba t√∂rt√©nt a t√∂rl√©s sor√°n!');
    }
  };

  // üÜï K√âS≈êBB ELPUSZTULT KEZEL√âS
  const handleCalfDeath = (calf: any) => {
    setDyingCalf(calf);
    setDeathDate(new Date().toISOString().split('T')[0]);
    setDeathReason('');
    setDeathNotes('');
  };

  const confirmCalfDeath = async () => {
    if (!dyingCalf || !deathDate || !deathReason) {
      alert('‚ùå K√©rj√ºk t√∂ltse ki a k√∂telez≈ë mez≈ëket!');
      return;
    }

    try {
      // 1. JAV√çTOTT - Borj√∫ elpusztul√°s√°nak r√∂gz√≠t√©se (CSAK is_alive!)
      const { error: calfError } = await supabase
        .from('calves')
        .update({
          is_alive: false  // ‚Üê CSAK EZ! A t√∂bbi mez≈ë nem l√©tezik!
        })
        .eq('id', dyingCalf.id);

      if (calfError) {
        console.error('‚ùå Calves update hiba:', calfError);
        throw calfError;
      }

      // 2. Ell√©s friss√≠t√©se a "k√©s≈ëbb elpusztult" jelz√©ssel
      const { error: birthError } = await supabase
        .from('births')
        .update({
          calf_died_later: true,
          calf_death_date: deathDate,
          calf_death_reason: deathReason,
          calf_death_notes: deathNotes
        })
        .eq('id', dyingCalf.birth_id);

      if (birthError) {
        console.error('‚ùå Births update hiba:', birthError);
        throw birthError;
      }

      console.log('‚úÖ Borj√∫ st√°tusz friss√≠tve:', {
        calfId: dyingCalf.id,
        tempId: dyingCalf.temp_id,
        newStatus: 'is_alive = false',
        birthUpdated: 'calf_died_later = true'
      });

      alert('‚úÖ Borj√∫ st√°tusza sikeresen friss√≠tve!');
      setDyingCalf(null);
      refreshData();

    } catch (err) {
      console.error('‚ùå Hiba a st√°tusz friss√≠t√©sekor:', err);
      alert('‚ùå Hiba t√∂rt√©nt a st√°tusz friss√≠t√©se sor√°n!');
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div className="flex items-center">
          <span className="text-2xl mr-3">üêÑ</span>
          <h3 className="text-lg font-semibold text-gray-900">Ell√©si adatok</h3>
        </div>
        <div className="flex items-center gap-4">
          {vvResults.length > 0 && (
            <div className="flex items-center gap-2">
              <label className="text-sm font-medium text-gray-700">üî¨ VV eredm√©ny:</label>
              <select
                value={selectedVVForBirth?.id || ''}
                onChange={(e) => {
                  const selected = vvResults.find(vv => String(vv.id) === e.target.value);
                  setSelectedVVForBirth(selected || null);
                }}
                className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-green-500"
              >
                <option value="">VV n√©lk√ºl</option>
                {vvResults.map((vv) => (
                  <option key={vv.id} value={vv.id}>
                    {new Date(vv.vv_date).toLocaleDateString('hu-HU')} - {vv.father_name || vv.father_enar}
                  </option>
                ))}
              </select>
            </div>
          )}
          <button
            onClick={() => setShowBirthForm(true)}
            className="bg-green-600 hover:bg-green-700 text-white font-medium px-6 py-3 rounded-lg transition-colors inline-flex items-center"
          >
            <span className="mr-2">‚ûï</span>√öj ell√©s r√∂gz√≠t√©se
          </button>
        </div>
      </div>

      {showBirthForm && (
        <BirthForm
          motherEnar={animal.enar}
          editMode={!!editingBirth}
          editData={editingBirth ? { birth: editingBirth, calves: editingBirth.calves || [] } : undefined}
          onSuccess={async () => {
            setShowBirthForm(false);
            setEditingBirth(null);

            // üîÑ SZINKRONIZ√ÅL√ÅS: Ha ell√©s m√≥dos√≠t√°s, friss√≠tj√ºk az √°llatok sz√ºlet√©si d√°tum√°t
            if (editingBirth?.id) {
              console.log('üîÑ Ell√©s m√≥dos√≠tva, animals t√°bla szinkroniz√°l√°sa...');
              const { error: syncError } = await supabase
                .from('animals')
                .update({ szuletesi_datum: editingBirth.birth_date })
                .eq('birth_id', editingBirth.id);

              if (syncError) {
                console.error('‚ö†Ô∏è Animals szinkroniz√°l√°si figyelmeztet√©s:', syncError);
              } else {
                console.log('‚úÖ Animals t√°bla szinkroniz√°lva');
              }
            }

            refreshData();
            alert(editingBirth ? '‚úÖ Ell√©s sikeresen friss√≠tve √©s szinkroniz√°lva!' : '‚úÖ Ell√©s sikeresen r√∂gz√≠tve!');
          }}
          onCancel={() => {
            setShowBirthForm(false);
            setEditingBirth(null);
          }}
          prefillFromVV={selectedVVForBirth ? {
            expectedBirthDate: selectedVVForBirth.expected_birth_date,
            fatherData: {
              type: 'natural',
              enar: selectedVVForBirth.father_enar,
              kplsz: selectedVVForBirth.father_kplsz,
              name: selectedVVForBirth.father_name,
              possibleFathers: selectedVVForBirth.possible_fathers || []
            }
          } : undefined}
        />
      )}

      <div className="bg-white rounded-lg shadow-sm border p-6">
        <div className="flex items-center mb-4">
          <span className="text-2xl mr-3">üìä</span>
          <h4 className="text-lg font-semibold text-gray-900">Ell√©si T√∂rt√©net</h4>
        </div>

        {loadingBirths ? (
          <div className="text-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto mb-4"></div>
            <p className="text-gray-600">Ell√©si adatok bet√∂lt√©se...</p>
          </div>
        ) : birthHistory.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            <div className="text-4xl mb-2">üêÑ</div>
            <p>M√©g nincs r√∂gz√≠tett ell√©s</p>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">üìÖ Ell√©s D√°tuma</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">üè• T√≠pus</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‚úÖ Eredm√©ny</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">üêÑ Borjak</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">üë®‚Äç‚öïÔ∏è Jelenl√©v≈ë szem√©ly</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‚öôÔ∏è M≈±veletek</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {birthHistory.map((birth, index) => (
                  <tr key={birth.id} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                      {new Date(birth.birth_date).toLocaleDateString('hu-HU')}
                      {birth.historical && (
                        <span className="ml-2 inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                          üìö T√∂rt√©neti
                        </span>
                      )}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${birth.birth_type === 'easy_no_help' ? 'bg-green-100 text-green-800' :
                        birth.birth_type === 'easy_with_help' ? 'bg-yellow-100 text-yellow-800' :
                          birth.birth_type === 'difficult_help' ? 'bg-orange-100 text-orange-800' :
                            'bg-red-100 text-red-800'
                        }`}>
                        {birth.birth_type === 'easy_no_help' ? 'üü¢ K√∂nny≈±' :
                          birth.birth_type === 'easy_with_help' ? 'üü° K√∂nny≈±, seg√≠ts√©ggel' :
                            birth.birth_type === 'difficult_help' ? 'üü† Neh√©z, seg√≠ts√©ggel' :
                              'üî¥ Neh√©z, √°llatorvosi'}
                      </span>
                    </td>
                    <td className="px-4 py-4">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${birth.birth_outcome === 'successful' ? 'bg-green-100 text-green-800' :
                        birth.birth_outcome === 'stillborn' ? 'bg-red-100 text-red-800' :
                          'bg-orange-100 text-orange-800'
                        }`}>
                        {birth.birth_outcome === 'successful' ? '‚úÖ Sikeres' :
                          birth.birth_outcome === 'stillborn' ? 'üíÄ Halva sz√ºlet√©s' :
                            '‚ö†Ô∏è Vet√©l√©s'}
                      </span>

                      {/* üÜï K√âS≈êBB ELPUSZTULT JEL√ñL√âS T√ÅBL√ÅZATBAN */}
                      {birth.calf_died_later && (
                        <div className="mt-1">
                          <span className="inline-flex px-2 py-1 text-xs font-medium rounded-full bg-red-100 text-red-800 border-red-200">
                            üíÄ Borj√∫ k√©s≈ëbb elpusztult
                          </span>
                          <div className="text-xs text-red-600 mt-1">
                            üìÖ {birth.calf_death_date} - {birth.calf_death_reason}
                          </div>
                        </div>
                      )}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                      {birth.calves?.length || 0} db
                      {birth.calves?.map((calf: any, i: number) => (
                        <div key={i} className="text-xs text-gray-500">
                          {calf.gender === 'male' ? 'üêÇ' : 'üêÑ'} {calf.temp_id}
                          {calf.is_alive ? ' üíö' : ' üíÄ'}
                          {calf.enar && <span className="text-blue-600"> üè∑Ô∏è</span>}
                        </div>
                      ))}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                      {birth.attendant_person || '-'}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                      <div className="flex gap-2">
                        <button
                          onClick={() => setSelectedBirth(birth)}
                          className="text-blue-600 hover:text-blue-800 font-medium text-xs px-2 py-1 rounded transition-colors"
                          title="R√©szletek megtekint√©se"
                        >
                          üëÅÔ∏è R√©szletek
                        </button>
                        <button
                          onClick={() => handleEditBirth(birth)}
                          className="text-green-600 hover:text-green-800 font-medium text-xs px-2 py-1 rounded transition-colors"
                          title="Ell√©s szerkeszt√©se"
                        >
                          ‚úèÔ∏è Szerkeszt√©s
                        </button>
                        <button
                          onClick={() => handleDeleteBirth(birth)}
                          className="text-red-600 hover:text-red-800 font-medium text-xs px-2 py-1 rounded transition-colors"
                          title="Ell√©s t√∂rl√©se"
                        >
                          üóëÔ∏è T√∂rl√©s
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* ELL√âSI R√âSZLETEI MODAL */}
      {selectedBirth && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-sm border max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <div className="flex items-center">
                  <span className="text-2xl mr-3">üêÑ</span>
                  <h3 className="text-xl font-bold text-gray-900">Ell√©s R√©szletei</h3>
                </div>
                <button
                  onClick={() => setSelectedBirth(null)}
                  className="text-gray-400 hover:text-gray-600 p-2 transition-colors"
                >
                  ‚ùå
                </button>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                    <span className="mr-2">üìÖ</span>Alapadatok
                  </h4>
                  <div className="space-y-2 text-sm">
                    <p><strong>Ell√©s d√°tuma:</strong> {new Date(selectedBirth.birth_date).toLocaleDateString('hu-HU')}</p>
                    {selectedBirth.birth_time && (
                      <p><strong>Ell√©s id≈ëpontja:</strong> {selectedBirth.birth_time}</p>
                    )}
                    <p><strong>Ell√©s t√≠pusa:</strong> {
                      selectedBirth.birth_type === 'easy_no_help' ? 'üü¢ K√∂nny≈±, seg√≠ts√©g n√©lk√ºl' :
                        selectedBirth.birth_type === 'easy_with_help' ? 'üü° K√∂nny≈±, seg√≠ts√©ggel' :
                          selectedBirth.birth_type === 'difficult_help' ? 'üü† Neh√©z, seg√≠ts√©ggel' :
                            'üî¥ Neh√©z, √°llatorvosi beavatkoz√°ssal'
                    }</p>

                    {/* EREDM√âNY + K√âS≈êBB ELPUSZTULT */}
                    <div>
                      <strong>Eredm√©ny:</strong>
                      <span className={`ml-2 inline-flex px-2 py-1 text-xs font-semibold rounded-full ${selectedBirth.birth_outcome === 'successful' ? 'bg-green-100 text-green-800' :
                        selectedBirth.birth_outcome === 'stillborn' ? 'bg-red-100 text-red-800' :
                          'bg-orange-100 text-orange-800'
                        }`}>
                        {selectedBirth.birth_outcome === 'successful' ? '‚úÖ Sikeres' :
                          selectedBirth.birth_outcome === 'stillborn' ? 'üíÄ Halva sz√ºlet√©s' :
                            '‚ö†Ô∏è Vet√©l√©s'}
                      </span>

                      {/* üÜï K√âS≈êBB ELPUSZTULT JEL√ñL√âS MODAL-BAN */}
                      {selectedBirth.calf_died_later && (
                        <div className="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg">
                          <div className="text-red-600 text-sm font-medium">
                            üíÄ Borj√∫ k√©s≈ëbb elpusztult
                          </div>
                          <div className="text-red-700 text-xs mt-1">
                            üìÖ D√°tum: {selectedBirth.calf_death_date}
                          </div>
                          <div className="text-red-600 text-xs">
                            ‚ö†Ô∏è Ok: {selectedBirth.calf_death_reason}
                          </div>
                          {selectedBirth.calf_death_notes && (
                            <div className="text-gray-600 text-xs mt-1 italic">
                              üí¨ "{selectedBirth.calf_death_notes}"
                            </div>
                          )}
                        </div>
                      )}
                    </div>

                    <p><strong>Anya t√∫l√©lte:</strong> {selectedBirth.mother_survived ? '‚úÖ Igen' : '‚ùå Nem'}</p>
                    {selectedBirth.historical && (
                      <p className="text-blue-600"><strong>üìö T√∂rt√©neti ell√©s</strong></p>
                    )}
                  </div>
                </div>

                <div>
                  <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                    <span className="mr-2">üêÑ</span>Borj√∫ adatok
                  </h4>
                  <div className="space-y-3 text-sm">
                    {selectedBirth.calves?.map((calf: any, index: number) => (
                      <div key={index} className="p-3 border rounded-lg bg-gray-50">
                        <div className="flex justify-between items-center mb-2">
                          <span className="font-medium text-gray-900">
                            {calf.gender === 'male' ? 'üêÇ' : 'üêÑ'} {calf.temp_id}
                          </span>
                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${calf.is_alive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                            }`}>
                            {calf.is_alive ? 'üíö √âl' : 'üíÄ Nem √©l'}
                          </span>
                        </div>
                        <p><strong>Ivar:</strong> {calf.gender === 'male' ? 'Bika' : '√úsz≈ë'}</p>
                        {calf.birth_weight && (
                          <p><strong>Sz√ºlet√©si s√∫ly:</strong> {calf.birth_weight} kg</p>
                        )}

                        {/* üî• ENAR VERZI√ìB√ìL: PLANNED ENAR + F√úLSZ√ÅM LOGIKA */}
                        {calf.enar ? (
                          <div>
                            <p><strong>ENAR:</strong> {calf.enar}</p>
                            <p className="text-xs text-gray-500">
                              F√ºlsz√°m felhelyezve: {calf.ear_tag_date ?
                                new Date(calf.ear_tag_date).toLocaleDateString('hu-HU') :
                                'Ismeretlen'}
                            </p>
                          </div>
                        ) : (
                          <div>
                            {/* üÜï PLANNED ENAR MEGJELEN√çT√âS */}
                            {calf.planned_enar ? (
                              <div>
                                <p className="text-blue-600 mb-2"><strong>Tervezett ENAR:</strong> üìù {calf.planned_enar}</p>
                                <p className="text-orange-600 mb-2"><strong>St√°tusz:</strong> ‚è≥ F√ºlsz√°m behelyez√©sre v√°r</p>
                              </div>
                            ) : (
                              <p className="text-orange-600 mb-2"><strong>ENAR:</strong> ‚è≥ F√ºgg≈ëben</p>
                            )}

                            <div className="flex gap-2">
                              <button
                                onClick={() => {
                                  setAssigningEarTag(calf);
                                  setSelectedBirth(selectedBirth);
                                }}
                                className="bg-blue-500 hover:bg-blue-600 text-white text-xs px-3 py-1 rounded"
                              >
                                üè∑Ô∏è F√ºlsz√°m hozz√°rendel√©se
                              </button>

                              {/* üÜï PLANNED ENAR GOMB - ENAR VERZI√ìB√ìL! */}
                              <button
                                onClick={async () => {
                                  const plannedEnar = prompt('Add meg a tervezett ENAR sz√°mot:', calf.planned_enar || 'HU ');
                                  if (plannedEnar) {
                                    try {
                                      const { error } = await supabase
                                        .from('calves')
                                        .update({ planned_enar: plannedEnar })
                                        .eq('temp_id', calf.temp_id);

                                      if (error) {
                                        console.error('‚ùå Planned ENAR ment√©si hiba:', error);
                                        alert('‚ùå Hiba t√∂rt√©nt a tervezett ENAR ment√©sekor!');
                                      } else {
                                        console.log('‚úÖ Planned ENAR mentve:', plannedEnar, 'for calf:', calf.temp_id);
                                        alert('‚úÖ Tervezett ENAR sikeresen mentve!');
                                        refreshData(); // UI friss√≠t√©se
                                      }
                                    } catch (err) {
                                      console.error('‚ùå Planned ENAR save error:', err);
                                      alert('‚ùå V√°ratlan hiba t√∂rt√©nt!');
                                    }
                                  }
                                }}
                                className="bg-yellow-500 hover:bg-yellow-600 text-white text-xs px-3 py-1 rounded"
                              >
                                üìù ENAR tervez√©se
                              </button>
                            </div>
                          </div>
                        )}

                        {/* üÜï ST√ÅTUSZ FRISS√çT√âS GOMB */}
                        {calf.is_alive && (
                          <div className="mt-3 pt-2 border-t">
                            <button
                              onClick={() => handleCalfDeath(calf)}
                              className="bg-orange-500 hover:bg-orange-600 text-white text-xs px-3 py-1 rounded"
                            >
                              üîÑ St√°tusz friss√≠t√©s
                            </button>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              <div className="mt-6 flex justify-end">
                <button
                  onClick={() => setSelectedBirth(null)}
                  className="bg-gray-600 hover:bg-gray-700 text-white font-medium px-6 py-3 rounded-lg"
                >
                  ‚úÖ Bez√°r√°s
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* F√úLSZ√ÅM HOZZ√ÅRENDEL√âS MODAL - EREDETI VERZI√ì */}
      {assigningEarTag && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-sm border max-w-lg w-full mx-4">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <div className="flex items-center">
                  <span className="text-2xl mr-3">üè∑Ô∏è</span>
                  <h3 className="text-xl font-bold text-gray-900">
                    {selectedBirth?.historical ? '√Ållat √∂sszekapcsol√°sa' : 'F√ºlsz√°m hozz√°rendel√©se'}
                  </h3>
                </div>
                <button
                  onClick={() => setAssigningEarTag(null)}
                  className="text-gray-400 hover:text-gray-600 p-2 transition-colors"
                >
                  ‚ùå
                </button>
              </div>

              <div className="mb-4 p-3 bg-blue-50 rounded-lg">
                <p className="text-sm text-blue-800">
                  <strong>Borj√∫:</strong> {assigningEarTag.gender === 'male' ? 'üêÇ' : 'üêÑ'} {assigningEarTag.temp_id}
                </p>
                <p className="text-sm text-blue-600">
                  <strong>Anya:</strong> {animal.enar}
                </p>
              </div>

              <div className="mb-4">
                <div className="bg-gray-50 p-3 rounded-lg mb-3 max-h-60 overflow-y-auto">
                  <p className="text-sm text-gray-600 mb-2">
                    üí° Javasolt √°llatok ({possibleAnimals.length} tal√°lat):
                  </p>

                  <div className="space-y-2">
                    {possibleAnimals.length > 0 ? (
                      possibleAnimals.map((possibleAnimal: any, index: number) => (
                        <div key={possibleAnimal.enar} className="flex items-center p-2 bg-white border border-gray-200 rounded hover:bg-green-50">
                          <input
                            type="radio"
                            name="selectedAnimal"
                            value={possibleAnimal.enar}
                            className="mr-3 text-green-600"
                            id={`animal-${index}`}
                          />
                          <label htmlFor={`animal-${index}`} className="flex-1 cursor-pointer">
                            <div className="font-medium text-green-800">
                              üéØ {possibleAnimal.enar}
                              {index === 0 && (
                                <span className="text-xs bg-green-100 text-green-700 px-2 py-1 rounded ml-2">
                                  Aj√°nlott
                                </span>
                              )}
                            </div>
                            <div className="text-xs text-gray-600 mt-1">
                              {possibleAnimal.name && (
                                <div>üìù N√©v: {possibleAnimal.name}</div>
                              )}
                              <div>üè∑Ô∏è Kateg√≥ria: {possibleAnimal.kategoria}</div>
                            </div>
                          </label>
                        </div>
                      ))
                    ) : (
                      <div className="text-center py-4 text-gray-500 text-sm">
                        <div className="text-2xl mb-2">üîç</div>
                        <p className="font-medium">√Ållatok keres√©se...</p>
                      </div>
                    )}
                  </div>
                </div>

                {/* üî• ENAR VERZI√ìB√ìL: MANUAL ENAR INPUT */}
                <div className="border-t pt-3 mt-3">
                  <p className="text-sm text-gray-600 mb-2">
                    üîß Vagy add meg manu√°lisan az ENAR-t:
                  </p>
                  <input
                    type="text"
                    placeholder="HU 36050 0011 8"
                    className="w-full p-2 border border-gray-300 rounded text-sm"
                    onBlur={(e) => {
                      if (e.target.value.trim()) {
                        supabase
                          .from('animals')
                          .select('enar, name, kategoria')
                          .eq('enar', e.target.value.trim())
                          .eq('statusz', 'akt√≠v')
                          .single()
                          .then(({ data, error }) => {
                            if (data) {
                              setPossibleAnimals(prev => [data, ...prev.filter(a => a.enar !== data.enar)]);
                              console.log('‚úÖ Manual ENAR hozz√°adva:', data);
                            } else {
                              console.log('‚ùå ENAR nem tal√°lhat√≥:', e.target.value);
                              alert('‚ùå Ez az ENAR nem tal√°lhat√≥ az akt√≠v √°llatok k√∂z√∂tt');
                            }
                          });
                      }
                    }}
                  />
                </div>
              </div>

              <div className="flex justify-end gap-3">
                <button
                  onClick={() => setAssigningEarTag(null)}
                  className="bg-white hover:bg-gray-50 text-gray-700 font-medium px-6 py-3 rounded-lg border border-gray-300 transition-colors"
                >
                  M√©gse
                </button>
                <button
                  onClick={async () => {
                    const selectedAnimalEnar = (document.querySelector('input[name="selectedAnimal"]:checked') as HTMLInputElement)?.value;

                    if (!selectedAnimalEnar) {
                      alert('‚ö†Ô∏è K√©rlek v√°lassz ki egy √°llatot!');
                      return;
                    }

                    try {
                      // 1. Borj√∫ friss√≠t√©se
                      const { error: calfError } = await supabase
                        .from('calves')
                        .update({
                          enar: selectedAnimalEnar,
                          ear_tag_date: new Date().toISOString().split('T')[0]
                        })
                        .eq('temp_id', assigningEarTag.temp_id);

                      if (calfError) throw calfError;

                      // 2. √Ållat friss√≠t√©se
                      const { error: animalError } = await supabase
                        .from('animals')
                        .update({
                          birth_id: selectedBirth.id,
                          temp_id: assigningEarTag.temp_id
                        })
                        .eq('enar', selectedAnimalEnar);

                      if (animalError) throw animalError;

                      // 3. HI√ÅNYZ√ì R√âSZ: Anya has_given_birth = true be√°ll√≠t√°sa
                      const motherEnar = selectedBirth?.mother_enar;
                      if (motherEnar) {
                        const { error: motherError } = await supabase
                          .from('animals')
                          .update({ has_given_birth: true })
                          .eq('enar', motherEnar);

                        if (motherError) {
                          console.error('‚ö†Ô∏è Anya has_given_birth update hiba:', motherError);
                          // Folytatjuk, mert a f≈ë m≈±velet siker√ºlt
                        } else {
                          console.log('‚úÖ Anya has_given_birth = true be√°ll√≠tva:', motherEnar);
                        }
                      }

                      // 4. Siker!
                      alert(`‚úÖ Sikeresen √∂sszekapcsoltad!\n${assigningEarTag.temp_id} ‚Üí ${selectedAnimalEnar}`);
                      setAssigningEarTag(null);
                      refreshData();

                    } catch (error) {
                      console.error('√ñsszekapcsol√°si hiba:', error);
                      alert('‚ùå Hiba t√∂rt√©nt az √∂sszekapcsol√°s sor√°n!');
                    }
                  }}
                  className="bg-blue-500 hover:bg-blue-600 text-white font-medium px-6 py-3 rounded-lg transition-colors"
                >
                  üè∑Ô∏è {selectedBirth?.historical ? '√ñsszekapcsol√°s' : 'Hozz√°rendel√©s'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* üÜï ST√ÅTUSZ FRISS√çT√âS MODAL */}
      {dyingCalf && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-sm border max-w-md w-full mx-4">
            <div className="p-6">
              <div className="flex items-center mb-4">
                <span className="text-2xl mr-3">üîÑ</span>
                <h3 className="text-lg font-semibold text-gray-900">Borj√∫ St√°tusz Friss√≠t√©se</h3>
              </div>

              <div className="mb-4">
                <p className="text-sm text-gray-600 mb-2">
                  <strong>Borj√∫:</strong> {dyingCalf.temp_id} ({dyingCalf.gender === 'male' ? 'Bika' : '√úsz≈ë'})
                </p>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Elpusztul√°s d√°tuma *</label>
                  <input
                    type="date"
                    value={deathDate}
                    onChange={(e) => setDeathDate(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Elpusztul√°s oka *</label>
                  <select
                    value={deathReason}
                    onChange={(e) => setDeathReason(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                    required
                  >
                    <option value="">V√°lassz okot</option>
                    <option value="Betegs√©g">Betegs√©g</option>
                    <option value="Baleset">Baleset</option>
                    <option value="Sz√∂v≈ëdm√©ny">Ell√©si sz√∂v≈ëdm√©ny</option>
                    <option value="Velesz√ºletett rendelleness√©g">Velesz√ºletett rendelleness√©g</option>
                    <option value="Ismeretlen">Ismeretlen ok</option>
                    <option value="Egy√©b">Egy√©b</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Megjegyz√©sek</label>
                  <textarea
                    value={deathNotes}
                    onChange={(e) => setDeathNotes(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
                    rows={3}
                    placeholder="Tov√°bbi r√©szletek..."
                  />
                </div>
              </div>

              <div className="flex justify-end gap-3 mt-6">
                <button
                  onClick={() => setDyingCalf(null)}
                  className="bg-gray-600 hover:bg-gray-700 text-white font-medium px-4 py-2 rounded-lg"
                >
                  M√©gse
                </button>
                <button
                  onClick={confirmCalfDeath}
                  className="bg-orange-600 hover:bg-orange-700 text-white font-medium px-4 py-2 rounded-lg"
                >
                  üîÑ St√°tusz friss√≠t√©se
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* T√ñRL√âS MODAL */}
      {deletingBirth && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-sm border max-w-md w-full mx-4">
            <div className="p-6">
              <div className="flex items-center mb-4">
                <div className="flex-shrink-0 w-10 h-10 bg-red-100 rounded-full flex items-center justify-center">
                  <span className="text-red-600 text-xl">‚ö†Ô∏è</span>
                </div>
                <div className="ml-4">
                  <h3 className="text-lg font-semibold text-gray-900">Ell√©s T√∂rl√©se</h3>
                  <p className="text-sm text-gray-600">Ez a m≈±velet nem visszaford√≠that√≥!</p>
                </div>
              </div>
              <div className="bg-gray-50 p-3 rounded-lg mb-4">
                <p className="text-sm"><strong>Ell√©s d√°tuma:</strong> {new Date(deletingBirth.birth_date).toLocaleDateString('hu-HU')}</p>
                <p className="text-sm"><strong>Eredm√©ny:</strong> {deletingBirth.birth_outcome}</p>
                <p className="text-sm"><strong>Borjak:</strong> {deletingBirth.calves?.length || 0} db</p>
              </div>
              <p className="text-gray-700 mb-6">
                Biztosan t√∂r√∂lni szeretn√©d ezt az ell√©si rekordot √©s az √∂sszes kapcsol√≥d√≥ borj√∫ adatot?
              </p>
              <div className="flex justify-end gap-3">
                <button
                  onClick={() => setDeletingBirth(null)}
                  className="bg-white hover:bg-gray-50 text-gray-700 font-medium px-6 py-3 rounded-lg border"
                >
                  M√©gse
                </button>
                <button
                  onClick={confirmDeleteBirth}
                  className="bg-red-500 hover:bg-red-600 text-white font-medium px-6 py-3 rounded-lg"
                >
                  T√∂rl√©s
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}