// src/app/dashboard/animals/[enar]/page.tsx
'use client';

interface Father {
  enar: string;
  name: string;
  kplsz: string;
}
import { useState, useEffect } from 'react';
import React from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '@/lib/supabase';
import VVForm from '@/components/vv-form';
// import CurrentStatusTab from './components/current-status-tab';
import BirthForm from '@/components/birth-form';
import { FatherOption, Birth, FatherLoadData } from '@/types/birth-types';
//import AnimalTimeline from '@/components/AnimalTimeline';
import TeljesKaramTortenelem from '@/components/TeljesKaramTortenelem';
import PenHistoryTab from '@/components/PenHistoryTab';
import AnimalPenHistory from '@/components/AnimalPenHistory';
import HybridAnimalPenHistory from '@/components/HybridAnimalPenHistory';

interface Animal {
  id: number;
  enar: string;
  szuletesi_datum: string;
  ivar: string;
  kategoria: string;
  jelenlegi_karam?: string;
  statusz: string;
  anya_enar?: string;
  apa_enar?: string;
  kplsz?: string;
  bekerules_datum: string;
  created_at: string;
  birth_location?: 'n√°lunk' | 'v√°s√°rolt' | 'ismeretlen';
  name?: string;
  breed?: string;
  notes?: string;  // ‚úÖ Megjegyz√©sek mez≈ë
  pen_assignment_date?: string;
  pen_assignment_reason?: string;
}

const BREEDS = [
  'Blonde d\'aquitaine',
  'Limousin',
  'Magyartarka',
  'Egy√©b h√∫shaszn√∫',
  'Egy√©b tejhaszn√∫'
];

// SzaporitasTab komponens defin√≠ci√≥
function SzaporitasTab({ animal }: { animal: any }) {
  const [showVVForm, setShowVVForm] = React.useState(false);
  const [vvResults, setVvResults] = React.useState<any[]>([]);
  const [loadingVV, setLoadingVV] = React.useState(true);
  const [selectedVV, setSelectedVV] = React.useState<any>(null);
  const [editingVV, setEditingVV] = React.useState<any>(null);
  const [deletingVV, setDeletingVV] = React.useState<any>(null);

  // VV eredm√©nyek bet√∂lt√©se
  React.useEffect(() => {
    const fetchVVResults = async () => {
      try {
        setLoadingVV(true);
        const { data, error } = await supabase
          .from('vv_results')
          .select('*')
          .eq('animal_enar', animal?.enar)
          .order('vv_date', { ascending: false });

        if (error) {
          console.error('‚ùå VV eredm√©nyek bet√∂lt√©si hiba:', error);
        } else {
          console.log('‚úÖ VV eredm√©nyek bet√∂ltve:', data);
          setVvResults(data || []);
        }
      } catch (err) {
        console.error('‚ùå VV fetch hiba:', err);
      } finally {
        setLoadingVV(false);
      }
    };

    if (animal?.enar) {
      fetchVVResults();
    }
  }, [animal?.enar]);

  const refreshVVResults = async () => {
    const { data } = await supabase
      .from('vv_results')
      .select('*')
      .eq('animal_enar', animal?.enar)
      .order('vv_date', { ascending: false });

    setVvResults(data || []);
  };

  const handleEditVV = (vvResult: any) => {
    console.log('Edit VV:', vvResult);
    setEditingVV(vvResult);
    setShowVVForm(true);
  };

  const handleDeleteVV = (vvResult: any) => {
    console.log('Delete VV:', vvResult);
    setDeletingVV(vvResult);
  };

  const confirmDeleteVV = async () => {
    if (!deletingVV) return;

    try {
      const { error } = await supabase
        .from('vv_results')
        .delete()
        .eq('id', deletingVV.id);

      if (error) throw error;

      window.location.reload();
      setDeletingVV(null);

      alert('VV eredm√©ny sikeresen t√∂r√∂lve!');
    } catch (error) {
      console.error('T√∂rl√©si hiba:', error);
      alert('Hiba t√∂rt√©nt a t√∂rl√©s sor√°n!');
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div className="flex items-center">
          <span className="text-2xl mr-3">üî¨</span>
          <h3 className="text-lg font-semibold text-gray-900">Szapor√≠t√°si adatok</h3>
        </div>
        <button
          onClick={() => setShowVVForm(true)}
          className="bg-green-600 hover:bg-green-700 text-white font-medium px-6 py-3 rounded-lg transition-colors inline-flex items-center"
        >
          <span className="mr-2">‚ûï</span>
          √öj VV eredm√©ny
        </button>
      </div>

      {showVVForm && (
        <VVForm
          animalEnar={String(animal?.enar || 'ISMERETLEN')}
          onSubmit={() => {
            setShowVVForm(false);
            setEditingVV(null);
            refreshVVResults();
          }}
          onCancel={() => {
            setShowVVForm(false);
            setEditingVV(null);
          }}
          editMode={editingVV ? true : false}
          editData={editingVV}
        />
      )}

      {/* VV T√∂rt√©net T√°bl√°zat */}
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <div className="flex items-center mb-4">
          <span className="text-2xl mr-3">üìä</span>
          <h4 className="text-lg font-semibold text-gray-900">VV T√∂rt√©net</h4>
        </div>

        {loadingVV ? (
          <div className="text-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto mb-4"></div>
            <p className="text-gray-600">VV eredm√©nyek bet√∂lt√©se...</p>
          </div>
        ) : vvResults.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            <div className="text-4xl mb-2">üî¨</div>
            <p>M√©g nincs r√∂gz√≠tett VV eredm√©ny</p>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    üìÖ VV D√°tuma
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ‚úÖ Eredm√©ny
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ‚è±Ô∏è Napok
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    üêÇ Teny√©szbika
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    üêÑ Ell√©s
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    üë®‚Äç‚öïÔ∏è √Ållatorvos
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ‚öôÔ∏è M≈±veletek
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {vvResults.map((result, index) => (
                  <tr key={result.id} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                      {new Date(result.vv_date).toLocaleDateString('hu-HU')}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${result.pregnancy_status === 'vemhes' ? 'bg-green-100 text-green-800' :
                        result.pregnancy_status === 'ures' ? 'bg-red-100 text-red-800' :
                          'bg-yellow-100 text-yellow-800'
                        }`}>
                        {result.pregnancy_status === 'vemhes' ? 'ü§∞ Vemhes' :
                          result.pregnancy_status === 'ures' ? '‚ùå √úres' : 'üå± Cs√≠ra'}
                      </span>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                      {result.vv_result_days} nap
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                      {result.father_name ? (
                        result.uncertain_paternity && result.possible_fathers && result.possible_fathers.length > 1
                          ? `${result.father_name} + ${result.possible_fathers.length - 1} tov√°bbi`
                          : result.father_name
                      ) : result.father_enar || '-'}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                      {result.expected_birth_date ?
                        new Date(result.expected_birth_date).toLocaleDateString('hu-HU') : '-'}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                      {result.veterinarian || '-'}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                      <div className="flex gap-2">
                        <button
                          onClick={() => setSelectedVV(result)}
                          className="text-blue-600 hover:text-blue-800 font-medium text-xs px-2 py-1 rounded transition-colors"
                          title="R√©szletek megtekint√©se"
                        >
                          üëÅÔ∏è R√©szletek
                        </button>
                        <button
                          onClick={() => handleEditVV(result)}
                          className="text-green-600 hover:text-green-800 font-medium text-xs px-2 py-1 rounded transition-colors"
                          title="VV eredm√©ny szerkeszt√©se"
                        >
                          ‚úèÔ∏è Szerkeszt√©s
                        </button>
                        <button
                          onClick={() => handleDeleteVV(result)}
                          className="text-red-600 hover:text-red-800 font-medium text-xs px-2 py-1 rounded transition-colors"
                          title="VV eredm√©ny t√∂rl√©se"
                        >
                          üóëÔ∏è T√∂rl√©s
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* VV R√©szletek Modal - DESIGN SYSTEM */}
      {selectedVV && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-sm border max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <div className="flex items-center">
                  <span className="text-2xl mr-3">üî¨</span>
                  <h3 className="text-xl font-bold text-gray-900">VV Eredm√©ny R√©szletei</h3>
                </div>
                <button
                  onClick={() => setSelectedVV(null)}
                  className="text-gray-400 hover:text-gray-600 p-2 transition-colors"
                >
                  ‚ùå
                </button>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                    <span className="mr-2">üìÖ</span>
                    Alapadatok
                  </h4>
                  <div className="space-y-2 text-sm">
                    <p><strong>VV d√°tuma:</strong> {new Date(selectedVV.vv_date).toLocaleDateString('hu-HU')}</p>
                    <p><strong>VV eredm√©ny:</strong> {selectedVV.vv_result_days} nap</p>
                    <p><strong>St√°tusz:</strong>
                      <span className={`ml-2 inline-flex px-2 py-1 text-xs font-semibold rounded-full ${selectedVV.pregnancy_status === 'vemhes' ? 'bg-green-100 text-green-800' :
                        selectedVV.pregnancy_status === 'ures' ? 'bg-red-100 text-red-800' :
                          'bg-yellow-100 text-yellow-800'
                        }`}>
                        {selectedVV.pregnancy_status === 'vemhes' ? 'ü§∞ Vemhes' :
                          selectedVV.pregnancy_status === 'ures' ? '‚ùå √úres' : 'üå± Cs√≠ra'}
                      </span>
                    </p>
                  </div>
                </div>

                {selectedVV.pregnancy_status === 'vemhes' && (
                  <div>
                    <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                      <span className="mr-2">üêÇ</span>
                      Lehets√©ges ap√°{selectedVV.possible_fathers && selectedVV.possible_fathers.length > 1 ? 'k' : ''}
                    </h4>
                    <div className="space-y-3 text-sm">
                      {selectedVV.possible_fathers && selectedVV.possible_fathers.length > 0 ? (
                        selectedVV.possible_fathers.map((father: Father, index: number) => (
                          <div key={index} className={`p-3 border rounded-lg ${index === 0 ? 'bg-blue-50 border-blue-200' : 'bg-gray-50 border-gray-200'}`}>
                            <div className="flex justify-between items-center mb-2">
                              <span className="font-medium text-gray-900">
                                üêÇ {father.name || `${index + 1}. lehets√©ges apa`}
                              </span>
                            </div>
                            <p><strong>N√©v:</strong> {father.name || '-'}</p>
                            <p><strong>ENAR:</strong> {father.enar || '-'}</p>
                            <p><strong>KPLSZ:</strong> {father.kplsz || '-'}</p>
                          </div>
                        ))
                      ) : (
                        <div className="p-3 border rounded-lg bg-gray-50">
                          <p><strong>N√©v:</strong> {selectedVV.father_name || '-'}</p>
                          <p><strong>ENAR:</strong> {selectedVV.father_enar || '-'}</p>
                          <p><strong>KPLSZ:</strong> {selectedVV.father_kplsz || '-'}</p>
                        </div>
                      )}
                      <p><strong>Bizonytalan apas√°g:</strong> {selectedVV.uncertain_paternity ? '‚ö†Ô∏è Igen' : '‚úÖ Nem'}</p>
                      {selectedVV.blood_test_required && (
                        <p><strong>V√©rvizsg√°lat:</strong>
                          {selectedVV.blood_test_date ?
                            new Date(selectedVV.blood_test_date).toLocaleDateString('hu-HU') :
                            'ü©∏ Sz√ºks√©ges'
                          }
                        </p>
                      )}
                    </div>
                  </div>
                )}

                {selectedVV.expected_birth_date && (
                  <div>
                    <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                      <span className="mr-2">üìÖ</span>
                      Ell√©si el≈ërejelz√©s
                    </h4>
                    <div className="space-y-2 text-sm">
                      <p><strong>V√°rhat√≥ ell√©s:</strong> {new Date(selectedVV.expected_birth_date).toLocaleDateString('hu-HU')}</p>
                    </div>
                  </div>
                )}

                <div>
                  <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                    <span className="mr-2">üë®‚Äç‚öïÔ∏è</span>
                    Egy√©b adatok
                  </h4>
                  <div className="space-y-2 text-sm">
                    <p><strong>√Ållatorvos:</strong> {selectedVV.veterinarian || '-'}</p>
                    <p><strong>R√∂gz√≠t√©s d√°tuma:</strong> {new Date(selectedVV.created_at).toLocaleDateString('hu-HU')}</p>
                  </div>
                </div>
              </div>

              {selectedVV.notes && (
                <div className="mt-6">
                  <h4 className="font-semibold text-gray-900 mb-2 flex items-center">
                    <span className="mr-2">üìù</span>
                    Megjegyz√©sek
                  </h4>
                  <p className="text-sm text-gray-700 bg-gray-50 p-3 rounded-lg">
                    {selectedVV.notes}
                  </p>
                </div>
              )}

              <div className="mt-6 flex justify-end">
                <button
                  onClick={() => setSelectedVV(null)}
                  className="bg-gray-600 hover:bg-gray-700 text-white font-medium px-6 py-3 rounded-lg transition-colors inline-flex items-center"
                >
                  <span className="mr-2">‚úÖ</span>
                  Bez√°r√°s
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Delete Confirmation Modal - DESIGN SYSTEM */}
      {deletingVV && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-sm border max-w-md w-full mx-4">
            <div className="p-6">
              <div className="flex items-center mb-4">
                <div className="flex-shrink-0 w-10 h-10 bg-red-100 rounded-full flex items-center justify-center">
                  <span className="text-red-600 text-xl">‚ö†Ô∏è</span>
                </div>
                <div className="ml-4">
                  <h3 className="text-lg font-semibold text-gray-900">VV Eredm√©ny T√∂rl√©se</h3>
                  <p className="text-sm text-gray-600">Ez a m≈±velet nem visszaford√≠that√≥!</p>
                </div>
              </div>

              <div className="bg-gray-50 p-3 rounded-lg mb-4">
                <p className="text-sm"><strong>VV d√°tuma:</strong> {new Date(deletingVV.vv_date).toLocaleDateString('hu-HU')}</p>
                <p className="text-sm"><strong>Eredm√©ny:</strong> {deletingVV.vv_result_days} nap ({deletingVV.pregnancy_status})</p>
                <p className="text-sm"><strong>Bika:</strong> {deletingVV.father_name || deletingVV.father_enar}</p>
              </div>

              <p className="text-gray-700 mb-6">
                Biztosan t√∂r√∂lni szeretn√©d ezt a VV eredm√©nyt? Ez a m≈±velet nem visszaford√≠that√≥.
              </p>

              <div className="flex justify-end gap-3">
                <button
                  onClick={() => setDeletingVV(null)}
                  className="bg-white hover:bg-gray-50 text-gray-700 font-medium px-6 py-3 rounded-lg border border-gray-300 transition-colors inline-flex items-center"
                >
                  <span className="mr-2">‚ùå</span>
                  M√©gse
                </button>
                <button
                  onClick={confirmDeleteVV}
                  className="bg-red-500 hover:bg-red-600 text-white font-medium px-6 py-3 rounded-lg transition-colors inline-flex items-center"
                >
                  <span className="mr-2">üóëÔ∏è</span>
                  T√∂rl√©s
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// EllesTab komponens defin√≠ci√≥
function EllesTab({ animal }: { animal: any }) {
  const [showBirthForm, setShowBirthForm] = React.useState(false);
  const [birthHistory, setBirthHistory] = React.useState<any[]>([]);
  const [loadingBirths, setLoadingBirths] = React.useState(true);
  const [selectedBirth, setSelectedBirth] = React.useState<any>(null);
  const [editingBirth, setEditingBirth] = React.useState<any>(null);
  const [deletingBirth, setDeletingBirth] = React.useState<any>(null);
  const [assigningEarTag, setAssigningEarTag] = React.useState<any>(null);
  const [possibleAnimals, setPossibleAnimals] = useState<any[]>([]);
  const [selectedAnimalEnar, setSelectedAnimalEnar] = React.useState<string>('');
  // üÜï VV adatok state v√°ltoz√≥i az ell√©s form sz√°m√°ra
  const [vvResults, setVvResults] = React.useState<any[]>([]);
  const [loadingVV, setLoadingVV] = React.useState(true);
  const [selectedVVForBirth, setSelectedVVForBirth] = React.useState<any>(null);

  // Ell√©si t√∂rt√©net bet√∂lt√©se
  React.useEffect(() => {
    const fetchBirthHistory = async () => {
      try {
        setLoadingBirths(true);
        const { data, error } = await supabase
          .from('births')
          .select(`
            *,
            calves (
  *,
  planned_enar
)
  .eq('mother_enar', animal?.enar)
  .order('birth_date', { ascending: false });
          `)
          .eq('mother_enar', animal?.enar)
          .order('birth_date', { ascending: false });

        if (error) {
          console.error('‚ùå Ell√©si t√∂rt√©net bet√∂lt√©si hiba:', error);
        } else {
          console.log('‚úÖ Ell√©si t√∂rt√©net bet√∂ltve:', data);
          setBirthHistory(data || []);

          // üî• √ñSSZES CALVES LEK√âRDEZ√âSE (debug)
          const { data: allCalves } = await supabase
            .from('calves')
            .select('*')
            .limit(10);

          console.log('üêÑ √ñSSZES CALVES (els≈ë 10):', allCalves);
        }
      } catch (err) {
        console.error('‚ùå Birth fetch hiba:', err);
      } finally {
        setLoadingBirths(false);
      }
    };

    if (animal?.enar) {
      fetchBirthHistory();
    }
  }, [animal?.enar]);

  // üÜï VV eredm√©nyek bet√∂lt√©se ell√©s form sz√°m√°ra
  React.useEffect(() => {
    const fetchVVResults = async () => {
      try {
        setLoadingVV(true);
        const { data, error } = await supabase
          .from('vv_results')
          .select('*')
          .eq('animal_enar', animal?.enar)
          .eq('pregnancy_status', 'vemhes') // Csak vemhes eredm√©nyek
          .order('vv_date', { ascending: false });

        if (error) {
          console.error('‚ùå VV eredm√©nyek bet√∂lt√©si hiba:', error);
        } else {
          console.log('‚úÖ VV eredm√©nyek bet√∂ltve ell√©s sz√°m√°ra:', data);
          setVvResults(data || []);
          // Automatikusan a legut√≥bbi VV kiv√°laszt√°sa
          if (data && data.length > 0) {
            setSelectedVVForBirth(data[0]);
          }
        }
      } catch (err) {
        console.error('‚ùå VV fetch hiba:', err);
      } finally {
        setLoadingVV(false);
      }
    };

    if (animal?.enar) {
      fetchVVResults();
    }
  }, [animal?.enar]);

  const refreshBirthHistory = async () => {
    const { data } = await supabase
      .from('births')
      .select(`
        *,
        calves (*)
      `)
      .eq('mother_enar', animal?.enar)
      .order('birth_date', { ascending: false });

    if (data && data.length > 0) {
      // üî• MANU√ÅLIS CALVES HOZZ√ÅAD√ÅS
      for (let i = 0; i < data.length; i++) {
        const { data: calvesForBirth } = await supabase
          .from('calves')
          .select('*, planned_enar')
          .eq('birth_id', data[i].id);

        data[i].calves = calvesForBirth || [];
        console.log(`‚úÖ Birth ${i}: ${calvesForBirth?.length || 0} borj√∫ hozz√°adva`);
      }
    }

    setBirthHistory(data || []);
  };
  // üîß TISZTA USEEFFECT - DUPLIK√ÅCI√ì ELT√ÅVOL√çTVA
  React.useEffect(() => {
    const fetchPossibleAnimals = async () => {
      if (!assigningEarTag || !animal?.enar) {
        console.log('üö´ Nincs assigningEarTag vagy animal.enar');
        return;
      }

      console.log('üîç FEJLETT √ÅLLAT KERES√âS DEBUG:');
      console.log('üêÑ Anya ENAR:', animal.enar);
      console.log('üêÆ Borj√∫ temp_id:', assigningEarTag.temp_id);
      console.log('üìö T√∂rt√©neti ell√©s?', selectedBirth?.historical);

      if (!selectedBirth?.historical) {
        console.log('üÜï √öj ell√©s - nincs keres√©s sz√ºks√©ges');
        setPossibleAnimals([]);
        return;
      }

      try {
        const motherEnar = animal.enar;
        const cleanEnar = motherEnar.replace(/\s/g, ''); // Sz√≥k√∂z√∂k n√©lk√ºl

        // üéØ 1. L√âP√âS: ADATB√ÅZIS TELJES TESZT
        console.log('üìä ADATB√ÅZIS TELJES TESZT - els≈ë 20 akt√≠v √°llat:');

        const { data: allAnimals, error: allError } = await supabase
          .from('animals')
          .select('enar, name, kategoria, anya_enar, statusz, birth_id')
          .eq('statusz', 'akt√≠v')
          .limit(20);

        console.log('üìã Els≈ë 20 akt√≠v √°llat:', allAnimals);
        console.log('‚ùå All animals hiba:', allError);

        if (allAnimals && allAnimals.length > 0) {
          // Vizsg√°ljuk meg milyen anya_enar form√°tumok vannak
          const motherEnarFormats = [...new Set(allAnimals.map(a => a.anya_enar).filter(Boolean))];
          console.log('üìä Adatb√°zisban tal√°lhat√≥ anya_enar form√°tumok:', motherEnarFormats);

          // K√ºl√∂nb√∂z≈ë form√°tumokat keres√ºnk
          const searchFormats = [
            motherEnar,                      // "HU 30038 9132 1"
            cleanEnar,                       // "HU3003891321" 
            motherEnar.replace(/\s+/g, ' '), // normaliz√°lt sz√≥k√∂z√∂k
            motherEnar.toLowerCase(),        // kisbet≈±s
            motherEnar.toUpperCase()         // nagybet≈±s
          ];

          console.log('üéØ Keres√©si form√°tumok:', searchFormats);

          // Keress√ºk meg azokat, ahol az anya megegyezik
          const matchingAnimals = allAnimals.filter(animal => {
            if (!animal.anya_enar) return false;

            return searchFormats.some(format =>
              animal.anya_enar === format ||
              animal.anya_enar.replace(/\s/g, '') === format.replace(/\s/g, '')
            );
          });

          console.log('üéØ EGYEZ≈ê √ÅLLATOK TAL√ÅLVA (√∂sszes):', matchingAnimals);

          // Sz≈±rj√ºk azokat, akiknek nincs birth_id
          const availableAnimals = matchingAnimals.filter(a => !a.birth_id);
          console.log('‚úÖ EL√âRHET≈ê √ÅLLATOK (nincs birth_id):', availableAnimals);

          if (availableAnimals.length > 0) {
            setPossibleAnimals(availableAnimals);
            console.log('üéâ SIKER! √Ållatok be√°ll√≠tva:', availableAnimals);
            return; // Kil√©p√ºnk, mert tal√°ltunk
          } else {
            console.log('‚ö†Ô∏è Nincs el√©rhet≈ë √°llat (mindnek van birth_id)');

            // Debug c√©lj√°b√≥l mutassuk az √∂sszeset
            if (matchingAnimals.length > 0) {
              console.log('üîß DEBUG: √ñsszes egyez≈ë √°llat (birth_id-val egy√ºtt):', matchingAnimals);
              setPossibleAnimals(matchingAnimals); // Debug c√©lj√°b√≥l mutassuk
            }
          }
        }

        // üéØ 2. L√âP√âS: K√ñZVETLEN KERES√âS minden form√°tummal
        console.log('üîç K√ñZVETLEN KERES√âS minden form√°tummal:');

        const searchFormats = [motherEnar, cleanEnar];

        for (const format of searchFormats) {
          console.log(`üîç Pr√≥b√°lkoz√°s form√°tummal: "${format}"`);

          // El≈ësz√∂r birth_id = null sz≈±r√©ssel
          let { data: directResult, error: directError } = await supabase
            .from('animals')
            .select('enar, name, kategoria, anya_enar, birth_id, statusz, szuletesi_datum')
            .eq('anya_enar', format)
            .eq('statusz', 'akt√≠v')
            .is('birth_id', null);

          console.log(`‚úÖ "${format}" eredm√©ny (birth_id=null):`, directResult);
          console.log(`‚ùå "${format}" hiba:`, directError);

          if (directResult && directResult.length > 0) {
            console.log(`üéâ TAL√ÅLAT "${format}" form√°tummal!`, directResult);
            setPossibleAnimals(directResult);
            return; // Kil√©p√ºnk ha tal√°ltunk
          }

          // Ha nincs tal√°lat birth_id=null sz≈±r√©ssel, pr√≥b√°ljuk an√©lk√ºl
          const { data: allResult, error: allResultError } = await supabase
            .from('animals')
            .select('enar, name, kategoria, anya_enar, birth_id, statusz, szuletesi_datum')
            .eq('anya_enar', format)
            .eq('statusz', 'akt√≠v');

          console.log(`üìä "${format}" √ñSSZES eredm√©ny:`, allResult);

          // üéØ T√ñRT√âNETI ELL√âSHEZ: birth_id sz≈±r√©s ELT√ÅVOL√çT√ÅSA
          if (allResult && allResult.length > 0) {
            if (selectedBirth?.historical) {
              console.log(`üéâ T√ñRT√âNETI ELL√âS - √ñSSZES TAL√ÅLAT "${format}" form√°tummal!`, allResult);
              setPossibleAnimals(allResult); // Minden tal√°lat, birth_id-val egy√ºtt
              return;
            } else {
              // √öj ell√©shez megtartjuk a sz≈±r√©st
              const available = allResult.filter(a => !a.birth_id);
              if (available.length > 0) {
                console.log(`üéâ √öJ ELL√âS - SZ≈∞RT TAL√ÅLAT "${format}" form√°tummal!`, available);
                setPossibleAnimals(available);
                return;
              } else {
                console.log(`‚ö†Ô∏è "${format}" form√°tumn√°l mind birth_id-val rendelkezik:`, allResult);
                setPossibleAnimals([]);
              }
            }
          }
        }

        // Ha semmit nem tal√°ltunk
        console.log('‚ùå NINCS TAL√ÅLAT - √ºres lista be√°ll√≠t√°sa');
        setPossibleAnimals([]);

      } catch (err) {
        console.error('‚ùå Fejlett keres√©si hiba:', err);
        setPossibleAnimals([]);
      }
    };

    fetchPossibleAnimals();
  }, [assigningEarTag, selectedBirth?.historical, animal?.enar]);

  // üîß JAV√çTOTT MODAL UI R√âSZ IS:
  // Az assigningEarTag modal-ban cser√©ld le a tal√°latok megjelen√≠t√©s√©t:

  <div className="bg-gray-50 p-3 rounded-lg mb-3">
    <p className="text-sm text-gray-600 mb-2">
      üí° Javasolt √°llatok ({possibleAnimals.length} tal√°lat):
    </p>

    <div className="space-y-2 max-h-60 overflow-y-auto">
      {possibleAnimals.length > 0 ? (
        possibleAnimals.map((possibleAnimal, index) => (
          <div key={possibleAnimal.enar} className="flex items-center p-2 bg-white border border-gray-200 rounded hover:bg-green-50">
            <input
              type="radio"
              name="selectedAnimal"
              value={possibleAnimal.enar}
              className="mr-3 text-green-600"
              id={`animal-${index}`}
            />
            <label htmlFor={`animal-${index}`} className="flex-1 cursor-pointer">
              <div className="font-medium text-green-800">
                üéØ {possibleAnimal.enar}
                {index === 0 && (
                  <span className="text-xs bg-green-100 text-green-700 px-2 py-1 rounded ml-2">
                    Aj√°nlott
                  </span>
                )}
              </div>

              {/* Tov√°bbi r√©szletek */}
              <div className="text-xs text-gray-600 mt-1">
                {possibleAnimal.name && (
                  <div>üìù N√©v: {possibleAnimal.name}</div>
                )}
                <div>üè∑Ô∏è Kateg√≥ria: {possibleAnimal.kategoria}</div>
                {possibleAnimal.szuletesi_datum && (
                  <div>üìÖ Sz√ºlet√©s: {new Date(possibleAnimal.szuletesi_datum).toLocaleDateString('hu-HU')}</div>
                )}
                <div className="text-blue-600">
                  üîç Anya: {possibleAnimal.anya_enar || possibleAnimal.mother_enar || 'nincs megadva'}
                </div>
              </div>
            </label>
          </div>
        ))
      ) : (
        <div className="text-center py-4 text-gray-500 text-sm">
          <div className="text-2xl mb-2">üîç</div>
          <p className="font-medium">√Ållatok keres√©se...</p>
          <p className="text-xs mt-1">
            Ha nem l√°tod a megfelel≈ë √°llatot, ellen≈ërizd:
          </p>
          <ul className="text-xs mt-1 text-left">
            <li>‚Ä¢ Az √°llat l√©tezik-e az √°llatok list√°ban</li>
            <li>‚Ä¢ Az √°llat st√°tusza "akt√≠v"-e</li>
            <li>‚Ä¢ Nincs-e m√°r √∂sszekapcsolva m√°sik ell√©shez</li>
          </ul>
        </div>
      )}
    </div>
  </div>

  {/* MANU√ÅLIS ENAR BEVITEL OPCI√ì */ }
  <div className="border-t pt-3 mt-3">
    <p className="text-sm text-gray-600 mb-2">
      üîß Vagy add meg manu√°lisan az ENAR-t:
    </p>
    <input
      type="text"
      placeholder="HU 36050 0011 8"
      className="w-full p-2 border border-gray-300 rounded text-sm"
      onBlur={(e) => {
        if (e.target.value.trim()) {
          // Ellen≈ërizz√ºk hogy l√©tezik-e ez az ENAR
          supabase
            .from('animals')
            .select('enar, name, kategoria')
            .eq('enar', e.target.value.trim())
            .eq('statusz', 'akt√≠v')
            .single()
            .then(({ data, error }) => {
              if (data) {
                // Hozz√°adjuk a list√°hoz
                setPossibleAnimals(prev => [data, ...prev.filter(a => a.enar !== data.enar)]);
                console.log('‚úÖ Manual ENAR hozz√°adva:', data);
              } else {
                console.log('‚ùå ENAR nem tal√°lhat√≥:', e.target.value);
                alert('‚ùå Ez az ENAR nem tal√°lhat√≥ az akt√≠v √°llatok k√∂z√∂tt');
              }
            });
        }
      }}
    />
  </div>

  const handleEditBirth = (birth: any) => {
    console.log('Edit Birth:', birth);
    setEditingBirth(birth);
    setShowBirthForm(true);
  };

  const handleDeleteBirth = (birth: any) => {
    console.log('Delete Birth:', birth);
    setDeletingBirth(birth);
  };

  const confirmDeleteBirth = async () => {
    if (!deletingBirth) return;

    try {
      // Delete calves first
      const { error: calvesError } = await supabase
        .from('calves')
        .delete()
        .eq('birth_id', deletingBirth.id);

      if (calvesError) throw calvesError;

      // Delete birth
      const { error: birthError } = await supabase
        .from('births')
        .delete()
        .eq('id', deletingBirth.id);

      if (birthError) throw birthError;

      setDeletingBirth(null);
      refreshBirthHistory();
      alert('‚úÖ Ell√©s sikeresen t√∂r√∂lve!');
    } catch (error) {
      console.error('T√∂rl√©si hiba:', error);
      alert('‚ùå Hiba t√∂rt√©nt a t√∂rl√©s sor√°n!');
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div className="flex items-center">
          <span className="text-2xl mr-3">üêÑ</span>
          <h3 className="text-lg font-semibold text-gray-900">Ell√©si adatok</h3>
        </div>

        <div className="flex items-center gap-4">
          {/* üÜï VV v√°laszt√≥ dropdown */}
          {vvResults.length > 0 && (
            <div className="flex items-center gap-2">
              <label className="text-sm font-medium text-gray-700">üî¨ VV eredm√©ny:</label>
              <select
                value={selectedVVForBirth?.id || ''}
                onChange={(e) => {
                  console.log('üîç Dropdown v√°laszt√°s:', e.target.value);
                  console.log('üîç VV Results:', vvResults);

                  if (e.target.value === '') {
                    // "VV n√©lk√ºl" v√°laszt√°s
                    setSelectedVVForBirth(null);
                  } else {
                    // Konkr√©t VV v√°laszt√°s
                    const selected = vvResults.find(vv => String(vv.id) === String(e.target.value));
                    console.log('üîç Kiv√°lasztott VV:', selected);
                    setSelectedVVForBirth(selected || null);
                  }
                }}
                className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-green-500"
              >
                <option value="">VV n√©lk√ºl</option>
                {vvResults.map((vv) => (
                  <option key={vv.id} value={vv.id}>
                    {new Date(vv.vv_date).toLocaleDateString('hu-HU')} - {vv.father_name || vv.father_enar}
                  </option>
                ))}
              </select>
            </div>
          )}

          <button
            onClick={() => setShowBirthForm(true)}
            className="bg-green-600 hover:bg-green-700 text-white font-medium px-6 py-3 rounded-lg transition-colors inline-flex items-center"
          >
            <span className="mr-2">‚ûï</span>
            √öj ell√©s r√∂gz√≠t√©se
          </button>
        </div>
      </div>

      {showBirthForm && (
        <BirthForm
          motherEnar={String(animal?.enar || 'ISMERETLEN')}
          editMode={!!editingBirth}                    // üÜï Edit m√≥d flag
          editData={editingBirth ? {                   // üÜï Edit adatok
            birth: editingBirth,
            calves: editingBirth.calves || []
          } : undefined}
          onSuccess={() => {
            setShowBirthForm(false);
            setEditingBirth(null);                     // üÜï Edit state reset
            refreshBirthHistory();
            alert(editingBirth ? '‚úÖ Ell√©s sikeresen friss√≠tve!' : '‚úÖ Ell√©s sikeresen r√∂gz√≠tve!');
          }}
          onCancel={() => {
            setShowBirthForm(false);
            setEditingBirth(null);                     // üÜï Edit state reset
          }}
          prefillFromVV={selectedVVForBirth ? {
            expectedBirthDate: selectedVVForBirth.expected_birth_date,
            fatherData: {
              type: selectedVVForBirth.father_type || 'natural',
              enar: selectedVVForBirth.father_enar,
              kplsz: selectedVVForBirth.father_kplsz,
              name: selectedVVForBirth.father_name,
              possibleFathers: selectedVVForBirth.possible_fathers || []
            }
          } : undefined}
        />
      )}

      {/* Ell√©si T√∂rt√©net T√°bl√°zat */}
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <div className="flex items-center mb-4">
          <span className="text-2xl mr-3">üìä</span>
          <h4 className="text-lg font-semibold text-gray-900">Ell√©si T√∂rt√©net</h4>
        </div>

        {loadingBirths ? (
          <div className="text-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto mb-4"></div>
            <p className="text-gray-600">Ell√©si adatok bet√∂lt√©se...</p>
          </div>
        ) : birthHistory.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            <div className="text-4xl mb-2">üêÑ</div>
            <p>M√©g nincs r√∂gz√≠tett ell√©s</p>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    üìÖ Ell√©s D√°tuma
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    üè• T√≠pus
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ‚úÖ Eredm√©ny
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    üêÑ Borjak
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    üë®‚Äç‚öïÔ∏è Jelenl√©v≈ë szem√©ly
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ‚öôÔ∏è M≈±veletek
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {birthHistory.map((birth, index) => (
                  <tr key={birth.id} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                      {new Date(birth.birth_date).toLocaleDateString('hu-HU')}
                      {birth.historical && (
                        <span className="ml-2 inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                          üìö T√∂rt√©neti
                        </span>
                      )}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${birth.birth_type === 'easy_no_help' ? 'bg-green-100 text-green-800' :
                        birth.birth_type === 'easy_with_help' ? 'bg-yellow-100 text-yellow-800' :
                          birth.birth_type === 'difficult_help' ? 'bg-orange-100 text-orange-800' :
                            'bg-red-100 text-red-800'
                        }`}>
                        {birth.birth_type === 'easy_no_help' ? 'üü¢ K√∂nny≈±' :
                          birth.birth_type === 'easy_with_help' ? 'üü° K√∂nny≈±, seg√≠ts√©ggel' :
                            birth.birth_type === 'difficult_help' ? 'üü† Neh√©z, seg√≠ts√©ggel' :
                              'üî¥ Neh√©z, √°llatorvosi'}
                      </span>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${birth.birth_outcome === 'successful' ? 'bg-green-100 text-green-800' :
                        birth.birth_outcome === 'stillborn' ? 'bg-red-100 text-red-800' :
                          'bg-orange-100 text-orange-800'
                        }`}>
                        {birth.birth_outcome === 'successful' ? '‚úÖ Sikeres' :
                          birth.birth_outcome === 'stillborn' ? 'üíÄ Halva sz√ºlet√©s' :
                            '‚ö†Ô∏è Vet√©l√©s'}
                      </span>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                      {birth.calves?.length || 0} db
                      {birth.calves?.map((calf: any, i: number) => (
                        <div key={i} className="text-xs text-gray-500">
                          {calf.gender === 'male' ? 'üêÇ' : 'üêÑ'} {calf.temp_id}
                          {calf.is_alive ? ' üíö' : ' üíÄ'}
                          {calf.enar && <span className="text-blue-600"> üè∑Ô∏è</span>}
                        </div>
                      ))}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                      {birth.attendant_person || '-'}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-900">
                      <div className="flex gap-2">
                        <button
                          onClick={() => setSelectedBirth(birth)}
                          className="text-blue-600 hover:text-blue-800 font-medium text-xs px-2 py-1 rounded transition-colors"
                          title="R√©szletek megtekint√©se"
                        >
                          üëÅÔ∏è R√©szletek
                        </button>
                        <button
                          onClick={() => handleEditBirth(birth)}
                          className="text-green-600 hover:text-green-800 font-medium text-xs px-2 py-1 rounded transition-colors"
                          title="Ell√©s szerkeszt√©se"
                        >
                          ‚úèÔ∏è Szerkeszt√©s
                        </button>
                        <button
                          onClick={() => handleDeleteBirth(birth)}
                          className="text-red-600 hover:text-red-800 font-medium text-xs px-2 py-1 rounded transition-colors"
                          title="Ell√©s t√∂rl√©se"
                        >
                          üóëÔ∏è T√∂rl√©s
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Birth R√©szletek Modal */}
      {selectedBirth && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-sm border max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <div className="flex items-center">
                  <span className="text-2xl mr-3">üêÑ</span>
                  <h3 className="text-xl font-bold text-gray-900">Ell√©s R√©szletei</h3>
                </div>
                <button
                  onClick={() => setSelectedBirth(null)}
                  className="text-gray-400 hover:text-gray-600 p-2 transition-colors"
                >
                  ‚ùå
                </button>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                    <span className="mr-2">üìÖ</span>
                    Alapadatok
                  </h4>
                  <div className="space-y-2 text-sm">
                    <p><strong>Ell√©s d√°tuma:</strong> {new Date(selectedBirth.birth_date).toLocaleDateString('hu-HU')}</p>
                    {selectedBirth.birth_time && (
                      <p><strong>Ell√©s id≈ëpontja:</strong> {selectedBirth.birth_time}</p>
                    )}
                    <p><strong>Ell√©s t√≠pusa:</strong> {
                      selectedBirth.birth_type === 'easy_no_help' ? 'üü¢ K√∂nny≈±, seg√≠ts√©g n√©lk√ºl' :
                        selectedBirth.birth_type === 'easy_with_help' ? 'üü° K√∂nny≈±, seg√≠ts√©ggel' :
                          selectedBirth.birth_type === 'difficult_help' ? 'üü† Neh√©z, seg√≠ts√©ggel' :
                            'üî¥ Neh√©z, √°llatorvosi beavatkoz√°ssal'
                    }</p>
                    <p><strong>Eredm√©ny:</strong>
                      <span className={`ml-2 inline-flex px-2 py-1 text-xs font-semibold rounded-full ${selectedBirth.birth_outcome === 'successful' ? 'bg-green-100 text-green-800' :
                        selectedBirth.birth_outcome === 'stillborn' ? 'bg-red-100 text-red-800' :
                          'bg-orange-100 text-orange-800'
                        }`}>
                        {selectedBirth.birth_outcome === 'successful' ? '‚úÖ Sikeres' :
                          selectedBirth.birth_outcome === 'stillborn' ? 'üíÄ Halva sz√ºlet√©s' :
                            '‚ö†Ô∏è Vet√©l√©s'}
                      </span>
                    </p>
                    <p><strong>Anya t√∫l√©lte:</strong> {selectedBirth.mother_survived ? '‚úÖ Igen' : '‚ùå Nem'}</p>
                    {selectedBirth.historical && (
                      <p className="text-blue-600"><strong>üìö T√∂rt√©neti ell√©s</strong></p>
                    )}
                  </div>
                </div>

                <div>
                  <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                    <span className="mr-2">üêÑ</span>
                    Borj√∫ adatok
                  </h4>
                  <div className="space-y-3 text-sm">
                    {selectedBirth.calves?.map((calf: any, index: number) => (
                      <div key={index} className="p-3 border rounded-lg bg-gray-50">
                        <div className="flex justify-between items-center mb-2">
                          <span className="font-medium text-gray-900">
                            {calf.gender === 'male' ? 'üêÇ' : 'üêÑ'} {calf.temp_id}
                          </span>
                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${calf.is_alive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                            }`}>
                            {calf.is_alive ? 'üíö √âl' : 'üíÄ Nem √©l'}
                          </span>
                        </div>
                        <p><strong>Ivar:</strong> {calf.gender === 'male' ? 'Bika' : '√úsz≈ë'}</p>
                        {calf.birth_weight && (
                          <p><strong>Sz√ºlet√©si s√∫ly:</strong> {calf.birth_weight} kg</p>
                        )}

                        {calf.enar ? (
                          <div>
                            <p><strong>ENAR:</strong> {calf.enar}</p>
                            <p className="text-xs text-gray-500">F√ºlsz√°m felhelyezve: {calf.ear_tag_date ? new Date(calf.ear_tag_date).toLocaleDateString('hu-HU') : 'Ismeretlen'}</p>
                          </div>
                        ) : (
                          <div>
                            {calf.planned_enar ? (
                              <div>
                                <p className="text-blue-600 mb-2"><strong>Tervezett ENAR:</strong> üìù {calf.planned_enar}</p>
                                <p className="text-orange-600 mb-2"><strong>St√°tusz:</strong> ‚è≥ F√ºlsz√°m behelyez√©sre v√°r</p>
                              </div>
                            ) : (
                              <p className="text-orange-600 mb-2"><strong>ENAR:</strong> ‚è≥ F√ºgg≈ëben</p>
                            )}

                            {/* üéØ JAVASOLT √ÅLLAT MEGJELEN√çT√âSE */}
                            {!calf.enar && possibleAnimals.length > 0 && (
                              <div className="mt-2 mb-3 p-3 bg-green-50 border border-green-200 rounded-lg">
                                <p className="text-sm font-medium text-green-800 mb-2">
                                  üéØ Javasolt √°llat √∂sszekapcsol√°shoz:
                                </p>
                                <div className="bg-white p-2 rounded border border-green-300">
                                  <div className="font-medium text-green-900">
                                    üìã {possibleAnimals[0].enar}
                                  </div>
                                  {possibleAnimals[0].name && (
                                    <div className="text-sm text-gray-600">
                                      üìù N√©v: {possibleAnimals[0].name}
                                    </div>
                                  )}
                                  <div className="text-sm text-gray-600">
                                    üè∑Ô∏è Kateg√≥ria: {possibleAnimals[0].kategoria}
                                  </div>
                                  {possibleAnimals[0].szuletesi_datum && (
                                    <div className="text-sm text-gray-600">
                                      üìÖ Sz√ºlet√©s: {new Date(possibleAnimals[0].szuletesi_datum).toLocaleDateString('hu-HU')}
                                    </div>
                                  )}
                                </div>
                              </div>
                            )}

                            <div className="flex gap-2">
                              <button
                                onClick={() => {
                                  console.log('üè∑Ô∏è √ñSSZEKAPCSOL√ÅS GOMB KATTINT√ÅS DEBUG:');
                                  console.log('üìã Calf adat:', calf);
                                  console.log('üêÑ Animal ENAR:', animal?.enar);

                                  // üîß FORCE RESET EL≈êSZ√ñR
                                  setPossibleAnimals([]); // Tiszta √°llapot

                                  // Kis k√©sleltet√©ssel state be√°ll√≠t√°s
                                  setTimeout(() => {
                                    setAssigningEarTag(calf);
                                    console.log('‚úÖ AssigningEarTag state be√°ll√≠tva:', calf);
                                  }, 100);
                                }}
                                className="bg-blue-500 hover:bg-blue-600 text-white text-xs px-3 py-1 rounded transition-colors inline-flex items-center"
                              >
                                üè∑Ô∏è {selectedBirth?.historical ? '√ñsszekapcsol√°s' : 'F√ºlsz√°m hozz√°rendel√©se'}
                              </button>
                              {!calf.planned_enar && (
                                <button
                                  onClick={async () => {
                                    const plannedEnar = prompt('Add meg a tervezett ENAR sz√°mot:', 'HU ');
                                    if (plannedEnar) {
                                      // Planned ENAR ment√©se
                                      try {
                                        const { error } = await supabase
                                          .from('calves')
                                          .update({ planned_enar: plannedEnar })
                                          .eq('temp_id', calf.temp_id);

                                        if (error) {
                                          console.error('‚ùå Planned ENAR ment√©si hiba:', error);
                                          alert('‚ùå Hiba t√∂rt√©nt a tervezett ENAR ment√©sekor!');
                                        } else {
                                          console.log('‚úÖ Planned ENAR mentve:', plannedEnar, 'for calf:', calf.temp_id);
                                          alert('‚úÖ Tervezett ENAR sikeresen mentve!');
                                          refreshBirthHistory(); // UI friss√≠t√©se
                                        }
                                      } catch (err) {
                                        console.error('‚ùå Planned ENAR save error:', err);
                                        alert('‚ùå V√°ratlan hiba t√∂rt√©nt!');
                                      }
                                    }
                                  }}
                                  className="bg-green-500 hover:bg-green-600 text-white text-xs px-3 py-1 rounded transition-colors inline-flex items-center"
                                >
                                  üìù ENAR tervez√©se
                                </button>
                              )}
                            </div>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </div>

                {selectedBirth.attendant_person && (
                  <div>
                    <h4 className="font-semibold text-gray-900 mb-3 flex items-center">
                      <span className="mr-2">üë®‚Äç‚öïÔ∏è</span>
                      Egy√©b adatok
                    </h4>
                    <div className="space-y-2 text-sm">
                      <p><strong>Jelenl√©v≈ë szem√©ly:</strong> {selectedBirth.attendant_person}</p>
                      <p><strong>R√∂gz√≠t√©s d√°tuma:</strong> {new Date(selectedBirth.created_at).toLocaleDateString('hu-HU')}</p>
                    </div>
                  </div>
                )}
              </div>

              {selectedBirth.mother_notes && (
                <div className="mt-6">
                  <h4 className="font-semibold text-gray-900 mb-2 flex items-center">
                    <span className="mr-2">üêÑ</span>
                    Megjegyz√©s az any√°r√≥l
                  </h4>
                  <p className="text-sm text-gray-700 bg-blue-50 p-3 rounded-lg">
                    {selectedBirth.mother_notes}
                  </p>
                </div>
              )}

              {(selectedBirth.complications || selectedBirth.notes) && (
                <div className="mt-6">
                  {selectedBirth.complications && (
                    <div className="mb-4">
                      <h4 className="font-semibold text-gray-900 mb-2 flex items-center">
                        <span className="mr-2">‚ö†Ô∏è</span>
                        Komplik√°ci√≥k
                      </h4>
                      <p className="text-sm text-gray-700 bg-orange-50 p-3 rounded-lg">
                        {selectedBirth.complications}
                      </p>
                    </div>
                  )}

                  {selectedBirth.notes && (
                    <div>
                      <h4 className="font-semibold text-gray-900 mb-2 flex items-center">
                        <span className="mr-2">üìù</span>
                        Megjegyz√©sek
                      </h4>
                      <p className="text-sm text-gray-700 bg-gray-50 p-3 rounded-lg">
                        {selectedBirth.notes}
                      </p>
                    </div>
                  )}
                </div>
              )}

              <div className="mt-6 flex justify-end">
                <button
                  onClick={() => setSelectedBirth(null)}
                  className="bg-gray-600 hover:bg-gray-700 text-white font-medium px-6 py-3 rounded-lg transition-colors inline-flex items-center"
                >
                  <span className="mr-2">‚úÖ</span>
                  Bez√°r√°s
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Delete Confirmation Modal - EGYSZER! */}
      {deletingBirth && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-sm border max-w-md w-full mx-4">
            <div className="p-6">
              <div className="flex items-center mb-4">
                <div className="flex-shrink-0 w-10 h-10 bg-red-100 rounded-full flex items-center justify-center">
                  <span className="text-red-600 text-xl">‚ö†Ô∏è</span>
                </div>
                <div className="ml-4">
                  <h3 className="text-lg font-semibold text-gray-900">Ell√©s T√∂rl√©se</h3>
                  <p className="text-sm text-gray-600">Ez a m≈±velet nem visszaford√≠that√≥!</p>
                </div>
              </div>

              <div className="bg-gray-50 p-3 rounded-lg mb-4">
                <p className="text-sm"><strong>Ell√©s d√°tuma:</strong> {new Date(deletingBirth.birth_date).toLocaleDateString('hu-HU')}</p>
                <p className="text-sm"><strong>Eredm√©ny:</strong> {
                  deletingBirth.birth_outcome === 'successful' ? 'Sikeres ell√©s' :
                    deletingBirth.birth_outcome === 'stillborn' ? 'Halva sz√ºlet√©s' : 'Vet√©l√©s'
                }</p>
                <p className="text-sm"><strong>Borjak:</strong> {deletingBirth.calves?.length || 0} db</p>
              </div>

              <p className="text-gray-700 mb-6">
                Biztosan t√∂r√∂lni szeretn√©d ezt az ell√©si rekordot? Ez t√∂r√∂lni fogja az √∂sszes kapcsol√≥d√≥ borj√∫ adatot is.
              </p>

              <div className="flex justify-end gap-3">
                <button
                  onClick={() => setDeletingBirth(null)}
                  className="bg-white hover:bg-gray-50 text-gray-700 font-medium px-6 py-3 rounded-lg border border-gray-300 transition-colors inline-flex items-center"
                >
                  <span className="mr-2">‚ùå</span>
                  M√©gse
                </button>
                <button
                  onClick={confirmDeleteBirth}
                  className="bg-red-500 hover:bg-red-600 text-white font-medium px-6 py-3 rounded-lg transition-colors inline-flex items-center"
                >
                  <span className="mr-2">üóëÔ∏è</span>
                  T√∂rl√©s
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* F√ºlsz√°m hozz√°rendel√©s/√ñsszekapcsol√°s Modal */}
      {assigningEarTag && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-sm border max-w-lg w-full mx-4">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <div className="flex items-center">
                  <span className="text-2xl mr-3">üè∑Ô∏è</span>
                  <h3 className="text-xl font-bold text-gray-900">
                    {selectedBirth?.historical ? '√Ållat √∂sszekapcsol√°sa' : 'F√ºlsz√°m hozz√°rendel√©se'}
                  </h3>
                </div>
                <button
                  onClick={() => setAssigningEarTag(null)}
                  className="text-gray-400 hover:text-gray-600 p-2 transition-colors"
                >
                  ‚ùå
                </button>
              </div>

              <div className="mb-4 p-3 bg-blue-50 rounded-lg">
                <p className="text-sm text-blue-800">
                  <strong>Borj√∫:</strong> {assigningEarTag.gender === 'male' ? 'üêÇ' : 'üêÑ'} {assigningEarTag.temp_id}
                </p>
                <p className="text-sm text-blue-600">
                  <strong>Anya:</strong> {animal.enar}
                </p>
                {selectedBirth?.historical && (
                  <p className="text-sm text-orange-600">
                    <strong>üìö T√∂rt√©neti ell√©s</strong> - a borj√∫nak m√°r van f√ºlsz√°ma
                  </p>
                )}
              </div>

              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  V√°laszd ki a megfelel≈ë √°llatot:
                </label>

                <div className="bg-gray-50 p-3 rounded-lg mb-3 max-h-60 overflow-y-auto">
                  <p className="text-sm text-gray-600 mb-2">
                    üí° Javasolt √°llatok ({possibleAnimals.length} tal√°lat):
                  </p>

                  <div className="space-y-2">
                    {possibleAnimals.length > 0 ? (
                      possibleAnimals.map((possibleAnimal, index) => (
                        <div key={possibleAnimal.enar} className="flex items-center p-2 bg-white border border-gray-200 rounded hover:bg-green-50">
                          <input
                            type="radio"
                            name="selectedAnimal"
                            value={possibleAnimal.enar}
                            className="mr-3 text-green-600"
                            id={`animal-${index}`}
                          />
                          <label htmlFor={`animal-${index}`} className="flex-1 cursor-pointer">
                            <div className="font-medium text-green-800">
                              üéØ {possibleAnimal.enar}
                              {index === 0 && (
                                <span className="text-xs bg-green-100 text-green-700 px-2 py-1 rounded ml-2">
                                  Aj√°nlott
                                </span>
                              )}
                            </div>

                            {/* Tov√°bbi r√©szletek */}
                            <div className="text-xs text-gray-600 mt-1">
                              {possibleAnimal.name && (
                                <div>üìù N√©v: {possibleAnimal.name}</div>
                              )}
                              <div>üè∑Ô∏è Kateg√≥ria: {possibleAnimal.kategoria}</div>
                              {possibleAnimal.szuletesi_datum && (
                                <div>üìÖ Sz√ºlet√©s: {new Date(possibleAnimal.szuletesi_datum).toLocaleDateString('hu-HU')}</div>
                              )}
                            </div>
                          </label>
                        </div>
                      ))
                    ) : (
                      <div className="text-center py-4 text-gray-500 text-sm">
                        <div className="text-2xl mb-2">üîç</div>
                        <p className="font-medium">√Ållatok keres√©se...</p>
                        <p className="text-xs mt-1">
                          {selectedBirth?.historical
                            ? 'T√∂rt√©neti ell√©s - keres√ºnk olyan √°llatokat, amelyek m√°r l√©teznek.'
                            : '√öj ell√©s - keres√ºnk olyan √°llatokat, amelyeknek nincs m√©g f√ºlsz√°m hozz√°rendelve.'
                          }
                        </p>
                      </div>
                    )}
                  </div>
                </div>

                {/* MANU√ÅLIS ENAR BEVITEL OPCI√ì */}
                <div className="border-t pt-3 mt-3">
                  <p className="text-sm text-gray-600 mb-2">
                    üîß Vagy add meg manu√°lisan az ENAR-t:
                  </p>
                  <input
                    type="text"
                    placeholder="HU 36050 0011 8"
                    className="w-full p-2 border border-gray-300 rounded text-sm"
                    onBlur={(e) => {
                      if (e.target.value.trim()) {
                        // Ellen≈ërizz√ºk hogy l√©tezik-e ez az ENAR
                        supabase
                          .from('animals')
                          .select('enar, name, kategoria')
                          .eq('enar', e.target.value.trim())
                          .eq('statusz', 'akt√≠v')
                          .single()
                          .then(({ data, error }) => {
                            if (data) {
                              // Hozz√°adjuk a list√°hoz
                              setPossibleAnimals(prev => [data, ...prev.filter(a => a.enar !== data.enar)]);
                              console.log('‚úÖ Manual ENAR hozz√°adva:', data);
                            } else {
                              console.log('‚ùå ENAR nem tal√°lhat√≥:', e.target.value);
                              alert('‚ùå Ez az ENAR nem tal√°lhat√≥ az akt√≠v √°llatok k√∂z√∂tt');
                            }
                          });
                      }
                    }}
                  />
                </div>

                <div className="text-xs text-gray-500 bg-yellow-50 p-2 rounded mt-2">
                  ‚ö†Ô∏è {selectedBirth?.historical
                    ? 'T√∂rt√©neti ell√©s - keres√ºnk olyan √°llatokat, amelyek m√°r l√©teznek, de nincs ell√©si kapcsolatuk.'
                    : '√öj ell√©s - keres√ºnk olyan √°llatokat, amelyeknek nincs m√©g f√ºlsz√°m hozz√°rendelve √©s az anya egyezik.'
                  }
                </div>
              </div>

              <div className="flex justify-end gap-3">
                <button
                  onClick={() => setAssigningEarTag(null)}
                  className="bg-white hover:bg-gray-50 text-gray-700 font-medium px-6 py-3 rounded-lg border border-gray-300 transition-colors"
                >
                  M√©gse
                </button>
                <button
                  onClick={async () => {
                    const selectedAnimalEnar = (document.querySelector('input[name="selectedAnimal"]:checked') as HTMLInputElement)?.value;

                    if (!selectedAnimalEnar) {
                      alert('‚ö†Ô∏è K√©rlek v√°lassz ki egy √°llatot!');
                      return;
                    }

                    try {
                      // 1. Borj√∫ friss√≠t√©se
                      const { error: calfError } = await supabase
                        .from('calves')
                        .update({
                          enar: selectedAnimalEnar,
                          ear_tag_date: new Date().toISOString().split('T')[0]
                        })
                        .eq('temp_id', assigningEarTag.temp_id);

                      if (calfError) throw calfError;

                      // 2. √Ållat friss√≠t√©se
                      const { error: animalError } = await supabase
                        .from('animals')
                        .update({
                          birth_id: selectedBirth.id,
                          temp_id: assigningEarTag.temp_id
                        })
                        .eq('enar', selectedAnimalEnar);

                      if (animalError) throw animalError;

                      // 3. Siker!
                      alert(`‚úÖ Sikeresen √∂sszekapcsoltad!\n${assigningEarTag.temp_id} ‚Üí ${selectedAnimalEnar}`);
                      setAssigningEarTag(null);
                      refreshBirthHistory(); // UI friss√≠t√©se

                    } catch (error) {
                      console.error('√ñsszekapcsol√°si hiba:', error);
                      alert('‚ùå Hiba t√∂rt√©nt az √∂sszekapcsol√°s sor√°n!');
                    }
                  }}
                  className="bg-blue-500 hover:bg-blue-600 text-white font-medium px-6 py-3 rounded-lg transition-colors"
                >
                  üè∑Ô∏è {selectedBirth?.historical ? '√ñsszekapcsol√°s' : 'Hozz√°rendel√©s'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// Helper funkci√≥ a teny√©szbika adatok lek√©r√©s√©hez
const getTenyeszbikaByEnar = (enar: string) => {
  const tenyeszbikak = [
    { enar: 'HU 35163 0088 0', name: 'B√©la (Aldiar Ul√°n)', kplsz: '42813' },
    { enar: 'HU 35163 0117 9', name: 'Bonucci', kplsz: '44753' },
    { enar: 'HU 35163 0114 8', name: 'Beckham', kplsz: '44707' },
    { enar: 'HU 35163 0093 6', name: 'M√≥zes (BasileBoli Ul√°n)', kplsz: '43049' },
    { enar: 'HU 35163 0087 3', name: 'G√©za (Ardilles Nevet≈ë)', kplsz: '42962' },
    { enar: 'HU 35159 0087 4', name: 'Balotelli', kplsz: '44247' },
    { enar: 'HU 35159 0083 6', name: 'Bettega', kplsz: '44084' },
    { enar: 'HU 34843 0025 3', name: 'Pawel (Vet√∫riusz)', kplsz: '39136' }
  ];

  return tenyeszbikak.find(t => t.enar === enar);
};

export default function AnimalDetailPage() {
  const router = useRouter();

  const [animal, setAnimal] = useState<Animal | null>(null);
  const [editedAnimal, setEditedAnimal] = useState<Animal | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<string>('reszletek');
  const [isEditing, setIsEditing] = useState(false);
  const [saving, setSaving] = useState(false);
  const [weaningDate, setWeaningDate] = useState('');
  const [weaningNotes, setWeaningNotes] = useState('');
  const [savingWeaning, setSavingWeaning] = useState(false);
  const [showBloodTestModal, setShowBloodTestModal] = useState(false);
  const [showManualFatherModal, setShowManualFatherModal] = useState(false);
  const [editingFatherData, setEditingFatherData] = useState(false);
  const [currentPen, setCurrentPen] = useState<string | null>(null);
  const [manualFatherForm, setManualFatherForm] = useState({
  
    father_enar: '',
    father_name: '',
    father_kplsz: '',
    uncertain_paternity: false
  });

  const handleSave = async () => {
    if (!editedAnimal || !animal) return;

    try {
      setSaving(true);

      // 1. ALAPADATOK FRISS√çT√âSE
      const { error } = await supabase
        .from('animals')
        .update({
          name: editedAnimal.name,
          kategoria: editedAnimal.kategoria,
          ivar: editedAnimal.ivar,
          statusz: editedAnimal.statusz,
          breed: editedAnimal.breed,
          birth_location: editedAnimal.birth_location,
          szuletesi_datum: editedAnimal.szuletesi_datum,
          bekerules_datum: editedAnimal.bekerules_datum,
          anya_enar: editedAnimal.anya_enar,
          kplsz: editedAnimal.kplsz,
          notes: editedAnimal.notes
        })
        .eq('enar', animal.enar);

      if (error) {
        console.error('‚ùå Ment√©si hiba:', error);
        alert('‚ùå Hiba t√∂rt√©nt a ment√©s sor√°n!');
        return;
      }

      // 2. ‚≠ê KAR√ÅM HOZZ√ÅRENDEL√âS KEZEL√âSE
      if (editedAnimal.jelenlegi_karam && editedAnimal.pen_assignment_date) {
        // Jelenlegi hozz√°rendel√©s lez√°r√°sa
        const { error: closeError } = await supabase
          .from('animal_pen_assignments')
          .update({ removed_at: new Date().toISOString() })
          .eq('animal_id', animal?.id)
          .is('removed_at', null);

        if (closeError) {
          console.error('Hozz√°rendel√©s lez√°r√°si hiba:', closeError);
        }

        // Kar√°m ID lek√©rdez√©se pen_number alapj√°n
        const { data: penData } = await supabase
          .from('pens')
          .select('id')
          .eq('pen_number', editedAnimal.jelenlegi_karam)
          .single();

        if (penData?.id) {
          // √öj hozz√°rendel√©s l√©trehoz√°sa
          const assignmentDate = new Date(editedAnimal.pen_assignment_date + 'T12:00:00.000Z').toISOString();

          const { error: assignError } = await supabase
            .from('animal_pen_assignments')
            .insert({
              animal_id: animal.id,
              pen_id: penData.id,
              assigned_at: assignmentDate,
              assignment_reason: editedAnimal.pen_assignment_reason || 'other',
              notes: `√Ållat r√©szletek oldalr√≥l m√≥dos√≠tva: ${new Date().toLocaleDateString('hu-HU')}`
            });

          if (assignError) {
            console.error('√öj hozz√°rendel√©s hiba:', assignError);
            alert('‚ùå Hiba t√∂rt√©nt a kar√°m hozz√°rendel√©s sor√°n!');
            return;
          }

          // ‚≠ê MOZGAT√ÅSI T√ñRT√âNET R√ñGZ√çT√âSE IS
          const { error: movementError } = await supabase
            .from('animal_movements')
            .insert({
              animal_id: animal.id,
              from_pen_id: null,
              to_pen_id: penData.id,
              moved_at: assignmentDate,
              movement_reason: editedAnimal.pen_assignment_reason || 'other',
              function_type: null,
              notes: `√Ållat r√©szletek oldalr√≥l m√≥dos√≠tva`
            });

          if (movementError) {
            console.error('Mozgat√°si t√∂rt√©net hiba:', movementError);
          }
        }
      }

      console.log('‚úÖ √Ållat adatok √©s kar√°m hozz√°rendel√©s sikeresen mentve');
      alert('‚úÖ √Ållat adatok √©s kar√°m hozz√°rendel√©s sikeresen mentve!');

      // ‚≠ê JAV√çTOTT STATE FRISS√çT√âS
      setIsEditing(false);  // El≈ësz√∂r editing m√≥dot kikapcsoljuk

      // Jelenlegi kar√°m bet√∂lt√©se komponens bet√∂lt√©skor
useEffect(() => {
  if (animal?.id) {
    fetchCurrentPen();
  }
}, [animal?.id]);

      // Majd friss√≠tj√ºk az adatokat
      // Azonnali adatok √∫jrat√∂lt√©se
if (animal.enar) {
  await fetchAnimal(animal.enar);
  await fetchCurrentPen(); // ‚Üê √öJ: jelenlegi kar√°m is friss√ºl
  console.log('‚úÖ √Ållat adatok √©s jelenlegi kar√°m automatikusan friss√≠tve');
}

    } catch (error) {
      console.error('‚ùå Ment√©si hiba:', error);
      alert('‚ùå V√°ratlan hiba t√∂rt√©nt!');
    } finally {
      setSaving(false);
    }
  };

  // Real-time jelenlegi kar√°m lek√©rdez√©se kar√°m t√∂rt√©netb≈ël
const fetchCurrentPen = async () => {
  if (!animal?.enar || !animal?.id) {
    console.log('‚ùå Nincs √°llat ENAR vagy ID');
    return;
  }
  
  try {
    console.log('üîç Jelenlegi kar√°m meghat√°roz√°sa CSAK √∫j rendszerb≈ël:', animal.enar);
    
    const animalIdString = animal.id.toString();
    
    // CSAK az √∫j pen_history_periods rendszert haszn√°ljuk
    const { data: allPeriods, error: periodsError } = await supabase
      .from('pen_history_periods')
      .select(`
        *,
        pens!inner(pen_number)
      `)
      .order('start_date', { ascending: false });

    if (!periodsError && allPeriods && allPeriods.length > 0) {
      const animalLatestPeriod = allPeriods.find(period => {
        const animals = period.animals_snapshot as any[] || [];
        return animals.some(animalInPeriod =>
          animalInPeriod.enar === animal.enar ||
          animalInPeriod.id === animalIdString ||
          (typeof animalInPeriod === 'string' && animalInPeriod === animal.enar)
        );
      });

      if (animalLatestPeriod) {
        const penNumber = animalLatestPeriod.pens?.pen_number;
        const isOngoing = !animalLatestPeriod.end_date;
        
        console.log(`‚úÖ Legut√≥bbi kar√°m t√∂rt√©netb≈ël: ${penNumber} (${isOngoing ? 'folyamatban' : 'lez√°rt'})`);
setCurrentPen(`Kar√°m ${penNumber}`);
return;
      }
    }

    console.log('‚ùå Nem tal√°lhat√≥ kar√°m t√∂rt√©net');
    setCurrentPen('Nincs kar√°m t√∂rt√©net');

  } catch (error) {
    console.error('‚ùå Hiba a jelenlegi kar√°m meghat√°roz√°s√°ban:', error);
    setCurrentPen('Hiba t√∂rt√©nt');
  }
};

  // Manual URL parsing
  useEffect(() => {
    console.log('üîç ENAR Extraction Starting...');

    if (typeof window !== 'undefined') {
      try {
        const pathname = window.location.pathname;
        console.log('Current pathname:', pathname);

        const pathParts = pathname.split('/');
        const lastPart = pathParts[pathParts.length - 1];

        if (lastPart && lastPart !== 'undefined' && lastPart.length > 0) {
          const decodedEnar = decodeURIComponent(lastPart);
          console.log('‚úÖ Decoded ENAR:', decodedEnar);
          fetchAnimal(decodedEnar);
        } else {
          setError('ENAR nem tal√°lhat√≥ az URL-ben');
          setLoading(false);
        }
      } catch (err) {
        console.error('‚ùå ENAR decode error:', err);
        setError('Hib√°s ENAR form√°tum az URL-ben');
        setLoading(false);
      }
    }
  }, []);

  // Fetch animal data
  const fetchAnimal = async (enar: string) => {
    try {
      setLoading(true);
      setError(null);

      console.log('üîç Searching for animal with ENAR:', enar);

      // 1. √ÅLLAT ALAPADATOK LEK√âRDEZ√âSE
      const { data: animalData, error: supabaseError } = await supabase
        .from('animals')
        .select(`
        *,
        animal_pen_assignments!left(
  id,
  pen_id,
  assigned_at,
  removed_at,
  assignment_reason,
  notes,
  pens(
    id,
    pen_number,
    location,
    pen_type
          )
        )
      `)
        .eq('enar', enar)
        .single();

      if (supabaseError) {
        console.error('‚ùå Supabase error:', supabaseError);
        if (supabaseError.code === 'PGRST116') {
          setError(`√Ållat nem tal√°lhat√≥: ${enar}`);
        } else {
          setError(`Adatb√°zis hiba: ${supabaseError.message}`);
        }
        return;
      }

      if (!animalData) {
        setError(`Nincs √°llat ezzel az ENAR-ral: ${enar}`);
        return;
      }

      console.log('‚úÖ √Ållat alapadatok bet√∂ltve:', animalData);

      // 2. APA ADATOK INTELLIGENS BET√ñLT√âSE
      let enhancedAnimal = { ...animalData };

      // 2A. Ha van k√∂zvetlen apa adat, azt haszn√°ljuk
      if (animalData.father_enar) {
        console.log('‚úÖ K√∂zvetlen apa adatok m√°r jelen vannak:', {
          father_enar: animalData.father_enar,
          father_name: animalData.father_name,
          father_kplsz: animalData.father_kplsz
        });
      }
      // 2B. Ha nincs k√∂zvetlen apa adat, de van anya, keress√ºk az ell√©si rekordokban √âS VV-ben
      else if (animalData.anya_enar && !animalData.father_enar) {
        console.log('üîç Apa adatok keres√©se ell√©si rekordokban az anya alapj√°n:', animalData.anya_enar);

        // ENAR form√°tum normaliz√°l√°s
        const cleanMotherEnar = animalData.anya_enar.replace(/\s/g, ''); // Sz√≥k√∂z√∂k elt√°vol√≠t√°sa
        const formattedMotherEnar = cleanMotherEnar.replace(/(.{2})(.{5})(.{4})(.{1})/, '$1 $2 $3 $4'); // Sz√≥k√∂z√∂k hozz√°ad√°sa

        let foundFatherData = false;

        try {
          // EL≈êSZ√ñR: Keres√©s ell√©si rekordokban
          const { data: birthData, error: birthError } = await supabase
            .from('births')
            .select(`
            father_enar, 
            father_name, 
            father_kplsz, 
            uncertain_paternity, 
            possible_fathers,
            birth_date,
            birth_outcome,
            historical
          `)
            .in('mother_enar', [animalData.anya_enar, cleanMotherEnar, formattedMotherEnar])
            .order('birth_date', { ascending: false });

          if (birthError) {
            console.error('‚ùå Birth data hiba:', birthError);
          } else if (birthData && birthData.length > 0) {
            console.log('‚úÖ Tal√°lt ell√©si rekordok:', birthData);

            // Legut√≥bbi sikeres ell√©s keres√©se
            const successfulBirth = birthData.find(birth =>
              birth.birth_outcome === 'successful' || birth.birth_outcome === null
            ) || birthData[0];

            if (successfulBirth && successfulBirth.father_enar) {
              console.log('üéØ Kiv√°lasztott ell√©si rekord apa adatokhoz:', successfulBirth);

              enhancedAnimal = {
                ...enhancedAnimal,
                father_enar: successfulBirth.father_enar,
                father_name: successfulBirth.father_name,
                father_kplsz: successfulBirth.father_kplsz,
                uncertain_paternity: successfulBirth.uncertain_paternity,
                possible_fathers: successfulBirth.possible_fathers,
                father_source: 'birth_record',
                mother_birth_record: successfulBirth
              };

              console.log('‚úÖ Apa adatok sikeresen hozz√°adva ell√©si rekordb√≥l:', {
                father_enar: successfulBirth.father_enar,
                father_name: successfulBirth.father_name,
                father_kplsz: successfulBirth.father_kplsz,
                source: 'birth_record'
              });

              foundFatherData = true;
            } else {
              console.log('‚ö†Ô∏è Ell√©si rekord megvan, de nincs apa adat benne');
            }
          } else {
            console.log('‚ö†Ô∏è Nem tal√°lhat√≥k ell√©si rekordok az anya ENAR-j√°hoz');
          }

          // M√ÅSODSZOR: Ha nincs apa adat az ell√©si rekordban, keress√ºk VV eredm√©nyekben
          if (!foundFatherData) {
            console.log('üîç Keres√©s VV eredm√©nyekben az anya alapj√°n:', animalData.anya_enar);

            const { data: vvData, error: vvError } = await supabase
              .from('vv_results')
              .select(`
              father_enar,
              father_name, 
              father_kplsz,
              uncertain_paternity,
              possible_fathers,
              vv_date,
              pregnancy_status
            `)
              .in('animal_enar', [animalData.anya_enar, cleanMotherEnar, formattedMotherEnar])
              .eq('pregnancy_status', 'vemhes')
              .order('vv_date', { ascending: false });

            if (vvError) {
              console.error('‚ùå VV data hiba:', vvError);
            } else if (vvData && vvData.length > 0) {
              console.log('‚úÖ Tal√°lt VV eredm√©nyek:', vvData);

              const latestVV = vvData[0]; // Legut√≥bbi vemhes VV

              if (latestVV && latestVV.father_enar) {
                console.log('üéØ Kiv√°lasztott VV eredm√©ny apa adatokhoz:', latestVV);

                enhancedAnimal = {
                  ...enhancedAnimal,
                  father_enar: latestVV.father_enar,
                  father_name: latestVV.father_name,
                  father_kplsz: latestVV.father_kplsz,
                  uncertain_paternity: latestVV.uncertain_paternity,
                  possible_fathers: latestVV.possible_fathers,
                  father_source: 'vv_record',
                  mother_vv_record: latestVV
                };

                console.log('‚úÖ Apa adatok sikeresen hozz√°adva VV rekordb√≥l:', {
                  father_enar: latestVV.father_enar,
                  father_name: latestVV.father_name,
                  father_kplsz: latestVV.father_kplsz,
                  source: 'vv_record'
                });

                foundFatherData = true;
              }
            } else {
              console.log('‚ö†Ô∏è Nem tal√°lhat√≥k VV eredm√©nyek sem az anya ENAR-j√°hoz');
            }
          }

          if (!foundFatherData) {
            console.log('‚ùå Sem ell√©si rekordban, sem VV eredm√©nyben nem tal√°lhat√≥k apa adatok');
          }

        } catch (searchError) {
          console.error('‚ùå Hiba az apa adatok keres√©se sor√°n:', searchError);
        }
      }
      // 2C. Ha nincs anya sem, pr√≥b√°ljuk a r√©gi apa_enar mez≈ët
      else if (animalData.apa_enar && !animalData.father_enar) {
        console.log('üìù R√©gi apa_enar mez≈ë haszn√°lata:', animalData.apa_enar);
        enhancedAnimal = {
          ...enhancedAnimal,
          father_enar: animalData.apa_enar,
          father_source: 'legacy'
        };
      }
      // 2D. Teny√©szbika vagy v√°s√°rolt √°llat eset√©n
      else if (animalData.birth_location === 'v√°s√°rolt' || animalData.kategoria === 'teny√©szbika') {
        console.log('‚ÑπÔ∏è V√°s√°rolt √°llat vagy teny√©szbika - apa adatok nem alkalmazhat√≥k');
        enhancedAnimal = {
          ...enhancedAnimal,
          father_source: 'not_applicable'
        };
      }
      // 2E. Minden egy√©b esetben
      else {
        console.log('‚ùì Apa adatok nem tal√°lhat√≥k');
        enhancedAnimal = {
          ...enhancedAnimal,
          father_source: 'unknown'
        };
      }

      console.log('üèÅ V√©gs≈ë √°llat objektum apa adatokkal:', enhancedAnimal);

      // 3. STATE BE√ÅLL√çT√ÅSA
      if (!isEditing) {
        setAnimal(enhancedAnimal);
        setEditedAnimal(enhancedAnimal);
      } else {
        setAnimal(enhancedAnimal);
        console.log('üîí Editing in progress - preserving edited state');
      }

    } catch (err) {
      console.error('‚ùå Fetch error:', err);
      setError('Hiba t√∂rt√©nt az adatok bet√∂lt√©se sor√°n');
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ IDE J√ñN A handleWeaningSubmit F√úGGV√âNY:
  const handleWeaningSubmit = async () => {
    if (!weaningDate || !animal) return;

    try {
      setSavingWeaning(true);

      // V√°laszt√°si esem√©ny ment√©se az adatb√°zisba
      const currentNotes = animal.notes || '';
      const weaningEntry = `\nüìÖ V√ÅLASZT√ÅS - ${weaningDate}: ${weaningNotes || 'Probl√©mamentes v√°laszt√°s'}`;
      const updatedNotes = currentNotes + weaningEntry;

      const { error } = await supabase
        .from('animals')
        .update({
          notes: updatedNotes,
        })
        .eq('enar', animal.enar);

      if (error) {
        console.error('‚ùå V√°laszt√°s ment√©si hiba:', error);
        alert('‚ùå Hiba t√∂rt√©nt a v√°laszt√°s r√∂gz√≠t√©sekor!');
        return;
      }

      console.log('‚úÖ V√°laszt√°s sikeresen r√∂gz√≠tve:', { weaningDate, weaningNotes });
      alert('‚úÖ V√°laszt√°s sikeresen r√∂gz√≠tve!');

      // Form reset
      setWeaningDate('');
      setWeaningNotes('');

      // √Ållat adatok friss√≠t√©se
      if (animal.enar) {
        fetchAnimal(animal.enar);
      }

    } catch (error) {
      console.error('‚ùå V√°laszt√°s ment√©si hiba:', error);
      alert('‚ùå V√°ratlan hiba t√∂rt√©nt!');
    } finally {
      setSavingWeaning(false);
    }
  };

  // A handleWeaningSubmit f√ºggv√©ny UT√ÅN add hozz√°:

  const handleDeleteWeaning = async () => {
    if (!animal?.notes) {
      alert('‚ö†Ô∏è Nincs tal√°lat - nincsenek v√°laszt√°si bejegyz√©sek!');
      return;
    }

    // Ellen≈ërizz√ºk, van-e v√°laszt√°si bejegyz√©s
    if (!animal.notes.includes('üìÖ V√ÅLASZT√ÅS')) {
      alert('‚ö†Ô∏è Nincs v√°laszt√°si bejegyz√©s a notes mez≈ëben!');
      return;
    }

    // Meger≈ës√≠t√©s k√©r√©se
    const confirmDelete = confirm('üóëÔ∏è Biztosan t√∂r√∂lni szeretn√©d az utols√≥ v√°laszt√°si bejegyz√©st?');
    if (!confirmDelete) return;

    try {
      setSavingWeaning(true);

      // Notes feldolgoz√°sa - utols√≥ v√°laszt√°si bejegyz√©s elt√°vol√≠t√°sa
      const lines = animal.notes.split('\n');
      const weaningLines = lines.filter(line => line.includes('üìÖ V√ÅLASZT√ÅS'));

      if (weaningLines.length === 0) {
        alert('‚ö†Ô∏è Nincs v√°laszt√°si bejegyz√©s t√∂r√∂lhet≈ë!');
        return;
      }

      // Utols√≥ v√°laszt√°si sor elt√°vol√≠t√°sa
      const lastWeaningLine = weaningLines[weaningLines.length - 1];
      const updatedNotes = animal.notes.replace(lastWeaningLine, '').replace(/\n\n+/g, '\n').trim();

      const { error } = await supabase
        .from('animals')
        .update({
          notes: updatedNotes || null, // Ha √ºres, akkor null
        })
        .eq('enar', animal.enar);

      if (error) {
        console.error('‚ùå V√°laszt√°s t√∂rl√©si hiba:', error);
        alert('‚ùå Hiba t√∂rt√©nt a t√∂rl√©s sor√°n!');
        return;
      }

      console.log('‚úÖ V√°laszt√°si bejegyz√©s t√∂r√∂lve:', lastWeaningLine);
      alert('‚úÖ Utols√≥ v√°laszt√°si bejegyz√©s sikeresen t√∂r√∂lve!');

      // √Ållat adatok friss√≠t√©se
      if (animal.enar) {
        fetchAnimal(animal.enar);
      }

    } catch (error) {
      console.error('‚ùå V√°laszt√°s t√∂rl√©si hiba:', error);
      alert('‚ùå V√°ratlan hiba t√∂rt√©nt a t√∂rl√©s sor√°n!');
    } finally {
      setSavingWeaning(false);
    }
  };

  // Update field
  const updateField = (field: keyof Animal, value: string) => {
    if (!editedAnimal) return;
    setEditedAnimal({
      ...editedAnimal,
      [field]: value
    });
  };

  const handlePenChange = (penId: string) => {
    console.log('üè† Kar√°m v√°ltoz√°s:', penId);

    // Kar√°m ID ment√©se
    updateField('jelenlegi_karam', penId);

    // Ha nincs m√©g be√°ll√≠tott d√°tum, mai d√°tumot √°ll√≠t be
    if (!editedAnimal?.pen_assignment_date) {
      updateField('pen_assignment_date', new Date().toISOString().split('T')[0]);
    }

    // Ha nincs m√©g be√°ll√≠tott ok, alap√©rtelmezett ot √°ll√≠t be
    if (!editedAnimal?.pen_assignment_reason) {
      updateField('pen_assignment_reason', 'other');
    }
  };

  // Calculate age
  const calculateAge = (birthDate: string) => {
    const birth = new Date(birthDate);
    const now = new Date();
    const diffMs = now.getTime() - birth.getTime();
    const years = Math.floor(diffMs / (1000 * 60 * 60 * 24 * 365.25));
    const months = Math.floor((diffMs % (1000 * 60 * 60 * 24 * 365.25)) / (1000 * 60 * 60 * 24 * 30.44));

    if (years > 0) {
      return `${years} √©v ${months} h√≥`;
    }
    return `${months} h√≥nap`;
  };

  // Get short ID
  const getShortId = (enar: string) => {
    const numbers = enar.replace(/\D/g, '');
    return numbers.slice(-5);
  };

  // Category colors
  const getCategoryColor = (category: string) => {
    const colors = {
      'teh√©n': 'bg-green-100 text-green-800 border-green-200',
      'sz≈±z_√ºsz≈ë': 'bg-blue-100 text-blue-800 border-blue-200',
      'vemhes_√ºsz≈ë': 'bg-purple-100 text-purple-800 border-purple-200',
      'n≈ëivar√∫_borj√∫': 'bg-pink-100 text-pink-800 border-pink-200',
      'h√≠mivar√∫_borj√∫': 'bg-orange-100 text-orange-800 border-orange-200',
      'h√≠z√≥bika': 'bg-red-100 text-red-800 border-red-200',
      'teny√©szbika': 'bg-gray-100 text-gray-800 border-gray-200'
    };
    return colors[category as keyof typeof colors] || 'bg-gray-100 text-gray-800 border-gray-200';
  };

  // Dropdown options
  const categoryOptions = [
    { value: 'teh√©n', label: 'Teh√©n' },
    { value: 'sz≈±z_√ºsz≈ë', label: 'Sz≈±z √ºsz≈ë' },
    { value: 'vemhes_√ºsz≈ë', label: 'Vemhes √ºsz≈ë' },
    { value: 'n≈ëivar√∫_borj√∫', label: 'N≈ëivar√∫ borj√∫' },
    { value: 'h√≠mivar√∫_borj√∫', label: 'H√≠mivar√∫ borj√∫' },
    { value: 'h√≠z√≥bika', label: 'H√≠z√≥bika' },
    { value: 'teny√©szbika', label: 'Teny√©szbika' }
  ];

  const genderOptions = [
    { value: 'n≈ë', label: 'N≈ë' },
    { value: 'h√≠m', label: 'H√≠m' }
  ];

  const statusOptions = [
    { value: 'akt√≠v', label: 'Akt√≠v' },
    { value: 'eladott', label: 'Eladott' },
    { value: 'elhullott', label: 'Elhullott' },
    { value: 'karant√©n', label: 'Karant√©n' }
  ];

  const penOptions = [
    { value: '', label: 'Nincs megadva' },
    { value: '1', label: '1 - Bal oldal' },
    { value: '2', label: '2 - Bal oldal' },
    { value: '3', label: '3 - Bal oldal' },
    { value: '4A', label: '4A - Bal oldal' },
    { value: '4B', label: '4B - Bal oldal' },
    { value: '5', label: '5 - Jobb oldal' },
    { value: '6', label: '6 - Jobb oldal' },
    { value: '7', label: '7 - Jobb oldal' },
    { value: '8', label: '8 - Jobb oldal' },
    { value: '9', label: '9 - Jobb oldal' },
    { value: '10', label: '10 - Jobb oldal' },
    { value: '11', label: '11 - Jobb oldal' },
    { value: '12A', label: '12A - Kont√©nerekn√©l' },
    { value: '12B', label: '12B - Kont√©nerekn√©l' },
    { value: '13', label: '13 - H√°ts√≥ sor' },
    { value: '14', label: '14 - H√°ts√≥ sor' },
    { value: '15', label: '15 - H√°ts√≥ sor' },
    { value: 'E1', label: 'E1 - Ellet≈ë ist√°ll√≥' },
    { value: 'E2', label: 'E2 - Ellet≈ë ist√°ll√≥' },
    { value: 'E3', label: 'E3 - Ellet≈ë ist√°ll√≥' },
    { value: 'E4', label: 'E4 - Ellet≈ë ist√°ll√≥' },
    { value: 'E5', label: 'E5 - Ellet≈ë ist√°ll√≥' },
    { value: 'E6', label: 'E6 - Ellet≈ë ist√°ll√≥' },
    { value: 'E7', label: 'E7 - Ellet≈ë ist√°ll√≥' },
    { value: 'E8', label: 'E8 - Ellet≈ë ist√°ll√≥' },
    { value: 'E9', label: 'E9 - Ellet≈ë ist√°ll√≥' },
    { value: 'E10', label: 'E10 - Ellet≈ë ist√°ll√≥' },
    { value: 'E11', label: 'E11 - Ellet≈ë ist√°ll√≥' },
    { value: 'E12', label: 'E12 - Ellet≈ë ist√°ll√≥' }
  ];

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Adatok bet√∂lt√©se...</p>
        </div>
      </div>
    );
  }

  if (error || !animal || !editedAnimal) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-red-500 text-6xl mb-4">üêÑ</div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Hiba t√∂rt√©nt</h1>
          <p className="text-gray-600 mb-4">{error || 'Ismeretlen hiba'}</p>
          <button
            onClick={() => router.back()}
            className="bg-green-600 hover:bg-green-700 text-white font-medium px-6 py-3 rounded-lg transition-colors inline-flex items-center"
          >
            <span className="mr-2">‚¨ÖÔ∏è</span>
            Vissza
          </button>
        </div>
      </div>
    );
  }

  // MODERNIZ√ÅLT TABOK - EMOJI IKONOKKAL
  const tabs: { id: string; name: string }[] = [
    { id: 'reszletek', name: 'üìã R√©szletek' },
    { id: 'szuletesi', name: 'üìÖ Sz√ºlet√©si adatok' },
    { id: 'karam-tortenelem', name: 'üìö Kar√°m T√∂rt√©nelem' },
    { id: 'csalad', name: 'üêÑüíïüêÇ Csal√°d' },
    { id: 'szaporitas', name: 'üî¨ Szapor√≠t√°s' },
    { id: 'elles', name: 'üêÑ Ell√©s' },
    { id: 'egeszseg', name: '‚ù§Ô∏è Eg√©szs√©g' },
    { id: 'esemenynaplo', name: 'üìä Esem√©nynapl√≥' }
  ];

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">

        {/* Header - DESIGN SYSTEM */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <button
                onClick={() => router.back()}
                className="text-gray-400 hover:text-gray-600 p-2 transition-colors"
              >
                ‚¨ÖÔ∏è
              </button>
              <div className="flex items-center">
                <span className="text-4xl mr-4">üêÑ</span>
                <div>
                  <h1 className="text-3xl font-bold text-gray-900">
                    {animal.enar}
                  </h1>
                  <p className="mt-2 text-gray-600">
                    #{getShortId(animal.enar)} ‚Ä¢ {animal.kategoria}
                  </p>
                </div>
              </div>
            </div>

            <div className="flex gap-3">
              {isEditing && (
                <button
                  onClick={() => {
                    setEditedAnimal(animal);
                    setIsEditing(false);
                  }}
                  className="bg-white hover:bg-gray-50 text-gray-700 font-medium px-6 py-3 rounded-lg border border-gray-300 transition-colors inline-flex items-center"
                >
                  <span className="mr-2">‚ùå</span>
                  M√©gse
                </button>
              )}
              <button
                onClick={isEditing ? handleSave : () => setIsEditing(true)}
                disabled={saving}
                className="bg-green-600 hover:bg-green-700 text-white font-medium px-6 py-3 rounded-lg transition-colors disabled:opacity-50 inline-flex items-center"
              >
                {saving ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Ment√©s...
                  </>
                ) : isEditing ? (
                  <>
                    <span className="mr-2">üíæ</span>
                    Ment√©s
                  </>
                ) : (
                  <>
                    <span className="mr-2">‚úèÔ∏è</span>
                    Szerkeszt√©s
                  </>
                )}
              </button>
            </div>
          </div>
        </div>

        {/* Tab Navigation - DESIGN SYSTEM */}
        <div className="bg-white rounded-lg shadow-sm border mb-6">
          <div className="flex overflow-x-auto">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center px-6 py-4 text-sm font-medium border-b-2 whitespace-nowrap transition-colors ${activeTab === tab.id
                  ? 'border-green-500 text-green-600 bg-green-50'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
              >
                {tab.name}
              </button>
            ))}
          </div>
        </div>

        {/* Content */}
        {/* R√©szletek Tab */}
        {activeTab === 'reszletek' && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Alapadatok K√°rtya */}
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <div className="flex items-center mb-4">
                <span className="text-2xl mr-3">üìã</span>
                <h3 className="text-lg font-semibold text-gray-900">Alapadatok</h3>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    üè∑Ô∏è ENAR azonos√≠t√≥
                  </label>
                  <div className="flex items-center gap-2">
                    <input
                      type="text"
                      value={animal.enar}
                      disabled
                      className="flex-1 block w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-500"
                    />
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                      #{getShortId(animal.enar)}
                    </span>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    üìù N√©v
                  </label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={editedAnimal.name || ''}
                      onChange={(e) => updateField('name', e.target.value)}
                      placeholder="√Ållat neve (opcion√°lis)"
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors"
                    />
                  ) : (
                    <div className="w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-500">
                      {animal.name || 'Nincs n√©v megadva'}
                    </div>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    üè∑Ô∏è Kateg√≥ria
                  </label>
                  {isEditing ? (
                    <select
                      value={editedAnimal.kategoria}
                      onChange={(e) => updateField('kategoria', e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors bg-white"
                    >
                      {categoryOptions.map(option => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                  ) : (
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium border ${getCategoryColor(animal.kategoria)}`}>
                      {categoryOptions.find(opt => opt.value === animal.kategoria)?.label || animal.kategoria}
                    </span>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‚ö• Ivar
                  </label>
                  {isEditing ? (
                    <select
                      value={editedAnimal.ivar}
                      onChange={(e) => updateField('ivar', e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors bg-white"
                    >
                      {genderOptions.map(option => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                  ) : (
                    <div className="text-xl">
                      {animal.ivar === 'n≈ë' ? '‚ôÄÔ∏è' : '‚ôÇÔ∏è'}
                    </div>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‚è∞ √âletkor
                  </label>
                  <input
                    type="text"
                    value={calculateAge(animal.szuletesi_datum)}
                    disabled
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-500"
                  />
                </div>
              </div>
            </div>

            {/* √Ållapot K√°rtya */}
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <div className="flex items-center mb-4">
                <span className="text-2xl mr-3">üìä</span>
                <h3 className="text-lg font-semibold text-gray-900">Jelenlegi √°llapot</h3>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‚úÖ St√°tusz
                  </label>
                  {isEditing ? (
                    <select
                      value={editedAnimal.statusz}
                      onChange={(e) => updateField('statusz', e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors bg-white"
                    >
                      {statusOptions.map(option => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                  ) : (
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${animal.statusz === 'akt√≠v' ? 'bg-green-100 text-green-800' :
                      animal.statusz === 'eladott' ? 'bg-blue-100 text-blue-800' :
                        animal.statusz === 'elhullott' ? 'bg-red-100 text-red-800' :
                          'bg-yellow-100 text-yellow-800'
                      }`}>
                      {statusOptions.find(opt => opt.value === animal.statusz)?.label || animal.statusz}
                    </span>
                  )}
                </div>

               {/* JELENLEGI KAR√ÅM MEGJELEN√çT√âS JAV√çT√ÅSA - T√ñRT√âNETB≈êL: */}
<div className="mb-4">
  <div className="flex items-center justify-between mb-2">
    <label className="block text-sm font-medium text-gray-700">
      üìç Jelenlegi kar√°m
    </label>
    <button
      onClick={fetchCurrentPen}
      className="text-xs text-blue-600 hover:text-blue-800 transition-colors"
      title="Kar√°m friss√≠t√©se"
    >
      üîÑ Friss√≠t√©s
    </button>
  </div>
  <div className={`p-3 rounded-md border ${
    !currentPen || currentPen.includes('Hiba') || currentPen.includes('Nincs') 
      ? 'bg-red-50 border-red-200' 
      : currentPen.includes('folyamatban') 
        ? 'bg-gray-50 border-gray-200'
        : 'bg-green-50 border-green-200'
  }`}>
    <span className={`font-medium ${
      !currentPen || currentPen.includes('Hiba') || currentPen.includes('Nincs')
        ? 'text-red-800'
        : currentPen.includes('folyamatban')
          ? 'text-gray-800'
          : 'text-green-800'
    }`}>
      {currentPen || 'Kar√°m meghat√°roz√°s folyamatban...'}
    </span>
    {currentPen && !currentPen.includes('Hiba') && !currentPen.includes('Nincs') && (
      <div className="text-xs text-gray-500 mt-1">
        ‚ÑπÔ∏è Kar√°m t√∂rt√©net alapj√°n
      </div>
    )}
  </div>
</div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    üìÖ Sz√ºlet√©si d√°tum
                  </label>
                  <input
                    type="text"
                    value={animal.szuletesi_datum}
                    disabled
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    üìÖ Beker√ºl√©s d√°tuma
                  </label>
                  <input
                    type="text"
                    value={animal.bekerules_datum}
                    disabled
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    üåç Sz√°rmaz√°s
                  </label>
                  {isEditing ? (
                    <select
                      value={editedAnimal?.birth_location || 'ismeretlen'}
                      onChange={(e) => {
                        setEditedAnimal({
                          ...editedAnimal,
                          birth_location: e.target.value
                        } as any);
                      }}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors bg-white"
                    >
                      <option value="n√°lunk">üè† N√°lunk sz√ºletett</option>
                      <option value="v√°s√°rolt">üõí V√°s√°rolt</option>
                      <option value="ismeretlen">‚ùì Ismeretlen</option>
                    </select>
                  ) : (
                    <div className={`inline-flex items-center px-3 py-2 rounded-lg text-sm font-medium ${animal?.birth_location === 'n√°lunk'
                      ? 'bg-green-100 text-green-800'
                      : 'bg-blue-100 text-blue-800'
                      }`}>
                      {animal?.birth_location === 'n√°lunk' ? 'üè† N√°lunk sz√ºletett' : 'üõí V√°s√°rolt'}
                    </div>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    üêÑ Fajta
                  </label>
                  {isEditing ? (
                    <select
                      value={editedAnimal.breed || ''}
                      onChange={(e) => updateField('breed', e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors bg-white"
                    >
                      <option value="">V√°lasszon fajt√°t...</option>
                      {BREEDS.map(breed => (
                        <option key={breed} value={breed}>
                          {breed}
                        </option>
                      ))}
                    </select>
                  ) : (
                    <div className="w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-500">
                      {animal.breed || 'Nincs fajta megadva'}
                    </div>
                  )}
                </div>

              </div>
            </div>
          </div>
        )}

        {/* Sz√ºlet√©si adatok Tab */}
        {activeTab === 'szuletesi' && (
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <div className="flex items-center mb-6">
              <span className="text-2xl mr-3">üìÖ</span>
              <h3 className="text-lg font-semibold text-gray-900">Sz√ºlet√©si adatok</h3>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  üìÖ Sz√ºlet√©si d√°tum
                </label>
                <input
                  type="date"
                  value={isEditing ? (editedAnimal?.szuletesi_datum || '') : (animal?.szuletesi_datum || '')}
                  onChange={(e) => {
                    if (!isEditing || !editedAnimal) return;
                    const newValue = e.target.value;
                    setEditedAnimal(prev => prev ? { ...prev, szuletesi_datum: newValue } : null);
                  }}
                  disabled={!isEditing}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors disabled:bg-gray-50 disabled:text-gray-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  üìÖ Beker√ºl√©s d√°tuma
                </label>
                <input
                  type="date"
                  value={isEditing ? (editedAnimal?.bekerules_datum || '') : (animal?.bekerules_datum || '')}
                  onChange={(e) => {
                    if (!isEditing || !editedAnimal) return;
                    const newValue = e.target.value;
                    setEditedAnimal(prev => prev ? { ...prev, bekerules_datum: newValue } : null);
                  }}
                  disabled={!isEditing}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors disabled:bg-gray-50 disabled:text-gray-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‚è∞ √âletkor
                </label>
                <input
                  type="text"
                  value={calculateAge(animal?.szuletesi_datum)}
                  disabled
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-500"
                />
              </div>
            </div>
          </div>
        )}

 {/* Kar√°m T√∂rt√©nelem Tab - √öJ HIBRID K√ÅRTYA RENDSZER */}
{activeTab === 'karam-tortenelem' && (
  <div className="p-6 bg-white rounded-lg">
    <HybridAnimalPenHistory 
      animalEnar={animal.enar}
      animalId={animal.id.toString()} // string konverzi√≥
    />
  </div>
)}

        {/* Csal√°d Tab */}
        {activeTab === 'csalad' && (
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <div className="flex items-center mb-6">
              <span className="text-2xl mr-3">üêÑüíïüêÇ</span>
              <h3 className="text-lg font-semibold text-gray-900">Sz√ºl≈ëk √©s csal√°dfa</h3>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  üêÑ Anya ENAR
                </label>
                {isEditing ? (
                  <input
                    type="text"
                    value={editedAnimal.anya_enar || ''}
                    onChange={(e) => updateField('anya_enar', e.target.value)}
                    placeholder="Pl. HU 30223 0444 9"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors"
                  />
                ) : (
                  <div className="w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-500">
                    {animal.anya_enar || 'Nincs megadva'}
                  </div>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  üêÇ Apa Adatok
                </label>

                {/* BIZONYTALAN APAS√ÅG */}
                {(animal as any).uncertain_paternity &&
                  (animal as any).possible_fathers &&
                  (animal as any).possible_fathers.length > 1 ? (
                  <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded-r-lg">
                    <div className="flex items-start justify-between">
                      <div className="flex items-start">
                        <span className="text-2xl mr-3">‚ö†Ô∏è</span>
                        <div className="flex-1">
                          <h3 className="text-yellow-800 font-semibold mb-2">Bizonytalan Apas√°g</h3>
                          <p className="text-yellow-700 mb-3">
                            ü©∏ <strong>V√©rvizsg√°lat sz√ºks√©ges a pontos apa meghat√°roz√°s√°hoz!</strong>
                          </p>

                          <div className="bg-yellow-100 p-3 rounded mb-3">
                            <p className="font-medium text-yellow-800 mb-2">Lehets√©ges ap√°k:</p>
                            <div className="space-y-1">
                              {(animal as any).possible_fathers?.map((father: any) => {
                                const father_enar = typeof father === 'string' ? father : father.enar;
                                const tenyeszbika = getTenyeszbikaByEnar(father_enar);
                                return (
                                  <div key={father_enar} className="text-yellow-800">
                                    üêÇ {tenyeszbika?.name || father.name || 'Ismeretlen'} ({father_enar})
                                    {(tenyeszbika?.kplsz || father.kplsz) &&
                                      ` - KPLSZ: ${tenyeszbika?.kplsz || father.kplsz}`
                                    }
                                  </div>
                                );
                              })}
                            </div>
                          </div>

                          <div className="flex gap-2">
                            <button
                              onClick={() => setShowBloodTestModal(true)}
                              className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded text-sm transition-colors"
                            >
                              üî¨ V√©rvizsg√°lat Eredm√©ny
                            </button>
                            <button
                              onClick={() => setShowManualFatherModal(true)}
                              className="bg-gray-600 hover:bg-gray-700 text-white px-3 py-2 rounded text-sm transition-colors"
                            >
                              ‚úèÔ∏è Manual M√≥dos√≠t√°s
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  /* EGY√âRTELM≈∞ APAS√ÅG */
                ) : (animal as any).father_enar ? (
                  <div className="bg-green-50 border-l-4 border-green-400 p-4 rounded-r-lg">
                    <div className="flex items-start justify-between">
                      <div className="flex items-center">
                        <span className="text-2xl mr-3">‚úÖ</span>
                        <div>
                          <h3 className="text-green-800 font-semibold mb-1">Apa Azonos√≠tva</h3>
                          <p className="text-green-700">
                            üêÇ <strong>{(animal as any).father_name || getTenyeszbikaByEnar((animal as any).father_enar)?.name || 'N√©vtelen'}</strong> ({(animal as any).father_enar})
                          </p>
                          {((animal as any).father_kplsz || getTenyeszbikaByEnar((animal as any).father_enar)?.kplsz) && (
                            <p className="text-green-700">
                              KPLSZ: {(animal as any).father_kplsz || getTenyeszbikaByEnar((animal as any).father_enar)?.kplsz}
                            </p>
                          )}
                          <p className="text-sm text-green-600 mt-1">
                            üìã {(animal as any).father_source === 'birth_record' ? 'Ell√©si rekordb√≥l automatikusan' :
                              (animal as any).father_source === 'vv_result' ? 'VV eredm√©nyb≈ël' :
                                (animal as any).father_source === 'manual' ? 'Manual r√∂gz√≠t√©s' : 'Manu√°lisan r√∂gz√≠tve'}
                          </p>
                        </div>
                      </div>
                      <div className="flex gap-2">
                        <button
                          onClick={() => {
                            setManualFatherForm({
                              father_enar: (animal as any).father_enar || '',
                              father_name: (animal as any).father_name || '',
                              father_kplsz: (animal as any).father_kplsz || '',
                              uncertain_paternity: (animal as any).uncertain_paternity || false
                            });
                            setShowManualFatherModal(true);
                          }}
                          className="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm transition-colors"
                        >
                          ‚úèÔ∏è Szerkeszt√©s
                        </button>
                        <button
                          onClick={() => {
                            setManualFatherForm({
                              father_enar: '',
                              father_name: '',
                              father_kplsz: '',
                              uncertain_paternity: false
                            });
                            setShowManualFatherModal(true);
                          }}
                          className="bg-gray-600 hover:bg-gray-700 text-white px-3 py-1 rounded text-sm transition-colors"
                        >
                          üîÑ Fel√ºl√≠r√°s
                        </button>
                      </div>
                    </div>
                  </div>

                  /* R√âGI APA ENAR RENDSZER */
                ) : animal.apa_enar ? (
                  <div className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-r-lg">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <span className="text-2xl mr-3">üêÇ</span>
                        <div>
                          <h3 className="text-blue-800 font-semibold mb-1">Apa (R√©gi Rendszer)</h3>
                          <p className="text-blue-700">{animal.apa_enar}</p>
                          <p className="text-sm text-blue-600 mt-1">
                            üí° Friss√≠tsd VV vagy ell√©si adatokkal a r√©szletes apa inform√°ci√≥k√©rt
                          </p>
                        </div>
                      </div>
                      <button
                        onClick={() => {
                          setManualFatherForm({
                            father_enar: animal.apa_enar || '',
                            father_name: '',
                            father_kplsz: '',
                            uncertain_paternity: false
                          });
                          setShowManualFatherModal(true);
                        }}
                        className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm transition-colors"
                      >
                        ‚¨ÜÔ∏è Modern Friss√≠t√©s
                      </button>
                    </div>
                  </div>

                  /* NINCS APA ADAT */
                ) : (
                  <div className="bg-gray-50 border-l-4 border-gray-400 p-4 rounded-r-lg">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <span className="text-2xl mr-3">‚ùì</span>
                        <div>
                          <h3 className="text-gray-700 font-semibold">Apa Adat Hi√°nyzik</h3>
                          <p className="text-gray-600">
                            Az apa adatok m√©g nem ker√ºltek r√∂gz√≠t√©sre ehhez az √°llathoz.
                          </p>
                          <p className="text-sm text-gray-500 mt-1">
                            üí° R√∂gz√≠tsd VV eredm√©nyben vagy ell√©si adatokn√°l az apa inform√°ci√≥kat.
                          </p>
                        </div>
                      </div>
                      <button
                        onClick={() => {
                          setManualFatherForm({
                            father_enar: '',
                            father_name: '',
                            father_kplsz: '',
                            uncertain_paternity: false
                          });
                          setShowManualFatherModal(true);
                        }}
                        className="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm transition-colors"
                      >
                        ‚ûï Apa R√∂gz√≠t√©se
                      </button>
                    </div>
                  </div>
                )}
              </div>

              {(animal.kplsz || isEditing) && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    üìã KPLSZ sz√°m
                  </label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={editedAnimal.kplsz || ''}
                      onChange={(e) => updateField('kplsz', e.target.value)}
                      placeholder="KPLSZ azonos√≠t√≥"
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors"
                    />
                  ) : (
                    <div className="w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-500">
                      {animal.kplsz || 'Nincs megadva'}
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        )}

        {/* MANUAL FATHER MODAL */}
        {showManualFatherModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
              <h3 className="text-lg font-semibold mb-4 flex items-center">
                üêÇ Apa Adatok Manual R√∂gz√≠t√©se
              </h3>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    üêÇ Apa ENAR *
                  </label>
                  <input
                    type="text"
                    value={manualFatherForm.father_enar}
                    onChange={(e) => setManualFatherForm({ ...manualFatherForm, father_enar: e.target.value })}
                    placeholder="Pl. HU 35163 0088 0"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    üìù Apa Neve (opcion√°lis)
                  </label>
                  <input
                    type="text"
                    value={manualFatherForm.father_name}
                    onChange={(e) => setManualFatherForm({ ...manualFatherForm, father_name: e.target.value })}
                    placeholder="Pl. B√©la"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    üìã KPLSZ (opcion√°lis)
                  </label>
                  <input
                    type="text"
                    value={manualFatherForm.father_kplsz}
                    onChange={(e) => setManualFatherForm({ ...manualFatherForm, father_kplsz: e.target.value })}
                    placeholder="Pl. 42813"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                  />
                </div>

                <div className="flex items-center">
                  <input
                    type="checkbox"
                    id="uncertain"
                    checked={manualFatherForm.uncertain_paternity}
                    onChange={(e) => setManualFatherForm({ ...manualFatherForm, uncertain_paternity: e.target.checked })}
                    className="mr-2"
                  />
                  <label htmlFor="uncertain" className="text-sm text-gray-700">
                    ‚ö†Ô∏è Bizonytalan apas√°g (v√©rvizsg√°lat sz√ºks√©ges)
                  </label>
                </div>
              </div>

              <div className="flex justify-end gap-2 mt-6">
                <button
                  onClick={() => {
                    setShowManualFatherModal(false);
                    setManualFatherForm({
                      father_enar: '',
                      father_name: '',
                      father_kplsz: '',
                      uncertain_paternity: false
                    });
                  }}
                  className="px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
                >
                  M√©gse
                </button>
                <button
                  onClick={async () => {
                    try {
                      const updateData = {
                        father_enar: manualFatherForm.father_enar || null,
                        father_name: manualFatherForm.father_name || null,
                        father_kplsz: manualFatherForm.father_kplsz || null,
                        uncertain_paternity: manualFatherForm.uncertain_paternity,
                        father_source: 'manual'
                      };

                      const { error } = await supabase
                        .from('animals')
                        .update(updateData)
                        .eq('enar', animal?.enar);

                      if (error) {
                        console.error('Error updating father data:', error);
                        alert('‚ùå Hiba t√∂rt√©nt az apa adatok ment√©sekor!');
                      } else {
                        alert('‚úÖ Apa adatok sikeresen mentve!');
                        setShowManualFatherModal(false);
                        setManualFatherForm({
                          father_enar: '',
                          father_name: '',
                          father_kplsz: '',
                          uncertain_paternity: false
                        });
                        // Oldal friss√≠t√©se
                        window.location.reload();
                      }
                    } catch (error) {
                      console.error('Error:', error);
                      alert('‚ùå Hiba t√∂rt√©nt!');
                    }
                  }}
                  disabled={!manualFatherForm.father_enar}
                  className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
                >
                  üíæ Ment√©s
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Szapor√≠t√°s Tab */}
        {activeTab === 'szaporitas' && (
          <SzaporitasTab animal={animal} />
        )}

        {/* Placeholder tabs */}

        {/* Ell√©s Tab */}
        {activeTab === 'elles' && (
          <EllesTab animal={animal} />
        )}

        {/* Eg√©szs√©g Tab */}
        {activeTab === 'egeszseg' && (
          <div className="bg-white rounded-lg shadow-sm border p-12 text-center">
            <div className="text-gray-400 text-6xl mb-4">‚ù§Ô∏è</div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              Vakcin√°z√°si rendszer
            </h3>
            <p className="text-gray-500">
              Hamarosan: IBR, BVD, BoviPast vakcin√°z√°sok √©s kezel√©sek
            </p>
          </div>
        )}

        {/* Esem√©nynapl√≥ Tab */}
        {activeTab === 'esemenynaplo' && (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <div className="flex items-center">
                <span className="text-2xl mr-3">üìä</span>
                <h3 className="text-lg font-semibold text-gray-900">Esem√©nynapl√≥</h3>
              </div>
            </div>

            {/* V√°laszt√°s r√∂gz√≠t√©se - T√ñRL√âSI FUNKCI√ìVAL */}
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <h4 className="text-lg font-semibold mb-4">üìÖ V√°laszt√°s r√∂gz√≠t√©se</h4>

              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium mb-2">V√°laszt√°s d√°tuma:</label>
                  <input
                    type="date"
                    value={weaningDate}
                    onChange={(e) => setWeaningDate(e.target.value)}
                    className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-green-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-2">Jegyzetek:</label>
                  <input
                    type="text"
                    value={weaningNotes}
                    onChange={(e) => setWeaningNotes(e.target.value)}
                    placeholder="pl. BoviPast beadva, probl√©mamentes"
                    className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-green-500"
                  />
                </div>
              </div>

              <div className="flex gap-3">
                <button
                  onClick={handleWeaningSubmit}
                  disabled={savingWeaning || !weaningDate}
                  className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed inline-flex items-center"
                >
                  {savingWeaning ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      Ment√©s...
                    </>
                  ) : (
                    <>
                      <span className="mr-2">üìÖ</span>
                      V√°laszt√°s r√∂gz√≠t√©se
                    </>
                  )}
                </button>

                {/* T√ñRL√âSI GOMB */}
                <button
                  onClick={handleDeleteWeaning}
                  className="bg-red-500 text-white px-6 py-3 rounded-lg hover:bg-red-600 inline-flex items-center"
                  title="Utols√≥ v√°laszt√°si bejegyz√©s t√∂rl√©se"
                >
                  <span className="mr-2">üóëÔ∏è</span>
                  Utols√≥ t√∂rl√©se
                </button>
              </div>

              {!weaningDate && (
                <p className="text-sm text-gray-500 mt-2">
                  üí° K√©rlek add meg a v√°laszt√°s d√°tum√°t a ment√©shez
                </p>
              )}

              {/* JELENLEGI V√ÅLASZT√ÅSI BEJEGYZ√âSEK MEGJELEN√çT√âSE */}
              {animal?.notes && animal.notes.includes('üìÖ V√ÅLASZT√ÅS') && (
                <div className="mt-4 p-3 bg-gray-50 rounded-lg">
                  <h5 className="font-medium text-gray-900 mb-2">üìã Jelenlegi v√°laszt√°si bejegyz√©sek:</h5>
                  <div className="text-sm text-gray-700 whitespace-pre-line">
                    {animal.notes
                      .split('\n')
                      .filter(line => line.includes('üìÖ V√ÅLASZT√ÅS'))
                      .map((line, index) => (
                        <div key={index} className="border-l-2 border-green-300 pl-2 mb-1">
                          {line.trim()}
                        </div>
                      ))}
                  </div>
                </div>
              )}
            </div>

            {/* Esem√©ny Timeline - MOST M≈∞K√ñDIK! */}
{/* Esem√©ny Timeline - √ÅTMENETILEG KIKAPCSOLVA */}
<div className="p-6 bg-white rounded-lg">
  <h3 className="text-lg font-semibold mb-4">üìÖ Esem√©ny Timeline</h3>
  <p>√Åtmenetileg kikapcsolva - hamarosan √∫j verzi√≥!</p>
</div>
          </div>
        )}
      </div>
    </div>
  );
}