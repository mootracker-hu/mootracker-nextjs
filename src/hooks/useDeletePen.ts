// src/hooks/useDeletePen.ts
'use client';

import { useState } from 'react';
import { supabase } from '@/lib/supabase';

interface DeletePenResult {
  success: boolean;
  message: string;
  canDelete?: boolean;
  blockers?: string[];
}

interface PenDeleteInfo {
  id: string;
  pen_number: string;
  animal_count: number;
  capacity: number;
  current_function?: {
    function_type: string;
  };
}

export const useDeletePen = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  /**
   * Ellen≈ërzi, hogy a kar√°m t√∂r√∂lhet≈ë-e
   */
  const checkDeletionPossibility = async (pen: PenDeleteInfo): Promise<DeletePenResult> => {
    const blockers: string[] = [];

    try {
      // 1. ELLEN≈êRZ√âS: Vannak-e √°llatok a kar√°mban?
      if (pen.animal_count > 0) {
        blockers.push(`${pen.animal_count} √°llat jelenleg a kar√°mban`);
      }

      // 2. ELLEN≈êRZ√âS: Vannak-e temp borjak?
      const { count: tempCalfCount } = await supabase
        .from('calves')
        .select('*', { count: 'exact', head: true })
        .eq('current_pen_id', pen.id)
        .eq('is_alive', true)
        .is('enar', null);

      if (tempCalfCount && tempCalfCount > 0) {
        blockers.push(`${tempCalfCount} ideiglenes borj√∫ a kar√°mban`);
      }

      // 3. ELLEN≈êRZ√âS: Akt√≠v funkci√≥?
      const isActiveFunction = pen.current_function?.function_type && 
                              pen.current_function.function_type !== '√ºres';
      
      if (isActiveFunction) {
        blockers.push(`Akt√≠v "${pen.current_function?.function_type}" funkci√≥`);
      }

      // 4. ELLEN≈êRZ√âS: F√ºgg≈ë kar√°m t√∂rt√©neti peri√≥dusok?
      const { count: pendingPeriods } = await supabase
        .from('pen_history_periods')
        .select('*', { count: 'exact', head: true })
        .eq('pen_id', pen.id)
        .is('end_date', null); // Akt√≠v peri√≥dusok

      if (pendingPeriods && pendingPeriods > 0) {
        blockers.push(`${pendingPeriods} befejezetlen kar√°m t√∂rt√©neti peri√≥dus`);
      }

      // 5. ELLEN≈êRZ√âS: F√ºgg≈ë animal_pen_assignments?
      const { count: activeAssignments } = await supabase
        .from('animal_pen_assignments')
        .select('*', { count: 'exact', head: true })
        .eq('pen_id', pen.id)
        .is('removed_at', null);

      if (activeAssignments && activeAssignments > 0) {
        blockers.push(`${activeAssignments} akt√≠v √°llat hozz√°rendel√©s`);
      }

      return {
        success: true,
        canDelete: blockers.length === 0,
        message: blockers.length === 0 
          ? 'A kar√°m biztons√°gosan t√∂r√∂lhet≈ë' 
          : 'A kar√°m nem t√∂r√∂lhet≈ë a k√∂vetkez≈ë okok miatt:',
        blockers
      };

    } catch (error) {
      console.error('‚ùå T√∂rl√©si ellen≈ërz√©s hiba:', error);
      return {
        success: false,
        message: 'Hiba t√∂rt√©nt az ellen≈ërz√©s sor√°n: ' + (error as Error).message,
        canDelete: false
      };
    }
  };

  /**
   * Kar√°m t√∂rl√©se - BIZTONS√ÅGOS SORREND
   */
  const deletePen = async (pen: PenDeleteInfo): Promise<DeletePenResult> => {
    setLoading(true);
    setError(null);

    try {
      console.log('üóëÔ∏è Kar√°m t√∂rl√©s kezd√©se:', pen.pen_number);

      // 1. √öJB√ìLI ELLEN≈êRZ√âS t√∂rl√©s el≈ëtt
      const checkResult = await checkDeletionPossibility(pen);
      if (!checkResult.canDelete) {
        return checkResult;
      }

      // 2. KAPCSOL√ìD√ì ADATOK T√ñRL√âSE (BIZTONS√ÅGOS SORREND)
      
      // A) Pen_functions t√∂rl√©se
      console.log('üóëÔ∏è Pen_functions t√∂rl√©se...');
      const { error: functionsError } = await supabase
        .from('pen_functions')
        .delete()
        .eq('pen_id', pen.id);

      if (functionsError) {
        throw new Error('Pen_functions t√∂rl√©si hiba: ' + functionsError.message);
      }

      // B) T√∂rt√©neti animal_pen_assignments t√∂rl√©se (biztons√°gi int√©zked√©s)
      console.log('üóëÔ∏è Animal_pen_assignments t√∂rl√©se...');
      const { error: assignmentsError } = await supabase
        .from('animal_pen_assignments')
        .delete()
        .eq('pen_id', pen.id);

      if (assignmentsError) {
        console.warn('‚ö†Ô∏è Animal_pen_assignments t√∂rl√©si figyelmeztet√©s:', assignmentsError);
        // Ne √°ll√≠tsuk le emiatt, mert lehet, hogy nincs rekord
      }

      // C) T√∂rt√©neti pen_history_periods t√∂rl√©se (OPCION√ÅLIS)
      console.log('üóëÔ∏è Pen_history_periods t√∂rl√©se...');
      const { error: historyError } = await supabase
        .from('pen_history_periods')
        .delete()
        .eq('pen_id', pen.id);

      if (historyError) {
        console.warn('‚ö†Ô∏è Pen_history_periods t√∂rl√©si figyelmeztet√©s:', historyError);
        // Ne √°ll√≠tsuk le emiatt
      }

      // 3. F≈êREKORD T√ñRL√âSE
      console.log('üóëÔ∏è F≈ë kar√°m rekord t√∂rl√©se...');
      const { error: mainError } = await supabase
        .from('pens')
        .delete()
        .eq('id', pen.id);

      if (mainError) {
        throw new Error('Kar√°m t√∂rl√©si hiba: ' + mainError.message);
      }

      console.log('‚úÖ Kar√°m sikeresen t√∂r√∂lve:', pen.pen_number);

      return {
        success: true,
        message: `‚úÖ Kar√°m "${pen.pen_number}" sikeresen t√∂r√∂lve!`,
        canDelete: true
      };

    } catch (error) {
      console.error('‚ùå Kar√°m t√∂rl√©si hiba:', error);
      const errorMessage = 'Kar√°m t√∂rl√©si hiba: ' + (error as Error).message;
      setError(errorMessage);
      
      return {
        success: false,
        message: errorMessage,
        canDelete: false
      };

    } finally {
      setLoading(false);
    }
  };

  /**
   * Quick check csak alapvet≈ë krit√©riumokra (UI haszn√°latra)
   */
  const canQuickDelete = (pen: PenDeleteInfo): boolean => {
    return pen.animal_count === 0 && 
           (!pen.current_function?.function_type || pen.current_function.function_type === '√ºres');
  };

  return {
    deletePen,
    checkDeletionPossibility,
    canQuickDelete,
    loading,
    error
  };
};