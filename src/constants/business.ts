// src/constants/business.ts
/**
 * üêÑ MooTracker - √úzleti Szab√°lyok √©s Konstansok
 * Minden √ºzleti logik√°hoz kapcsol√≥d√≥ konstans egy helyen
 */

// üî¨ VV (Vemhess√©gvizsg√°lat) konstansok
export const VV_CONSTANTS = {
  /** VV esed√©kess√©ge a p√°rz√°s kezdete ut√°n (napokban) */
  DAYS_AFTER_PAIRING: 75,
  
  /** Minim√°lis √©letkor VV-hez (h√≥napokban) */
  MIN_AGE_MONTHS: 24,
  
  /** VV eredm√©ny t√≠pusok */
  RESULTS: ['vemhes', 'ures', 'csira'] as const
} as const;

// üçº Borj√∫ kezel√©si konstansok
export const CALF_CONSTANTS = {
  /** Borj√∫ protokoll hat√°rideje (napokban) - BoviPast + f√ºlsz√°m + szarvtalan√≠t√°s */
  PROTOCOL_DEADLINE_DAYS: 15,
  
  /** V√°laszt√°si √©letkor (h√≥napokban) */
  WEANING_AGE_MONTHS: 6,
  
  /** Temp ID prefix */
  TEMP_ID_PREFIX: 'temp-'
} as const;

// üìÖ √âletkor kateg√≥ria hat√°rok
export const AGE_CONSTANTS = {
  /** Fiatal √°llat hat√°r (h√≥napokban) - sz√≠nk√≥dol√°shoz */
  YOUNG_ANIMAL_MONTHS: 12,
  
  /** Teny√©sz√©retts√©g hat√°r (h√≥napokban) */
  BREEDING_AGE_MONTHS: 18,
  
  /** VV minim√°lis √©letkor (h√≥napokban) */
  VV_MIN_AGE_MONTHS: 24
} as const;

// üè† Kar√°m konstansok (VAL√ìS ADATOK ALAPJ√ÅN)
export const PEN_CONSTANTS = {
  /** Kar√°m t√≠pusok (val√≥s haszn√°lat alapj√°n) */
  PEN_TYPES: {
    OUTDOOR: 'outdoor',   // 17 kar√°m - k√ºls≈ë karamok
    BIRTHING: 'birthing'  // 12 kar√°m - ellet≈ë ist√°ll√≥k
  },
  
  /** Standard h√°rem kapacit√°s (25 n≈ëivar + 2 teny√©szbika) */
  HAREM_CAPACITY: 27,
  
  /** H√°rem teny√©szbika konfigur√°ci√≥ (val√≥s metadata alapj√°n) */
  HAREM_BULL_CONFIG: {
    TYPICAL_COUNT: 1,     // 18 esetben 1 bika
    MAX_COUNT: 2,         // 2 esetben 2 bika  
    MIN_COUNT: 0          // 1 esetben 0 bika
  },
  
  /** Standard vemhes kapacit√°s */
  PREGNANT_CAPACITY: 30,
  
  /** Teh√©n kar√°m kapacit√°s (20 teh√©n + borjak + 2 teny√©szbika) */
  COW_CAPACITY: 40,
  
  /** Nagy karamok kapacit√°sa (14, 15) */
  LARGE_PEN_CAPACITY: 50,
  
  /** Kont√©ner karamok kapacit√°sa (12A, 12B) */
  CONTAINER_PEN_CAPACITY: 15,
  
  /** K√≥rh√°z kar√°m maxim√°lis kapacit√°s */
  HOSPITAL_MAX_CAPACITY: 5,
  
  /** Karant√©n kar√°m maxim√°lis kapacit√°s */
  QUARANTINE_MAX_CAPACITY: 10
} as const;

// üéØ Kateg√≥ria konstansok (VAL√ìS ADATOK ALAPJ√ÅN)
export const CATEGORY_CONSTANTS = {
  /** Teny√©szbika kateg√≥ria */
  BREEDING_BULL: 'teny√©szbika',
  
  /** Borj√∫ kateg√≥ri√°k (64 √°llat) */
  CALF_CATEGORIES: ['h√≠mivar√∫_borj√∫', 'n≈ëivar√∫_borj√∫'] as const,
  
  /** N≈ëivar kateg√≥ri√°k (231 √°llat) */
  FEMALE_CATEGORIES: ['teh√©n', 'sz≈±z_√ºsz≈ë', 'vemhes_√ºsz≈ë'] as const,
  
  /** H√≠mivar kateg√≥ri√°k (32 √°llat) */
  MALE_CATEGORIES: ['teny√©szbika', 'h√≠z√≥bika'] as const,
  
  /** √ñsszes kateg√≥ria fontoss√°gi sorrendben */
  ALL_CATEGORIES: [
    'sz≈±z_√ºsz≈ë',      // 195 √°llat - legnagyobb kateg√≥ria
    'h√≠mivar√∫_borj√∫', // 37 √°llat
    'teh√©n',          // 31 √°llat  
    'n≈ëivar√∫_borj√∫',  // 27 √°llat
    'h√≠z√≥bika',       // 24 √°llat
    'teny√©szbika',    // 8 √°llat
    'vemhes_√ºsz≈ë'     // 5 √°llat
  ] as const
} as const;

// üîÑ Funkci√≥ v√°lt√°si konstansok (VAL√ìS ADATOK ALAPJ√ÅN)
export const FUNCTION_CONSTANTS = {
  /** Automatikus snapshot t√≠pusok */
  SNAPSHOT_TYPES: ['function_changed', 'manual_entry', 'scheduled'] as const,
  
  /** Assignment reason t√≠pusok (gyakoris√°gi sorrendben) */
  ASSIGNMENT_REASONS: {
    // Automatikus rendszer gener√°lt
    PERIOD_SYNC_EDIT: 'Szerkesztett peri√≥dus szinkroniz√°ci√≥',
    PERIOD_SYNC_ONGOING: 'Folyamatban l√©v≈ë peri√≥dus szinkroniz√°ci√≥', 
    HAREM_SYNC: 'H√°rem metadata szinkroniz√°ci√≥',
    BULL_ADDITION: 'teny√©szbika_hozz√°ad√°s',
    
    // Manual m≈±veletek
    MANUAL_EDIT: 'manual_edit',
    FUNCTION_CHANGE: 'Funkci√≥ v√°lt√°s',
    PEN_CHANGE: 'Kar√°m v√°lt√°s', 
    PEN_ASSIGNMENT: 'Kar√°m hozz√°rendel√©s',
    
    // Speci√°lis esetek
    BREEDING: 'breeding',
    RESTORATION: 'Vissza√°ll√≠tva esem√©ny t√∂rl√©se miatt',
    CORRECTION: 'Jav√≠t√°s - helyes kar√°m',
    INITIAL: 'initial_assignment',
    TEST: 'teszt'
  },
  
  /** Kar√°m funkci√≥k gyakoris√°gi sorrendben (112 √∂sszes haszn√°lat) */
  FUNCTION_USAGE_ORDER: [
    'h√°rem',    // 28 haszn√°lat - leggyakoribb
    'ellet≈ë',   // 22 haszn√°lat
    '√ºres',     // 15 haszn√°lat  
    '√≥vi',      // 14 haszn√°lat
    'b√∂lcsi',   // 12 haszn√°lat
    'teh√©n',    // 6 haszn√°lat
    'vemhes',   // 5 haszn√°lat
    'h√≠z√≥bika', // 5 haszn√°lat
    '√°tmeneti', // 3 haszn√°lat
    'k√≥rh√°z',   // 1 haszn√°lat - ritka
    'selejt'    // 1 haszn√°lat - ritka
  ] as const
} as const;

// üìä S√∫ly konstansok
export const WEIGHT_CONSTANTS = {
  /** S√∫ly megjelen√≠t√©si k√ºsz√∂b (kg alatt nincs megjelen√≠t√©s) */
  MIN_DISPLAY_WEIGHT: 10,
  
  /** Maxim√°lis re√°lis s√∫ly (kg) */
  MAX_REALISTIC_WEIGHT: 1000,
  
  /** S√∫ly m√©r√©s gyakoris√°g (napokban) */
  MEASUREMENT_FREQUENCY_DAYS: 30
} as const;

// üì± UI konstansok (business logik√°hoz k√∂t√∂tt)
export const UI_BUSINESS_CONSTANTS = {
  /** T√°bl√°zat lapoz√°si m√©ret */
  TABLE_PAGE_SIZE: 50,
  
  /** Keres√©si minimum karakterek */
  SEARCH_MIN_CHARS: 2,
  
  /** Automatikus ment√©s id≈ëk√∂z (ms) */
  AUTOSAVE_INTERVAL_MS: 30000
} as const;

// üö® Riaszt√°si szintek (3 fokozatos rendszer a dokumentum alapj√°n)
export const ALERT_THRESHOLDS = {
  /** VV riaszt√°si szintek (napokban pairing_date ut√°n) */
  VV_LEVELS: {
    KEZDETE: 60,   // Els≈ë figyelmeztet√©s
    AJANLOTT: 75,  // Javasolt id≈ëpont (ezt haszn√°ljuk alap√©rtelmezettk√©nt)
    SURGOS: 90     // S√ºrg≈ës hat√°rid≈ë
  },
  
  /** F√ºlsz√°moz√°si szintek (napokban sz√ºlet√©s ut√°n) */
  EAR_TAG_LEVELS: {
    KEZDETE: 10,
    AJANLOTT: 15,  // Ezt haszn√°ljuk alap√©rtelmezettk√©nt
    SURGOS: 20
  },
  
  /** V√°laszt√°si szintek (h√≥napokban) */
  WEANING_LEVELS: {
    KEZDETE: 6,
    AJANLOTT: 7,
    SURGOS: 8
  },
  
  /** Kateg√≥ria √°tmeneti szintek */
  TRANSITION_LEVELS: {
    /** B√∂lcsi ‚Üí √ìvi (h√≥napokban) */
    BOLCSI_TO_OVI: {
      KEZDETE: 11,
      AJANLOTT: 12,
      SURGOS: 14
    },
    /** √ìvi ‚Üí H√°rem (h√≥napokban) */
    OVI_TO_HAREM: {
      KEZDETE: 22,
      AJANLOTT: 24,
      SURGOS: 26
    },
    /** H√≠z√≥bika √©rt√©kes√≠t√©s (h√≥napokban) */
    HIZBIKA_SALES: {
      KEZDETE: 18,
      AJANLOTT: 20,
      SURGOS: 24
    }
  }
} as const;

// üîó Export t√≠pusok a type safety-hez (FRISS√çTETT)
export type VVResult = typeof VV_CONSTANTS.RESULTS[number];
export type CalfCategory = typeof CATEGORY_CONSTANTS.CALF_CATEGORIES[number];
export type FemaleCategory = typeof CATEGORY_CONSTANTS.FEMALE_CATEGORIES[number];
export type MaleCategory = typeof CATEGORY_CONSTANTS.MALE_CATEGORIES[number];
export type AnimalCategory = typeof CATEGORY_CONSTANTS.ALL_CATEGORIES[number];
export type SnapshotType = typeof FUNCTION_CONSTANTS.SNAPSHOT_TYPES[number];
export type PenType = typeof PEN_CONSTANTS.PEN_TYPES[keyof typeof PEN_CONSTANTS.PEN_TYPES];

// ‚úÖ VAL√ìS ADATOK ALAPJ√ÅN - Sz√ºlet√©si helyek
export const BIRTH_LOCATIONS = {
  PURCHASED: 'v√°s√°rolt',  // 262 √°llat - t√∂bbs√©g
  BORN_HERE: 'n√°lunk',    // 65 √°llat
  // 'ismeretlen' - nincs haszn√°latban
} as const;

// ‚úÖ VAL√ìS ADATOK ALAPJ√ÅN - Ivar konstansok (JAV√çTOTT)
export const GENDER_CONSTANTS = {
  /** N≈ëivar jel√∂l√©sek */
  FEMALE: 'n≈ë',          // 257 √°llat - ez a standard adatb√°zisban
  
  /** H√≠mivar jel√∂l√©sek */
  MALE: 'h√≠m',           // 69 √°llat - ez a standard adatb√°zisban
  
  /** Frontend display mapping (a form miatt) */
  DISPLAY_MAPPING: {
    'n≈ë': 'n≈ëivar',      // Adatb√°zis ‚Üí Frontend megjelen√≠t√©s
    'h√≠m': 'h√≠mivar'     // Adatb√°zis ‚Üí Frontend megjelen√≠t√©s
  },
  
  /** Reverse mapping (form ‚Üí adatb√°zis) */
  FORM_TO_DB_MAPPING: {
    'n≈ëivar': 'n≈ë',      // Form √©rt√©k ‚Üí Adatb√°zis √©rt√©k
    'h√≠mivar': 'h√≠m'     // Form √©rt√©k ‚Üí Adatb√°zis √©rt√©k
  }
} as const;

// ‚úÖ VAL√ìS ADATOK ALAPJ√ÅN - Esem√©ny t√≠pusok
export const EVENT_TYPES = {
  FUNCTION_CHANGE: 'function_change',  // 9 esem√©ny
  PEN_ASSIGNMENT: 'pen_assignment',    // 9 esem√©ny  
  PEN_MOVEMENT: 'pen_movement',        // 8 esem√©ny
  HEALTH_EVENT: 'health_event'         // 1 esem√©ny
} as const;

// ‚úÖ VAL√ìS ADATOK ALAPJ√ÅN - Metadata konstansok
export const METADATA_CONSTANTS = {
  /** K√≥rh√°z kezel√©si t√≠pusok */
  TREATMENT_TYPES: {
    OBSERVATION: 'megfigyeles'  // Egyetlen haszn√°lt t√≠pus
  },
  
  /** √Åtmeneti kar√°m okok */
  TRANSITIONAL_REASONS: {
    CLASSIFICATION: 'besorol√°s_alatt'  // Egyetlen haszn√°lt ok
  },
  
  /** Selejt okok */
  CULLING_REASONS: {
    REPRODUCTIVE_PROBLEM: 'reprodukcios_problema'  // Egyetlen haszn√°lt ok
  }
} as const;

// üöÄ Helper f√ºggv√©nyek (egyszer≈± sz√°m√≠t√°sok)
export const BusinessHelpers = {
  /**
   * VV esed√©kess√©g√©nek sz√°m√≠t√°sa (alap√©rtelmezett AJANLOTT szint)
   * @param pairingDate - P√°rz√°s kezdete (YYYY-MM-DD)
   * @param level - Riaszt√°si szint ('KEZDETE' | 'AJANLOTT' | 'SURGOS')
   * @returns VV esed√©kess√©g d√°tuma (YYYY-MM-DD)
   */
  calculateVVDueDate: (pairingDate: string, level: 'KEZDETE' | 'AJANLOTT' | 'SURGOS' = 'AJANLOTT'): string => {
    const pairing = new Date(pairingDate);
    const days = ALERT_THRESHOLDS.VV_LEVELS[level];
    const vvDate = new Date(pairing.getTime() + (days * 24 * 60 * 60 * 1000));
    return vvDate.toISOString().split('T')[0];
  },

  /**
   * √Ållat √©letkor sz√°m√≠t√°sa h√≥napokban
   * @param birthDate - Sz√ºlet√©si d√°tum (YYYY-MM-DD)
   * @returns √âletkor h√≥napokban
   */
  calculateAgeInMonths: (birthDate: string): number => {
    const birth = new Date(birthDate);
    const today = new Date();
    const ageInMs = today.getTime() - birth.getTime();
    return Math.floor(ageInMs / (1000 * 60 * 60 * 24 * 30.44)); // 30.44 = √°tlagos h√≥nap napjai
  },

  /**
   * √Ållat √©letkor sz√°m√≠t√°sa napokban (borj√∫ protokollhoz)
   * @param birthDate - Sz√ºlet√©si d√°tum (YYYY-MM-DD)
   * @returns √âletkor napokban
   */
  calculateAgeInDays: (birthDate: string): number => {
    const birth = new Date(birthDate);
    const today = new Date();
    return Math.floor((today.getTime() - birth.getTime()) / (1000 * 60 * 60 * 24));
  },

  /**
   * Borj√∫ protokoll st√°tusz√°nak ellen≈ërz√©se (3 szint≈±)
   * @param birthDate - Sz√ºlet√©si d√°tum (YYYY-MM-DD)
   * @returns Protokoll st√°tusz objektum
   */
  getCalfProtocolStatus: (birthDate: string): { 
    level: 'KEZDETE' | 'AJANLOTT' | 'SURGOS' | 'OVERDUE';
    overdue: boolean; 
    daysLeft: number;
    message: string;
    color: string;
  } => {
    const ageInDays = BusinessHelpers.calculateAgeInDays(birthDate);
    const thresholds = ALERT_THRESHOLDS.EAR_TAG_LEVELS;
    
    if (ageInDays <= thresholds.KEZDETE) {
      return {
        level: 'KEZDETE',
        overdue: false,
        daysLeft: thresholds.AJANLOTT - ageInDays,
        message: `${thresholds.AJANLOTT - ageInDays} nap m√∫lva: BoviPast + f√ºlsz√°m`,
        color: 'bg-blue-100 text-blue-800 border-blue-200'
      };
    } else if (ageInDays <= thresholds.AJANLOTT) {
      return {
        level: 'AJANLOTT',
        overdue: false,
        daysLeft: thresholds.AJANLOTT - ageInDays,
        message: `${thresholds.AJANLOTT - ageInDays} nap m√∫lva: BoviPast + f√ºlsz√°m`,
        color: 'bg-yellow-100 text-yellow-800 border-yellow-200'
      };
    } else if (ageInDays <= thresholds.SURGOS) {
      return {
        level: 'SURGOS',
        overdue: false,
        daysLeft: thresholds.SURGOS - ageInDays,
        message: `S√úRG≈êS: ${thresholds.SURGOS - ageInDays} nap a hat√°rid≈ëig!`,
        color: 'bg-orange-100 text-orange-800 border-orange-200'
      };
    } else {
      return {
        level: 'OVERDUE',
        overdue: true,
        daysLeft: ageInDays - thresholds.SURGOS,
        message: `${ageInDays - thresholds.SURGOS} napja t√∫ll√©pte: S√ºrg≈ës protokoll!`,
        color: 'bg-red-100 text-red-800 border-red-200'
      };
    }
  },

  /**
   * √Ållat VV alkalmass√°g√°nak ellen≈ërz√©se
   * @param birthDate - Sz√ºlet√©si d√°tum
   * @param gender - √Ållat ivara
   * @returns true ha alkalmas VV-re
   */
  isEligibleForVV: (birthDate: string, gender: string): boolean => {
    const ageInMonths = BusinessHelpers.calculateAgeInMonths(birthDate);
    const isFemale = gender === 'n≈ë' || gender === 'n≈ëivar';
    return isFemale && ageInMonths >= VV_CONSTANTS.MIN_AGE_MONTHS;
  },

  /**
   * Kateg√≥ria √°tmenet ellen≈ërz√©se
   * @param birthDate - Sz√ºlet√©si d√°tum
   * @param currentCategory - Jelenlegi kateg√≥ria
   * @returns √Åtmenet inform√°ci√≥k
   */
  getCategoryTransitionStatus: (birthDate: string, currentCategory: string): {
    shouldTransition: boolean;
    recommendedCategory: string | null;
    ageInMonths: number;
    level: 'KEZDETE' | 'AJANLOTT' | 'SURGOS' | null;
  } => {
    const ageInMonths = BusinessHelpers.calculateAgeInMonths(birthDate);
    
    // B√∂lcsi ‚Üí √ìvi √°tmenet
    if (currentCategory.includes('borj√∫') && ageInMonths >= ALERT_THRESHOLDS.TRANSITION_LEVELS.BOLCSI_TO_OVI.KEZDETE) {
      let level: 'KEZDETE' | 'AJANLOTT' | 'SURGOS' = 'KEZDETE';
      if (ageInMonths >= ALERT_THRESHOLDS.TRANSITION_LEVELS.BOLCSI_TO_OVI.SURGOS) level = 'SURGOS';
      else if (ageInMonths >= ALERT_THRESHOLDS.TRANSITION_LEVELS.BOLCSI_TO_OVI.AJANLOTT) level = 'AJANLOTT';
      
      return {
        shouldTransition: true,
        recommendedCategory: currentCategory.includes('n≈ëivar') ? 'sz≈±z_√ºsz≈ë' : 'h√≠z√≥bika',
        ageInMonths,
        level
      };
    }
    
    // √ìvi ‚Üí H√°rem √°tmenet (csak n≈ëivarok)
    if (currentCategory.includes('√ºsz≈ë') && ageInMonths >= ALERT_THRESHOLDS.TRANSITION_LEVELS.OVI_TO_HAREM.KEZDETE) {
      let level: 'KEZDETE' | 'AJANLOTT' | 'SURGOS' = 'KEZDETE';
      if (ageInMonths >= ALERT_THRESHOLDS.TRANSITION_LEVELS.OVI_TO_HAREM.SURGOS) level = 'SURGOS';
      else if (ageInMonths >= ALERT_THRESHOLDS.TRANSITION_LEVELS.OVI_TO_HAREM.AJANLOTT) level = 'AJANLOTT';
      
      return {
        shouldTransition: true,
        recommendedCategory: 'h√°remben_l√©v≈ë_√ºsz≈ë', 
        ageInMonths,
        level
      };
    }
    
    return {
      shouldTransition: false,
      recommendedCategory: null,
      ageInMonths,
      level: null
    };
  }
} as const;